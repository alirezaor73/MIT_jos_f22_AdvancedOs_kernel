
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
.globl _head64
_head64:

# Save multiboot_info addr passed by bootloader
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

    movw $0x1234,0x472			# warm boot	
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
    movl $CR4_PAE,%eax	
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4 48                	in     $0x48,%al

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 60 22 04 80 	movabs $0x8004226038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 60 22 04 80 	movabs $0x8004226000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <i386_init>:



void
i386_init(void)
{
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
	extern char edata[], end[];

	// Before doing anything else, complete the ELF loading process.
	// Clear the uninitialized global data (BSS) section of our program.
	// This ensures that all static/global variables start out zero.
	memset(edata, 0, end - edata);
  800420005c:	48 ba e0 e6 2b 04 80 	movabs $0x80042be6e0,%rdx
  8004200063:	00 00 00 
  8004200066:	48 b8 31 bf 2b 04 80 	movabs $0x80042bbf31,%rax
  800420006d:	00 00 00 
  8004200070:	48 29 c2             	sub    %rax,%rdx
  8004200073:	48 89 d0             	mov    %rdx,%rax
  8004200076:	48 89 c2             	mov    %rax,%rdx
  8004200079:	be 00 00 00 00       	mov    $0x0,%esi
  800420007e:	48 bf 31 bf 2b 04 80 	movabs $0x80042bbf31,%rdi
  8004200085:	00 00 00 
  8004200088:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420008f:	00 00 00 
  8004200092:	ff d0                	callq  *%rax

	// Initialize the console.
	// Can't call cprintf until after we do this!
	cons_init();
  8004200094:	48 b8 b2 0d 20 04 80 	movabs $0x8004200db2,%rax
  800420009b:	00 00 00 
  800420009e:	ff d0                	callq  *%rax

	cprintf("6828 decimal is %o octal!\n", 6828);
  80042000a0:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000a5:	48 bf a0 18 21 04 80 	movabs $0x80042118a0,%rdi
  80042000ac:	00 00 00 
  80042000af:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000b4:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042000bb:	00 00 00 
  80042000be:	ff d2                	callq  *%rdx

	extern char end[];
	end_debug = read_section_headers((0x10000+KERNBASE), (uintptr_t)end);
  80042000c0:	48 b8 e0 e6 2b 04 80 	movabs $0x80042be6e0,%rax
  80042000c7:	00 00 00 
  80042000ca:	48 89 c6             	mov    %rax,%rsi
  80042000cd:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  80042000d4:	00 00 00 
  80042000d7:	48 b8 d4 0e 21 04 80 	movabs $0x8004210ed4,%rax
  80042000de:	00 00 00 
  80042000e1:	ff d0                	callq  *%rax
  80042000e3:	48 ba 48 d6 2b 04 80 	movabs $0x80042bd648,%rdx
  80042000ea:	00 00 00 
  80042000ed:	48 89 02             	mov    %rax,(%rdx)

	// Lab 2 memory management initialization functions
	x64_vm_init();
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 6c 1e 20 04 80 	movabs $0x8004201e6c,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx

	// Lab 3 user environment initialization functions
	env_init();
  8004200101:	48 b8 93 67 20 04 80 	movabs $0x8004206793,%rax
  8004200108:	00 00 00 
  800420010b:	ff d0                	callq  *%rax
	trap_init();
  800420010d:	48 b8 f5 77 20 04 80 	movabs $0x80042077f5,%rax
  8004200114:	00 00 00 
  8004200117:	ff d0                	callq  *%rax



#if defined(TEST)
	// Don't touch -- used by grading script!
	ENV_CREATE(TEST, ENV_TYPE_USER);
  8004200119:	be 00 00 00 00       	mov    $0x0,%esi
  800420011e:	48 bf d9 92 24 04 80 	movabs $0x80042492d9,%rdi
  8004200125:	00 00 00 
  8004200128:	48 b8 b5 6e 20 04 80 	movabs $0x8004206eb5,%rax
  800420012f:	00 00 00 
  8004200132:	ff d0                	callq  *%rax

	ENV_CREATE(user_hello, ENV_TYPE_USER);
#endif // TEST*

	// We only have one user environment for now, so just run it.
	env_run(&envs[0]);
  8004200134:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  800420013b:	00 00 00 
  800420013e:	48 8b 00             	mov    (%rax),%rax
  8004200141:	48 89 c7             	mov    %rax,%rdi
  8004200144:	48 b8 01 75 20 04 80 	movabs $0x8004207501,%rax
  800420014b:	00 00 00 
  800420014e:	ff d0                	callq  *%rax

0000008004200150 <_panic>:
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", and then enters the kernel monitor.
 */
void
_panic(const char *file, int line, const char *fmt,...)
{
  8004200150:	55                   	push   %rbp
  8004200151:	48 89 e5             	mov    %rsp,%rbp
  8004200154:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420015b:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004200162:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200168:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420016f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200176:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420017d:	84 c0                	test   %al,%al
  800420017f:	74 20                	je     80042001a1 <_panic+0x51>
  8004200181:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200185:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200189:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420018d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200191:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200195:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200199:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420019d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042001a1:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	va_list ap;

	if (panicstr)
  80042001a8:	48 b8 50 d6 2b 04 80 	movabs $0x80042bd650,%rax
  80042001af:	00 00 00 
  80042001b2:	48 8b 00             	mov    (%rax),%rax
  80042001b5:	48 85 c0             	test   %rax,%rax
  80042001b8:	74 05                	je     80042001bf <_panic+0x6f>
		goto dead;
  80042001ba:	e9 a9 00 00 00       	jmpq   8004200268 <_panic+0x118>
	panicstr = fmt;
  80042001bf:	48 b8 50 d6 2b 04 80 	movabs $0x80042bd650,%rax
  80042001c6:	00 00 00 
  80042001c9:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  80042001d0:	48 89 10             	mov    %rdx,(%rax)

	// Be extra sure that the machine is in as reasonable state
	__asm __volatile("cli; cld");
  80042001d3:	fa                   	cli    
  80042001d4:	fc                   	cld    

	va_start(ap, fmt);
  80042001d5:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  80042001dc:	00 00 00 
  80042001df:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  80042001e6:	00 00 00 
  80042001e9:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042001ed:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042001f4:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042001fb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	cprintf("kernel panic at %s:%d: ", file, line);
  8004200202:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  8004200208:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420020f:	48 89 c6             	mov    %rax,%rsi
  8004200212:	48 bf bb 18 21 04 80 	movabs $0x80042118bb,%rdi
  8004200219:	00 00 00 
  800420021c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200221:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004200228:	00 00 00 
  800420022b:	ff d1                	callq  *%rcx
	vcprintf(fmt, ap);
  800420022d:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  8004200234:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  800420023b:	48 89 d6             	mov    %rdx,%rsi
  800420023e:	48 89 c7             	mov    %rax,%rdi
  8004200241:	48 b8 77 76 20 04 80 	movabs $0x8004207677,%rax
  8004200248:	00 00 00 
  800420024b:	ff d0                	callq  *%rax
	cprintf("\n");
  800420024d:	48 bf d3 18 21 04 80 	movabs $0x80042118d3,%rdi
  8004200254:	00 00 00 
  8004200257:	b8 00 00 00 00       	mov    $0x0,%eax
  800420025c:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004200263:	00 00 00 
  8004200266:	ff d2                	callq  *%rdx
	va_end(ap);

dead:
	/* break into the kernel monitor */
	while (1)
		monitor(NULL);
  8004200268:	bf 00 00 00 00       	mov    $0x0,%edi
  800420026d:	48 b8 ad 12 20 04 80 	movabs $0x80042012ad,%rax
  8004200274:	00 00 00 
  8004200277:	ff d0                	callq  *%rax
  8004200279:	eb ed                	jmp    8004200268 <_panic+0x118>

000000800420027b <_warn>:
}

/* like panic, but don't */
void
_warn(const char *file, int line, const char *fmt,...)
{
  800420027b:	55                   	push   %rbp
  800420027c:	48 89 e5             	mov    %rsp,%rbp
  800420027f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004200286:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420028d:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200293:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420029a:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042002a1:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042002a8:	84 c0                	test   %al,%al
  80042002aa:	74 20                	je     80042002cc <_warn+0x51>
  80042002ac:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042002b0:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042002b4:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  80042002b8:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042002bc:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  80042002c0:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042002c4:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042002c8:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042002cc:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	va_list ap;

	va_start(ap, fmt);
  80042002d3:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  80042002da:	00 00 00 
  80042002dd:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  80042002e4:	00 00 00 
  80042002e7:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042002eb:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042002f2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042002f9:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	cprintf("kernel warning at %s:%d: ", file, line);
  8004200300:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  8004200306:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420030d:	48 89 c6             	mov    %rax,%rsi
  8004200310:	48 bf d5 18 21 04 80 	movabs $0x80042118d5,%rdi
  8004200317:	00 00 00 
  800420031a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420031f:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004200326:	00 00 00 
  8004200329:	ff d1                	callq  *%rcx
	vcprintf(fmt, ap);
  800420032b:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  8004200332:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004200339:	48 89 d6             	mov    %rdx,%rsi
  800420033c:	48 89 c7             	mov    %rax,%rdi
  800420033f:	48 b8 77 76 20 04 80 	movabs $0x8004207677,%rax
  8004200346:	00 00 00 
  8004200349:	ff d0                	callq  *%rax
	cprintf("\n");
  800420034b:	48 bf d3 18 21 04 80 	movabs $0x80042118d3,%rdi
  8004200352:	00 00 00 
  8004200355:	b8 00 00 00 00       	mov    $0x0,%eax
  800420035a:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004200361:	00 00 00 
  8004200364:	ff d2                	callq  *%rdx
	va_end(ap);
}
  8004200366:	c9                   	leaveq 
  8004200367:	c3                   	retq   

0000008004200368 <delay>:
static void cons_putc(int c);

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
  8004200368:	55                   	push   %rbp
  8004200369:	48 89 e5             	mov    %rsp,%rbp
  800420036c:	48 83 ec 20          	sub    $0x20,%rsp
  8004200370:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200377:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420037a:	89 c2                	mov    %eax,%edx
  800420037c:	ec                   	in     (%dx),%al
  800420037d:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200380:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  8004200387:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420038a:	89 c2                	mov    %eax,%edx
  800420038c:	ec                   	in     (%dx),%al
  800420038d:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200390:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  8004200397:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420039a:	89 c2                	mov    %eax,%edx
  800420039c:	ec                   	in     (%dx),%al
  800420039d:	88 45 eb             	mov    %al,-0x15(%rbp)
  80042003a0:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  80042003a7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042003aa:	89 c2                	mov    %eax,%edx
  80042003ac:	ec                   	in     (%dx),%al
  80042003ad:	88 45 e3             	mov    %al,-0x1d(%rbp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
  80042003b0:	c9                   	leaveq 
  80042003b1:	c3                   	retq   

00000080042003b2 <serial_proc_data>:

static bool serial_exists;

static int
serial_proc_data(void)
{
  80042003b2:	55                   	push   %rbp
  80042003b3:	48 89 e5             	mov    %rsp,%rbp
  80042003b6:	48 83 ec 10          	sub    $0x10,%rsp
  80042003ba:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  80042003c1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042003c4:	89 c2                	mov    %eax,%edx
  80042003c6:	ec                   	in     (%dx),%al
  80042003c7:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  80042003ca:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
  80042003ce:	0f b6 c0             	movzbl %al,%eax
  80042003d1:	83 e0 01             	and    $0x1,%eax
  80042003d4:	85 c0                	test   %eax,%eax
  80042003d6:	75 07                	jne    80042003df <serial_proc_data+0x2d>
		return -1;
  80042003d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042003dd:	eb 17                	jmp    80042003f6 <serial_proc_data+0x44>
  80042003df:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042003e6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042003e9:	89 c2                	mov    %eax,%edx
  80042003eb:	ec                   	in     (%dx),%al
  80042003ec:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  80042003ef:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
	return inb(COM1+COM_RX);
  80042003f3:	0f b6 c0             	movzbl %al,%eax
}
  80042003f6:	c9                   	leaveq 
  80042003f7:	c3                   	retq   

00000080042003f8 <serial_intr>:

void
serial_intr(void)
{
  80042003f8:	55                   	push   %rbp
  80042003f9:	48 89 e5             	mov    %rsp,%rbp
	if (serial_exists)
  80042003fc:	48 b8 40 bf 2b 04 80 	movabs $0x80042bbf40,%rax
  8004200403:	00 00 00 
  8004200406:	0f b6 00             	movzbl (%rax),%eax
  8004200409:	84 c0                	test   %al,%al
  800420040b:	74 16                	je     8004200423 <serial_intr+0x2b>
		cons_intr(serial_proc_data);
  800420040d:	48 bf b2 03 20 04 80 	movabs $0x80042003b2,%rdi
  8004200414:	00 00 00 
  8004200417:	48 b8 35 0c 20 04 80 	movabs $0x8004200c35,%rax
  800420041e:	00 00 00 
  8004200421:	ff d0                	callq  *%rax
}
  8004200423:	5d                   	pop    %rbp
  8004200424:	c3                   	retq   

0000008004200425 <serial_putc>:

static void
serial_putc(int c)
{
  8004200425:	55                   	push   %rbp
  8004200426:	48 89 e5             	mov    %rsp,%rbp
  8004200429:	48 83 ec 28          	sub    $0x28,%rsp
  800420042d:	89 7d dc             	mov    %edi,-0x24(%rbp)
	int i;

	for (i = 0;
  8004200430:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200437:	eb 10                	jmp    8004200449 <serial_putc+0x24>
	     !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800;
	     i++)
		delay();
  8004200439:	48 b8 68 03 20 04 80 	movabs $0x8004200368,%rax
  8004200440:	00 00 00 
  8004200443:	ff d0                	callq  *%rax
{
	int i;

	for (i = 0;
	     !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800;
	     i++)
  8004200445:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200449:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200450:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200453:	89 c2                	mov    %eax,%edx
  8004200455:	ec                   	in     (%dx),%al
  8004200456:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200459:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
serial_putc(int c)
{
	int i;

	for (i = 0;
	     !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800;
  800420045d:	0f b6 c0             	movzbl %al,%eax
  8004200460:	83 e0 20             	and    $0x20,%eax
static void
serial_putc(int c)
{
	int i;

	for (i = 0;
  8004200463:	85 c0                	test   %eax,%eax
  8004200465:	75 09                	jne    8004200470 <serial_putc+0x4b>
	     !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800;
  8004200467:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420046e:	7e c9                	jle    8004200439 <serial_putc+0x14>
	     i++)
		delay();

	outb(COM1 + COM_TX, c);
  8004200470:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200473:	0f b6 c0             	movzbl %al,%eax
  8004200476:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  800420047d:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200480:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200484:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200487:	ee                   	out    %al,(%dx)
}
  8004200488:	c9                   	leaveq 
  8004200489:	c3                   	retq   

000000800420048a <serial_init>:

static void
serial_init(void)
{
  800420048a:	55                   	push   %rbp
  800420048b:	48 89 e5             	mov    %rsp,%rbp
  800420048e:	48 83 ec 50          	sub    $0x50,%rsp
  8004200492:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  8004200499:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  800420049d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042004a1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042004a4:	ee                   	out    %al,(%dx)
  80042004a5:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  80042004ac:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  80042004b0:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042004b4:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042004b7:	ee                   	out    %al,(%dx)
  80042004b8:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  80042004bf:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  80042004c3:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042004c7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042004ca:	ee                   	out    %al,(%dx)
  80042004cb:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  80042004d2:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  80042004d6:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042004da:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042004dd:	ee                   	out    %al,(%dx)
  80042004de:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  80042004e5:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  80042004e9:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042004ed:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042004f0:	ee                   	out    %al,(%dx)
  80042004f1:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  80042004f8:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  80042004fc:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200500:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200503:	ee                   	out    %al,(%dx)
  8004200504:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  800420050b:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  800420050f:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004200513:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004200516:	ee                   	out    %al,(%dx)
  8004200517:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420051e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004200521:	89 c2                	mov    %eax,%edx
  8004200523:	ec                   	in     (%dx),%al
  8004200524:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004200527:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
  800420052b:	3c ff                	cmp    $0xff,%al
  800420052d:	0f 95 c2             	setne  %dl
  8004200530:	48 b8 40 bf 2b 04 80 	movabs $0x80042bbf40,%rax
  8004200537:	00 00 00 
  800420053a:	88 10                	mov    %dl,(%rax)
  800420053c:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200543:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004200546:	89 c2                	mov    %eax,%edx
  8004200548:	ec                   	in     (%dx),%al
  8004200549:	88 45 bb             	mov    %al,-0x45(%rbp)
  800420054c:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  8004200553:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  8004200556:	89 c2                	mov    %eax,%edx
  8004200558:	ec                   	in     (%dx),%al
  8004200559:	88 45 b3             	mov    %al,-0x4d(%rbp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
  800420055c:	c9                   	leaveq 
  800420055d:	c3                   	retq   

000000800420055e <lpt_putc>:
// For information on PC parallel port programming, see the class References
// page.

static void
lpt_putc(int c)
{
  800420055e:	55                   	push   %rbp
  800420055f:	48 89 e5             	mov    %rsp,%rbp
  8004200562:	48 83 ec 38          	sub    $0x38,%rsp
  8004200566:	89 7d cc             	mov    %edi,-0x34(%rbp)
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 12800; i++)
  8004200569:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200570:	eb 10                	jmp    8004200582 <lpt_putc+0x24>
		delay();
  8004200572:	48 b8 68 03 20 04 80 	movabs $0x8004200368,%rax
  8004200579:	00 00 00 
  800420057c:	ff d0                	callq  *%rax
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 12800; i++)
  800420057e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200582:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200589:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800420058c:	89 c2                	mov    %eax,%edx
  800420058e:	ec                   	in     (%dx),%al
  800420058f:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200592:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200596:	84 c0                	test   %al,%al
  8004200598:	78 09                	js     80042005a3 <lpt_putc+0x45>
  800420059a:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042005a1:	7e cf                	jle    8004200572 <lpt_putc+0x14>
		delay();
	outb(0x378+0, c);
  80042005a3:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042005a6:	0f b6 c0             	movzbl %al,%eax
  80042005a9:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  80042005b0:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042005b3:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  80042005b7:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042005ba:	ee                   	out    %al,(%dx)
  80042005bb:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  80042005c2:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  80042005c6:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042005ca:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042005cd:	ee                   	out    %al,(%dx)
  80042005ce:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  80042005d5:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  80042005d9:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042005dd:	8b 55 e0             	mov    -0x20(%rbp),%edx
  80042005e0:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
  80042005e1:	c9                   	leaveq 
  80042005e2:	c3                   	retq   

00000080042005e3 <cga_init>:
static uint16_t *crt_buf;
static uint16_t crt_pos;

static void
cga_init(void)
{
  80042005e3:	55                   	push   %rbp
  80042005e4:	48 89 e5             	mov    %rsp,%rbp
  80042005e7:	48 83 ec 30          	sub    $0x30,%rsp
	volatile uint16_t *cp;
	uint16_t was;
	unsigned pos;

	cp = (uint16_t*) (KERNBASE + CGA_BUF);
  80042005eb:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042005f2:	00 00 00 
  80042005f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	was = *cp;
  80042005f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042005fd:	0f b7 00             	movzwl (%rax),%eax
  8004200600:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	*cp = (uint16_t) 0xA55A;
  8004200604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200608:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
	if (*cp != 0xA55A) {
  800420060d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200611:	0f b7 00             	movzwl (%rax),%eax
  8004200614:	66 3d 5a a5          	cmp    $0xa55a,%ax
  8004200618:	74 20                	je     800420063a <cga_init+0x57>
		cp = (uint16_t*) (KERNBASE + MONO_BUF);
  800420061a:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  8004200621:	00 00 00 
  8004200624:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		addr_6845 = MONO_BASE;
  8004200628:	48 b8 44 bf 2b 04 80 	movabs $0x80042bbf44,%rax
  800420062f:	00 00 00 
  8004200632:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  8004200638:	eb 1b                	jmp    8004200655 <cga_init+0x72>
	} else {
		*cp = was;
  800420063a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420063e:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004200642:	66 89 10             	mov    %dx,(%rax)
		addr_6845 = CGA_BASE;
  8004200645:	48 b8 44 bf 2b 04 80 	movabs $0x80042bbf44,%rax
  800420064c:	00 00 00 
  800420064f:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
  8004200655:	48 b8 44 bf 2b 04 80 	movabs $0x80042bbf44,%rax
  800420065c:	00 00 00 
  800420065f:	8b 00                	mov    (%rax),%eax
  8004200661:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200664:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200668:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420066c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420066f:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
  8004200670:	48 b8 44 bf 2b 04 80 	movabs $0x80042bbf44,%rax
  8004200677:	00 00 00 
  800420067a:	8b 00                	mov    (%rax),%eax
  800420067c:	83 c0 01             	add    $0x1,%eax
  800420067f:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200682:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200685:	89 c2                	mov    %eax,%edx
  8004200687:	ec                   	in     (%dx),%al
  8004200688:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  800420068b:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420068f:	0f b6 c0             	movzbl %al,%eax
  8004200692:	c1 e0 08             	shl    $0x8,%eax
  8004200695:	89 45 f0             	mov    %eax,-0x10(%rbp)
	outb(addr_6845, 15);
  8004200698:	48 b8 44 bf 2b 04 80 	movabs $0x80042bbf44,%rax
  800420069f:	00 00 00 
  80042006a2:	8b 00                	mov    (%rax),%eax
  80042006a4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042006a7:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042006ab:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042006af:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042006b2:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
  80042006b3:	48 b8 44 bf 2b 04 80 	movabs $0x80042bbf44,%rax
  80042006ba:	00 00 00 
  80042006bd:	8b 00                	mov    (%rax),%eax
  80042006bf:	83 c0 01             	add    $0x1,%eax
  80042006c2:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042006c5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  80042006c8:	89 c2                	mov    %eax,%edx
  80042006ca:	ec                   	in     (%dx),%al
  80042006cb:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  80042006ce:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042006d2:	0f b6 c0             	movzbl %al,%eax
  80042006d5:	09 45 f0             	or     %eax,-0x10(%rbp)

	crt_buf = (uint16_t*) cp;
  80042006d8:	48 b8 48 bf 2b 04 80 	movabs $0x80042bbf48,%rax
  80042006df:	00 00 00 
  80042006e2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042006e6:	48 89 10             	mov    %rdx,(%rax)
	crt_pos = pos;
  80042006e9:	8b 45 f0             	mov    -0x10(%rbp),%eax
  80042006ec:	89 c2                	mov    %eax,%edx
  80042006ee:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  80042006f5:	00 00 00 
  80042006f8:	66 89 10             	mov    %dx,(%rax)
}
  80042006fb:	c9                   	leaveq 
  80042006fc:	c3                   	retq   

00000080042006fd <cga_putc>:



static void
cga_putc(int c)
{
  80042006fd:	55                   	push   %rbp
  80042006fe:	48 89 e5             	mov    %rsp,%rbp
  8004200701:	48 83 ec 40          	sub    $0x40,%rsp
  8004200705:	89 7d cc             	mov    %edi,-0x34(%rbp)
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
  8004200708:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420070b:	b0 00                	mov    $0x0,%al
  800420070d:	85 c0                	test   %eax,%eax
  800420070f:	75 07                	jne    8004200718 <cga_putc+0x1b>
		c |= 0x0700;
  8004200711:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)

	switch (c & 0xff) {
  8004200718:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420071b:	0f b6 c0             	movzbl %al,%eax
  800420071e:	83 f8 09             	cmp    $0x9,%eax
  8004200721:	0f 84 f6 00 00 00    	je     800420081d <cga_putc+0x120>
  8004200727:	83 f8 09             	cmp    $0x9,%eax
  800420072a:	7f 0a                	jg     8004200736 <cga_putc+0x39>
  800420072c:	83 f8 08             	cmp    $0x8,%eax
  800420072f:	74 18                	je     8004200749 <cga_putc+0x4c>
  8004200731:	e9 3e 01 00 00       	jmpq   8004200874 <cga_putc+0x177>
  8004200736:	83 f8 0a             	cmp    $0xa,%eax
  8004200739:	74 75                	je     80042007b0 <cga_putc+0xb3>
  800420073b:	83 f8 0d             	cmp    $0xd,%eax
  800420073e:	0f 84 89 00 00 00    	je     80042007cd <cga_putc+0xd0>
  8004200744:	e9 2b 01 00 00       	jmpq   8004200874 <cga_putc+0x177>
	case '\b':
		if (crt_pos > 0) {
  8004200749:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  8004200750:	00 00 00 
  8004200753:	0f b7 00             	movzwl (%rax),%eax
  8004200756:	66 85 c0             	test   %ax,%ax
  8004200759:	74 50                	je     80042007ab <cga_putc+0xae>
			crt_pos--;
  800420075b:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  8004200762:	00 00 00 
  8004200765:	0f b7 00             	movzwl (%rax),%eax
  8004200768:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420076b:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  8004200772:	00 00 00 
  8004200775:	66 89 10             	mov    %dx,(%rax)
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
  8004200778:	48 b8 48 bf 2b 04 80 	movabs $0x80042bbf48,%rax
  800420077f:	00 00 00 
  8004200782:	48 8b 10             	mov    (%rax),%rdx
  8004200785:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  800420078c:	00 00 00 
  800420078f:	0f b7 00             	movzwl (%rax),%eax
  8004200792:	0f b7 c0             	movzwl %ax,%eax
  8004200795:	48 01 c0             	add    %rax,%rax
  8004200798:	48 01 c2             	add    %rax,%rdx
  800420079b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420079e:	b0 00                	mov    $0x0,%al
  80042007a0:	83 c8 20             	or     $0x20,%eax
  80042007a3:	66 89 02             	mov    %ax,(%rdx)
		}
		break;
  80042007a6:	e9 04 01 00 00       	jmpq   80042008af <cga_putc+0x1b2>
  80042007ab:	e9 ff 00 00 00       	jmpq   80042008af <cga_putc+0x1b2>
	case '\n':
		crt_pos += CRT_COLS;
  80042007b0:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  80042007b7:	00 00 00 
  80042007ba:	0f b7 00             	movzwl (%rax),%eax
  80042007bd:	8d 50 50             	lea    0x50(%rax),%edx
  80042007c0:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  80042007c7:	00 00 00 
  80042007ca:	66 89 10             	mov    %dx,(%rax)
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
  80042007cd:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  80042007d4:	00 00 00 
  80042007d7:	0f b7 30             	movzwl (%rax),%esi
  80042007da:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  80042007e1:	00 00 00 
  80042007e4:	0f b7 08             	movzwl (%rax),%ecx
  80042007e7:	0f b7 c1             	movzwl %cx,%eax
  80042007ea:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  80042007f0:	c1 e8 10             	shr    $0x10,%eax
  80042007f3:	89 c2                	mov    %eax,%edx
  80042007f5:	66 c1 ea 06          	shr    $0x6,%dx
  80042007f9:	89 d0                	mov    %edx,%eax
  80042007fb:	c1 e0 02             	shl    $0x2,%eax
  80042007fe:	01 d0                	add    %edx,%eax
  8004200800:	c1 e0 04             	shl    $0x4,%eax
  8004200803:	29 c1                	sub    %eax,%ecx
  8004200805:	89 ca                	mov    %ecx,%edx
  8004200807:	29 d6                	sub    %edx,%esi
  8004200809:	89 f2                	mov    %esi,%edx
  800420080b:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  8004200812:	00 00 00 
  8004200815:	66 89 10             	mov    %dx,(%rax)
		break;
  8004200818:	e9 92 00 00 00       	jmpq   80042008af <cga_putc+0x1b2>
	case '\t':
		cons_putc(' ');
  800420081d:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200822:	48 b8 72 0d 20 04 80 	movabs $0x8004200d72,%rax
  8004200829:	00 00 00 
  800420082c:	ff d0                	callq  *%rax
		cons_putc(' ');
  800420082e:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200833:	48 b8 72 0d 20 04 80 	movabs $0x8004200d72,%rax
  800420083a:	00 00 00 
  800420083d:	ff d0                	callq  *%rax
		cons_putc(' ');
  800420083f:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200844:	48 b8 72 0d 20 04 80 	movabs $0x8004200d72,%rax
  800420084b:	00 00 00 
  800420084e:	ff d0                	callq  *%rax
		cons_putc(' ');
  8004200850:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200855:	48 b8 72 0d 20 04 80 	movabs $0x8004200d72,%rax
  800420085c:	00 00 00 
  800420085f:	ff d0                	callq  *%rax
		cons_putc(' ');
  8004200861:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200866:	48 b8 72 0d 20 04 80 	movabs $0x8004200d72,%rax
  800420086d:	00 00 00 
  8004200870:	ff d0                	callq  *%rax
		break;
  8004200872:	eb 3b                	jmp    80042008af <cga_putc+0x1b2>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
  8004200874:	48 b8 48 bf 2b 04 80 	movabs $0x80042bbf48,%rax
  800420087b:	00 00 00 
  800420087e:	48 8b 30             	mov    (%rax),%rsi
  8004200881:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  8004200888:	00 00 00 
  800420088b:	0f b7 00             	movzwl (%rax),%eax
  800420088e:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200891:	48 ba 50 bf 2b 04 80 	movabs $0x80042bbf50,%rdx
  8004200898:	00 00 00 
  800420089b:	66 89 0a             	mov    %cx,(%rdx)
  800420089e:	0f b7 c0             	movzwl %ax,%eax
  80042008a1:	48 01 c0             	add    %rax,%rax
  80042008a4:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  80042008a8:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042008ab:	66 89 02             	mov    %ax,(%rdx)
		break;
  80042008ae:	90                   	nop
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
  80042008af:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  80042008b6:	00 00 00 
  80042008b9:	0f b7 00             	movzwl (%rax),%eax
  80042008bc:	66 3d cf 07          	cmp    $0x7cf,%ax
  80042008c0:	0f 86 89 00 00 00    	jbe    800420094f <cga_putc+0x252>
		int i;

		memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
  80042008c6:	48 b8 48 bf 2b 04 80 	movabs $0x80042bbf48,%rax
  80042008cd:	00 00 00 
  80042008d0:	48 8b 00             	mov    (%rax),%rax
  80042008d3:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  80042008da:	48 b8 48 bf 2b 04 80 	movabs $0x80042bbf48,%rax
  80042008e1:	00 00 00 
  80042008e4:	48 8b 00             	mov    (%rax),%rax
  80042008e7:	ba 00 0f 00 00       	mov    $0xf00,%edx
  80042008ec:	48 89 ce             	mov    %rcx,%rsi
  80042008ef:	48 89 c7             	mov    %rax,%rdi
  80042008f2:	48 b8 3f b5 20 04 80 	movabs $0x800420b53f,%rax
  80042008f9:	00 00 00 
  80042008fc:	ff d0                	callq  *%rax
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
  80042008fe:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200905:	eb 22                	jmp    8004200929 <cga_putc+0x22c>
			crt_buf[i] = 0x0700 | ' ';
  8004200907:	48 b8 48 bf 2b 04 80 	movabs $0x80042bbf48,%rax
  800420090e:	00 00 00 
  8004200911:	48 8b 00             	mov    (%rax),%rax
  8004200914:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200917:	48 63 d2             	movslq %edx,%rdx
  800420091a:	48 01 d2             	add    %rdx,%rdx
  800420091d:	48 01 d0             	add    %rdx,%rax
  8004200920:	66 c7 00 20 07       	movw   $0x720,(%rax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
  8004200925:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200929:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200930:	7e d5                	jle    8004200907 <cga_putc+0x20a>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
  8004200932:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  8004200939:	00 00 00 
  800420093c:	0f b7 00             	movzwl (%rax),%eax
  800420093f:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200942:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  8004200949:	00 00 00 
  800420094c:	66 89 10             	mov    %dx,(%rax)
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
  800420094f:	48 b8 44 bf 2b 04 80 	movabs $0x80042bbf44,%rax
  8004200956:	00 00 00 
  8004200959:	8b 00                	mov    (%rax),%eax
  800420095b:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800420095e:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200962:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200966:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200969:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
  800420096a:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  8004200971:	00 00 00 
  8004200974:	0f b7 00             	movzwl (%rax),%eax
  8004200977:	66 c1 e8 08          	shr    $0x8,%ax
  800420097b:	0f b6 c0             	movzbl %al,%eax
  800420097e:	48 ba 44 bf 2b 04 80 	movabs $0x80042bbf44,%rdx
  8004200985:	00 00 00 
  8004200988:	8b 12                	mov    (%rdx),%edx
  800420098a:	83 c2 01             	add    $0x1,%edx
  800420098d:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200990:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200993:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200997:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420099a:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
  800420099b:	48 b8 44 bf 2b 04 80 	movabs $0x80042bbf44,%rax
  80042009a2:	00 00 00 
  80042009a5:	8b 00                	mov    (%rax),%eax
  80042009a7:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042009aa:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  80042009ae:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042009b2:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042009b5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
  80042009b6:	48 b8 50 bf 2b 04 80 	movabs $0x80042bbf50,%rax
  80042009bd:	00 00 00 
  80042009c0:	0f b7 00             	movzwl (%rax),%eax
  80042009c3:	0f b6 c0             	movzbl %al,%eax
  80042009c6:	48 ba 44 bf 2b 04 80 	movabs $0x80042bbf44,%rdx
  80042009cd:	00 00 00 
  80042009d0:	8b 12                	mov    (%rdx),%edx
  80042009d2:	83 c2 01             	add    $0x1,%edx
  80042009d5:	89 55 e0             	mov    %edx,-0x20(%rbp)
  80042009d8:	88 45 df             	mov    %al,-0x21(%rbp)
  80042009db:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042009df:	8b 55 e0             	mov    -0x20(%rbp),%edx
  80042009e2:	ee                   	out    %al,(%dx)
}
  80042009e3:	c9                   	leaveq 
  80042009e4:	c3                   	retq   

00000080042009e5 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
  80042009e5:	55                   	push   %rbp
  80042009e6:	48 89 e5             	mov    %rsp,%rbp
  80042009e9:	48 83 ec 20          	sub    $0x20,%rsp
  80042009ed:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009f4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042009f7:	89 c2                	mov    %eax,%edx
  80042009f9:	ec                   	in     (%dx),%al
  80042009fa:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  80042009fd:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
	int c;
	uint8_t data;
	static uint32_t shift;
	int r;
	if ((inb(KBSTATP) & KBS_DIB) == 0)
  8004200a01:	0f b6 c0             	movzbl %al,%eax
  8004200a04:	83 e0 01             	and    $0x1,%eax
  8004200a07:	85 c0                	test   %eax,%eax
  8004200a09:	75 0a                	jne    8004200a15 <kbd_proc_data+0x30>
		return -1;
  8004200a0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200a10:	e9 fc 01 00 00       	jmpq   8004200c11 <kbd_proc_data+0x22c>
  8004200a15:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a1c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200a1f:	89 c2                	mov    %eax,%edx
  8004200a21:	ec                   	in     (%dx),%al
  8004200a22:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200a25:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax

	data = inb(KBDATAP);
  8004200a29:	88 45 fb             	mov    %al,-0x5(%rbp)

	if (data == 0xE0) {
  8004200a2c:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200a30:	75 27                	jne    8004200a59 <kbd_proc_data+0x74>
		// E0 escape character
		shift |= E0ESC;
  8004200a32:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200a39:	00 00 00 
  8004200a3c:	8b 00                	mov    (%rax),%eax
  8004200a3e:	83 c8 40             	or     $0x40,%eax
  8004200a41:	89 c2                	mov    %eax,%edx
  8004200a43:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200a4a:	00 00 00 
  8004200a4d:	89 10                	mov    %edx,(%rax)
		return 0;
  8004200a4f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200a54:	e9 b8 01 00 00       	jmpq   8004200c11 <kbd_proc_data+0x22c>
	} else if (data & 0x80) {
  8004200a59:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200a5d:	84 c0                	test   %al,%al
  8004200a5f:	79 65                	jns    8004200ac6 <kbd_proc_data+0xe1>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
  8004200a61:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200a68:	00 00 00 
  8004200a6b:	8b 00                	mov    (%rax),%eax
  8004200a6d:	83 e0 40             	and    $0x40,%eax
  8004200a70:	85 c0                	test   %eax,%eax
  8004200a72:	75 09                	jne    8004200a7d <kbd_proc_data+0x98>
  8004200a74:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200a78:	83 e0 7f             	and    $0x7f,%eax
  8004200a7b:	eb 04                	jmp    8004200a81 <kbd_proc_data+0x9c>
  8004200a7d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200a81:	88 45 fb             	mov    %al,-0x5(%rbp)
		shift &= ~(shiftcode[data] | E0ESC);
  8004200a84:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200a88:	48 ba 60 60 22 04 80 	movabs $0x8004226060,%rdx
  8004200a8f:	00 00 00 
  8004200a92:	48 98                	cltq   
  8004200a94:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200a98:	83 c8 40             	or     $0x40,%eax
  8004200a9b:	0f b6 c0             	movzbl %al,%eax
  8004200a9e:	f7 d0                	not    %eax
  8004200aa0:	89 c2                	mov    %eax,%edx
  8004200aa2:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200aa9:	00 00 00 
  8004200aac:	8b 00                	mov    (%rax),%eax
  8004200aae:	21 c2                	and    %eax,%edx
  8004200ab0:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200ab7:	00 00 00 
  8004200aba:	89 10                	mov    %edx,(%rax)
		return 0;
  8004200abc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200ac1:	e9 4b 01 00 00       	jmpq   8004200c11 <kbd_proc_data+0x22c>
	} else if (shift & E0ESC) {
  8004200ac6:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200acd:	00 00 00 
  8004200ad0:	8b 00                	mov    (%rax),%eax
  8004200ad2:	83 e0 40             	and    $0x40,%eax
  8004200ad5:	85 c0                	test   %eax,%eax
  8004200ad7:	74 21                	je     8004200afa <kbd_proc_data+0x115>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
  8004200ad9:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
		shift &= ~E0ESC;
  8004200add:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200ae4:	00 00 00 
  8004200ae7:	8b 00                	mov    (%rax),%eax
  8004200ae9:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200aec:	89 c2                	mov    %eax,%edx
  8004200aee:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200af5:	00 00 00 
  8004200af8:	89 10                	mov    %edx,(%rax)
	}

	shift |= shiftcode[data];
  8004200afa:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200afe:	48 ba 60 60 22 04 80 	movabs $0x8004226060,%rdx
  8004200b05:	00 00 00 
  8004200b08:	48 98                	cltq   
  8004200b0a:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200b0e:	0f b6 d0             	movzbl %al,%edx
  8004200b11:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200b18:	00 00 00 
  8004200b1b:	8b 00                	mov    (%rax),%eax
  8004200b1d:	09 c2                	or     %eax,%edx
  8004200b1f:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200b26:	00 00 00 
  8004200b29:	89 10                	mov    %edx,(%rax)
	shift ^= togglecode[data];
  8004200b2b:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200b2f:	48 ba 60 61 22 04 80 	movabs $0x8004226160,%rdx
  8004200b36:	00 00 00 
  8004200b39:	48 98                	cltq   
  8004200b3b:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200b3f:	0f b6 d0             	movzbl %al,%edx
  8004200b42:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200b49:	00 00 00 
  8004200b4c:	8b 00                	mov    (%rax),%eax
  8004200b4e:	31 c2                	xor    %eax,%edx
  8004200b50:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200b57:	00 00 00 
  8004200b5a:	89 10                	mov    %edx,(%rax)

	c = charcode[shift & (CTL | SHIFT)][data];
  8004200b5c:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200b63:	00 00 00 
  8004200b66:	8b 00                	mov    (%rax),%eax
  8004200b68:	83 e0 03             	and    $0x3,%eax
  8004200b6b:	89 c2                	mov    %eax,%edx
  8004200b6d:	48 b8 60 65 22 04 80 	movabs $0x8004226560,%rax
  8004200b74:	00 00 00 
  8004200b77:	89 d2                	mov    %edx,%edx
  8004200b79:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200b7d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200b81:	48 01 d0             	add    %rdx,%rax
  8004200b84:	0f b6 00             	movzbl (%rax),%eax
  8004200b87:	0f b6 c0             	movzbl %al,%eax
  8004200b8a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (shift & CAPSLOCK) {
  8004200b8d:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200b94:	00 00 00 
  8004200b97:	8b 00                	mov    (%rax),%eax
  8004200b99:	83 e0 08             	and    $0x8,%eax
  8004200b9c:	85 c0                	test   %eax,%eax
  8004200b9e:	74 22                	je     8004200bc2 <kbd_proc_data+0x1dd>
		if ('a' <= c && c <= 'z')
  8004200ba0:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200ba4:	7e 0c                	jle    8004200bb2 <kbd_proc_data+0x1cd>
  8004200ba6:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200baa:	7f 06                	jg     8004200bb2 <kbd_proc_data+0x1cd>
			c += 'A' - 'a';
  8004200bac:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200bb0:	eb 10                	jmp    8004200bc2 <kbd_proc_data+0x1dd>
		else if ('A' <= c && c <= 'Z')
  8004200bb2:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200bb6:	7e 0a                	jle    8004200bc2 <kbd_proc_data+0x1dd>
  8004200bb8:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200bbc:	7f 04                	jg     8004200bc2 <kbd_proc_data+0x1dd>
			c += 'a' - 'A';
  8004200bbe:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
  8004200bc2:	48 b8 68 c1 2b 04 80 	movabs $0x80042bc168,%rax
  8004200bc9:	00 00 00 
  8004200bcc:	8b 00                	mov    (%rax),%eax
  8004200bce:	f7 d0                	not    %eax
  8004200bd0:	83 e0 06             	and    $0x6,%eax
  8004200bd3:	85 c0                	test   %eax,%eax
  8004200bd5:	75 37                	jne    8004200c0e <kbd_proc_data+0x229>
  8004200bd7:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200bde:	75 2e                	jne    8004200c0e <kbd_proc_data+0x229>
		cprintf("Rebooting!\n");
  8004200be0:	48 bf ef 18 21 04 80 	movabs $0x80042118ef,%rdi
  8004200be7:	00 00 00 
  8004200bea:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200bef:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004200bf6:	00 00 00 
  8004200bf9:	ff d2                	callq  *%rdx
  8004200bfb:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200c02:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200c06:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200c0a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200c0d:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}
	return c;
  8004200c0e:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004200c11:	c9                   	leaveq 
  8004200c12:	c3                   	retq   

0000008004200c13 <kbd_intr>:

void
kbd_intr(void)
{
  8004200c13:	55                   	push   %rbp
  8004200c14:	48 89 e5             	mov    %rsp,%rbp
	cons_intr(kbd_proc_data);
  8004200c17:	48 bf e5 09 20 04 80 	movabs $0x80042009e5,%rdi
  8004200c1e:	00 00 00 
  8004200c21:	48 b8 35 0c 20 04 80 	movabs $0x8004200c35,%rax
  8004200c28:	00 00 00 
  8004200c2b:	ff d0                	callq  *%rax
}
  8004200c2d:	5d                   	pop    %rbp
  8004200c2e:	c3                   	retq   

0000008004200c2f <kbd_init>:

static void
kbd_init(void)
{
  8004200c2f:	55                   	push   %rbp
  8004200c30:	48 89 e5             	mov    %rsp,%rbp
}
  8004200c33:	5d                   	pop    %rbp
  8004200c34:	c3                   	retq   

0000008004200c35 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
static void
cons_intr(int (*proc)(void))
{
  8004200c35:	55                   	push   %rbp
  8004200c36:	48 89 e5             	mov    %rsp,%rbp
  8004200c39:	48 83 ec 20          	sub    $0x20,%rsp
  8004200c3d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int c;

	while ((c = (*proc)()) != -1) {
  8004200c41:	eb 6a                	jmp    8004200cad <cons_intr+0x78>
		if (c == 0)
  8004200c43:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004200c47:	75 02                	jne    8004200c4b <cons_intr+0x16>
			continue;
  8004200c49:	eb 62                	jmp    8004200cad <cons_intr+0x78>
		cons.buf[cons.wpos++] = c;
  8004200c4b:	48 b8 60 bf 2b 04 80 	movabs $0x80042bbf60,%rax
  8004200c52:	00 00 00 
  8004200c55:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004200c5b:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c5e:	48 ba 60 bf 2b 04 80 	movabs $0x80042bbf60,%rdx
  8004200c65:	00 00 00 
  8004200c68:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004200c6e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200c71:	89 d1                	mov    %edx,%ecx
  8004200c73:	48 ba 60 bf 2b 04 80 	movabs $0x80042bbf60,%rdx
  8004200c7a:	00 00 00 
  8004200c7d:	89 c0                	mov    %eax,%eax
  8004200c7f:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
		if (cons.wpos == CONSBUFSIZE)
  8004200c82:	48 b8 60 bf 2b 04 80 	movabs $0x80042bbf60,%rax
  8004200c89:	00 00 00 
  8004200c8c:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004200c92:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004200c97:	75 14                	jne    8004200cad <cons_intr+0x78>
			cons.wpos = 0;
  8004200c99:	48 b8 60 bf 2b 04 80 	movabs $0x80042bbf60,%rax
  8004200ca0:	00 00 00 
  8004200ca3:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  8004200caa:	00 00 00 
static void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
  8004200cad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004200cb1:	ff d0                	callq  *%rax
  8004200cb3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200cb6:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004200cba:	75 87                	jne    8004200c43 <cons_intr+0xe>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
  8004200cbc:	c9                   	leaveq 
  8004200cbd:	c3                   	retq   

0000008004200cbe <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
  8004200cbe:	55                   	push   %rbp
  8004200cbf:	48 89 e5             	mov    %rsp,%rbp
  8004200cc2:	48 83 ec 10          	sub    $0x10,%rsp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
  8004200cc6:	48 b8 f8 03 20 04 80 	movabs $0x80042003f8,%rax
  8004200ccd:	00 00 00 
  8004200cd0:	ff d0                	callq  *%rax
	kbd_intr();
  8004200cd2:	48 b8 13 0c 20 04 80 	movabs $0x8004200c13,%rax
  8004200cd9:	00 00 00 
  8004200cdc:	ff d0                	callq  *%rax

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
  8004200cde:	48 b8 60 bf 2b 04 80 	movabs $0x80042bbf60,%rax
  8004200ce5:	00 00 00 
  8004200ce8:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  8004200cee:	48 b8 60 bf 2b 04 80 	movabs $0x80042bbf60,%rax
  8004200cf5:	00 00 00 
  8004200cf8:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004200cfe:	39 c2                	cmp    %eax,%edx
  8004200d00:	74 69                	je     8004200d6b <cons_getc+0xad>
		c = cons.buf[cons.rpos++];
  8004200d02:	48 b8 60 bf 2b 04 80 	movabs $0x80042bbf60,%rax
  8004200d09:	00 00 00 
  8004200d0c:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004200d12:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200d15:	48 ba 60 bf 2b 04 80 	movabs $0x80042bbf60,%rdx
  8004200d1c:	00 00 00 
  8004200d1f:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  8004200d25:	48 ba 60 bf 2b 04 80 	movabs $0x80042bbf60,%rdx
  8004200d2c:	00 00 00 
  8004200d2f:	89 c0                	mov    %eax,%eax
  8004200d31:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200d35:	0f b6 c0             	movzbl %al,%eax
  8004200d38:	89 45 fc             	mov    %eax,-0x4(%rbp)
		if (cons.rpos == CONSBUFSIZE)
  8004200d3b:	48 b8 60 bf 2b 04 80 	movabs $0x80042bbf60,%rax
  8004200d42:	00 00 00 
  8004200d45:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004200d4b:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004200d50:	75 14                	jne    8004200d66 <cons_getc+0xa8>
			cons.rpos = 0;
  8004200d52:	48 b8 60 bf 2b 04 80 	movabs $0x80042bbf60,%rax
  8004200d59:	00 00 00 
  8004200d5c:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  8004200d63:	00 00 00 
		return c;
  8004200d66:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200d69:	eb 05                	jmp    8004200d70 <cons_getc+0xb2>
	}
	return 0;
  8004200d6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004200d70:	c9                   	leaveq 
  8004200d71:	c3                   	retq   

0000008004200d72 <cons_putc>:

// output a character to the console
static void
cons_putc(int c)
{
  8004200d72:	55                   	push   %rbp
  8004200d73:	48 89 e5             	mov    %rsp,%rbp
  8004200d76:	48 83 ec 10          	sub    $0x10,%rsp
  8004200d7a:	89 7d fc             	mov    %edi,-0x4(%rbp)
	serial_putc(c);
  8004200d7d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200d80:	89 c7                	mov    %eax,%edi
  8004200d82:	48 b8 25 04 20 04 80 	movabs $0x8004200425,%rax
  8004200d89:	00 00 00 
  8004200d8c:	ff d0                	callq  *%rax
	lpt_putc(c);
  8004200d8e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200d91:	89 c7                	mov    %eax,%edi
  8004200d93:	48 b8 5e 05 20 04 80 	movabs $0x800420055e,%rax
  8004200d9a:	00 00 00 
  8004200d9d:	ff d0                	callq  *%rax
	cga_putc(c);
  8004200d9f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200da2:	89 c7                	mov    %eax,%edi
  8004200da4:	48 b8 fd 06 20 04 80 	movabs $0x80042006fd,%rax
  8004200dab:	00 00 00 
  8004200dae:	ff d0                	callq  *%rax
}
  8004200db0:	c9                   	leaveq 
  8004200db1:	c3                   	retq   

0000008004200db2 <cons_init>:

// initialize the console devices
void
cons_init(void)
{
  8004200db2:	55                   	push   %rbp
  8004200db3:	48 89 e5             	mov    %rsp,%rbp
	cga_init();
  8004200db6:	48 b8 e3 05 20 04 80 	movabs $0x80042005e3,%rax
  8004200dbd:	00 00 00 
  8004200dc0:	ff d0                	callq  *%rax
	kbd_init();
  8004200dc2:	48 b8 2f 0c 20 04 80 	movabs $0x8004200c2f,%rax
  8004200dc9:	00 00 00 
  8004200dcc:	ff d0                	callq  *%rax
	serial_init();
  8004200dce:	48 b8 8a 04 20 04 80 	movabs $0x800420048a,%rax
  8004200dd5:	00 00 00 
  8004200dd8:	ff d0                	callq  *%rax

	if (!serial_exists)
  8004200dda:	48 b8 40 bf 2b 04 80 	movabs $0x80042bbf40,%rax
  8004200de1:	00 00 00 
  8004200de4:	0f b6 00             	movzbl (%rax),%eax
  8004200de7:	83 f0 01             	xor    $0x1,%eax
  8004200dea:	84 c0                	test   %al,%al
  8004200dec:	74 1b                	je     8004200e09 <cons_init+0x57>
		cprintf("Serial port does not exist!\n");
  8004200dee:	48 bf fb 18 21 04 80 	movabs $0x80042118fb,%rdi
  8004200df5:	00 00 00 
  8004200df8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200dfd:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004200e04:	00 00 00 
  8004200e07:	ff d2                	callq  *%rdx
}
  8004200e09:	5d                   	pop    %rbp
  8004200e0a:	c3                   	retq   

0000008004200e0b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
  8004200e0b:	55                   	push   %rbp
  8004200e0c:	48 89 e5             	mov    %rsp,%rbp
  8004200e0f:	48 83 ec 10          	sub    $0x10,%rsp
  8004200e13:	89 7d fc             	mov    %edi,-0x4(%rbp)
	cons_putc(c);
  8004200e16:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200e19:	89 c7                	mov    %eax,%edi
  8004200e1b:	48 b8 72 0d 20 04 80 	movabs $0x8004200d72,%rax
  8004200e22:	00 00 00 
  8004200e25:	ff d0                	callq  *%rax
}
  8004200e27:	c9                   	leaveq 
  8004200e28:	c3                   	retq   

0000008004200e29 <getchar>:

int
getchar(void)
{
  8004200e29:	55                   	push   %rbp
  8004200e2a:	48 89 e5             	mov    %rsp,%rbp
  8004200e2d:	48 83 ec 10          	sub    $0x10,%rsp
	int c;

	while ((c = cons_getc()) == 0)
  8004200e31:	48 b8 be 0c 20 04 80 	movabs $0x8004200cbe,%rax
  8004200e38:	00 00 00 
  8004200e3b:	ff d0                	callq  *%rax
  8004200e3d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200e40:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004200e44:	74 eb                	je     8004200e31 <getchar+0x8>
		/* do nothing */;
	return c;
  8004200e46:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004200e49:	c9                   	leaveq 
  8004200e4a:	c3                   	retq   

0000008004200e4b <iscons>:

int
iscons(int fdnum)
{
  8004200e4b:	55                   	push   %rbp
  8004200e4c:	48 89 e5             	mov    %rsp,%rbp
  8004200e4f:	48 83 ec 04          	sub    $0x4,%rsp
  8004200e53:	89 7d fc             	mov    %edi,-0x4(%rbp)
	// used by readline
	return 1;
  8004200e56:	b8 01 00 00 00       	mov    $0x1,%eax
}
  8004200e5b:	c9                   	leaveq 
  8004200e5c:	c3                   	retq   

0000008004200e5d <mon_help>:

/***** Implementations of basic kernel monitor commands *****/

int
mon_help(int argc, char **argv, struct Trapframe *tf)
{
  8004200e5d:	55                   	push   %rbp
  8004200e5e:	48 89 e5             	mov    %rsp,%rbp
  8004200e61:	48 83 ec 30          	sub    $0x30,%rsp
  8004200e65:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004200e68:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004200e6c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int i;

	for (i = 0; i < NCOMMANDS; i++)
  8004200e70:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200e77:	eb 6c                	jmp    8004200ee5 <mon_help+0x88>
		cprintf("%s - %s\n", commands[i].name, commands[i].desc);
  8004200e79:	48 b9 80 65 22 04 80 	movabs $0x8004226580,%rcx
  8004200e80:	00 00 00 
  8004200e83:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200e86:	48 63 d0             	movslq %eax,%rdx
  8004200e89:	48 89 d0             	mov    %rdx,%rax
  8004200e8c:	48 01 c0             	add    %rax,%rax
  8004200e8f:	48 01 d0             	add    %rdx,%rax
  8004200e92:	48 c1 e0 03          	shl    $0x3,%rax
  8004200e96:	48 01 c8             	add    %rcx,%rax
  8004200e99:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004200e9d:	48 be 80 65 22 04 80 	movabs $0x8004226580,%rsi
  8004200ea4:	00 00 00 
  8004200ea7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200eaa:	48 63 d0             	movslq %eax,%rdx
  8004200ead:	48 89 d0             	mov    %rdx,%rax
  8004200eb0:	48 01 c0             	add    %rax,%rax
  8004200eb3:	48 01 d0             	add    %rdx,%rax
  8004200eb6:	48 c1 e0 03          	shl    $0x3,%rax
  8004200eba:	48 01 f0             	add    %rsi,%rax
  8004200ebd:	48 8b 00             	mov    (%rax),%rax
  8004200ec0:	48 89 ca             	mov    %rcx,%rdx
  8004200ec3:	48 89 c6             	mov    %rax,%rsi
  8004200ec6:	48 bf 6d 19 21 04 80 	movabs $0x800421196d,%rdi
  8004200ecd:	00 00 00 
  8004200ed0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200ed5:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004200edc:	00 00 00 
  8004200edf:	ff d1                	callq  *%rcx
int
mon_help(int argc, char **argv, struct Trapframe *tf)
{
	int i;

	for (i = 0; i < NCOMMANDS; i++)
  8004200ee1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200ee5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200ee8:	83 f8 01             	cmp    $0x1,%eax
  8004200eeb:	76 8c                	jbe    8004200e79 <mon_help+0x1c>
		cprintf("%s - %s\n", commands[i].name, commands[i].desc);
	return 0;
  8004200eed:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004200ef2:	c9                   	leaveq 
  8004200ef3:	c3                   	retq   

0000008004200ef4 <mon_kerninfo>:

int
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)
{
  8004200ef4:	55                   	push   %rbp
  8004200ef5:	48 89 e5             	mov    %rsp,%rbp
  8004200ef8:	48 83 ec 30          	sub    $0x30,%rsp
  8004200efc:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004200eff:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004200f03:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	extern char _start[], entry[], etext[], edata[], end[];

	cprintf("Special kernel symbols:\n");
  8004200f07:	48 bf 76 19 21 04 80 	movabs $0x8004211976,%rdi
  8004200f0e:	00 00 00 
  8004200f11:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f16:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004200f1d:	00 00 00 
  8004200f20:	ff d2                	callq  *%rdx
	cprintf("  _start                  %08x (phys)\n", _start);
  8004200f22:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004200f29:	00 00 00 
  8004200f2c:	48 bf 90 19 21 04 80 	movabs $0x8004211990,%rdi
  8004200f33:	00 00 00 
  8004200f36:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f3b:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004200f42:	00 00 00 
  8004200f45:	ff d2                	callq  *%rdx
	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
  8004200f47:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004200f4e:	00 00 00 
  8004200f51:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004200f58:	00 00 00 
  8004200f5b:	48 bf b8 19 21 04 80 	movabs $0x80042119b8,%rdi
  8004200f62:	00 00 00 
  8004200f65:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f6a:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004200f71:	00 00 00 
  8004200f74:	ff d1                	callq  *%rcx
	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
  8004200f76:	48 ba 9d 18 21 00 00 	movabs $0x21189d,%rdx
  8004200f7d:	00 00 00 
  8004200f80:	48 be 9d 18 21 04 80 	movabs $0x800421189d,%rsi
  8004200f87:	00 00 00 
  8004200f8a:	48 bf e0 19 21 04 80 	movabs $0x80042119e0,%rdi
  8004200f91:	00 00 00 
  8004200f94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f99:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004200fa0:	00 00 00 
  8004200fa3:	ff d1                	callq  *%rcx
	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
  8004200fa5:	48 ba 31 bf 2b 00 00 	movabs $0x2bbf31,%rdx
  8004200fac:	00 00 00 
  8004200faf:	48 be 31 bf 2b 04 80 	movabs $0x80042bbf31,%rsi
  8004200fb6:	00 00 00 
  8004200fb9:	48 bf 08 1a 21 04 80 	movabs $0x8004211a08,%rdi
  8004200fc0:	00 00 00 
  8004200fc3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fc8:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004200fcf:	00 00 00 
  8004200fd2:	ff d1                	callq  *%rcx
	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
  8004200fd4:	48 ba e0 e6 2b 00 00 	movabs $0x2be6e0,%rdx
  8004200fdb:	00 00 00 
  8004200fde:	48 be e0 e6 2b 04 80 	movabs $0x80042be6e0,%rsi
  8004200fe5:	00 00 00 
  8004200fe8:	48 bf 30 1a 21 04 80 	movabs $0x8004211a30,%rdi
  8004200fef:	00 00 00 
  8004200ff2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200ff7:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004200ffe:	00 00 00 
  8004201001:	ff d1                	callq  *%rcx
	cprintf("Kernel executable memory footprint: %dKB\n",
		ROUNDUP(end - entry, 1024) / 1024);
  8004201003:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  800420100a:	00 
  800420100b:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  8004201012:	00 00 00 
  8004201015:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201019:	48 29 c2             	sub    %rax,%rdx
  800420101c:	48 b8 e0 e6 2b 04 80 	movabs $0x80042be6e0,%rax
  8004201023:	00 00 00 
  8004201026:	48 83 e8 01          	sub    $0x1,%rax
  800420102a:	48 01 d0             	add    %rdx,%rax
  800420102d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201031:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201035:	ba 00 00 00 00       	mov    $0x0,%edx
  800420103a:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420103e:	48 89 d0             	mov    %rdx,%rax
  8004201041:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004201045:	48 29 c2             	sub    %rax,%rdx
  8004201048:	48 89 d0             	mov    %rdx,%rax
	cprintf("  _start                  %08x (phys)\n", _start);
	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
	cprintf("Kernel executable memory footprint: %dKB\n",
  800420104b:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  8004201052:	48 85 c0             	test   %rax,%rax
  8004201055:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201059:	48 c1 f8 0a          	sar    $0xa,%rax
  800420105d:	48 89 c6             	mov    %rax,%rsi
  8004201060:	48 bf 58 1a 21 04 80 	movabs $0x8004211a58,%rdi
  8004201067:	00 00 00 
  800420106a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420106f:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004201076:	00 00 00 
  8004201079:	ff d2                	callq  *%rdx
		ROUNDUP(end - entry, 1024) / 1024);
	return 0;
  800420107b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004201080:	c9                   	leaveq 
  8004201081:	c3                   	retq   

0000008004201082 <mon_backtrace>:

int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
  8004201082:	55                   	push   %rbp
  8004201083:	48 89 e5             	mov    %rsp,%rbp
  8004201086:	48 83 ec 18          	sub    $0x18,%rsp
  800420108a:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420108d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201091:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	// Your code here.
	return 0;
  8004201095:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420109a:	c9                   	leaveq 
  800420109b:	c3                   	retq   

000000800420109c <runcmd>:
#define WHITESPACE "\t\r\n "
#define MAXARGS 16

static int
runcmd(char *buf, struct Trapframe *tf)
{
  800420109c:	55                   	push   %rbp
  800420109d:	48 89 e5             	mov    %rsp,%rbp
  80042010a0:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  80042010a7:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042010ae:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
	int argc;
	char *argv[MAXARGS];
	int i;

	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
  80042010b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	argv[argc] = 0;
  80042010bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042010bf:	48 98                	cltq   
  80042010c1:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042010c8:	ff 00 00 00 00 
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
  80042010cd:	eb 15                	jmp    80042010e4 <runcmd+0x48>
			*buf++ = 0;
  80042010cf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042010d6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042010da:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  80042010e1:	c6 00 00             	movb   $0x0,(%rax)
	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
	argv[argc] = 0;
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
  80042010e4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042010eb:	0f b6 00             	movzbl (%rax),%eax
  80042010ee:	84 c0                	test   %al,%al
  80042010f0:	74 2a                	je     800420111c <runcmd+0x80>
  80042010f2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042010f9:	0f b6 00             	movzbl (%rax),%eax
  80042010fc:	0f be c0             	movsbl %al,%eax
  80042010ff:	89 c6                	mov    %eax,%esi
  8004201101:	48 bf 82 1a 21 04 80 	movabs $0x8004211a82,%rdi
  8004201108:	00 00 00 
  800420110b:	48 b8 41 b4 20 04 80 	movabs $0x800420b441,%rax
  8004201112:	00 00 00 
  8004201115:	ff d0                	callq  *%rax
  8004201117:	48 85 c0             	test   %rax,%rax
  800420111a:	75 b3                	jne    80042010cf <runcmd+0x33>
			*buf++ = 0;
		if (*buf == 0)
  800420111c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201123:	0f b6 00             	movzbl (%rax),%eax
  8004201126:	84 c0                	test   %al,%al
  8004201128:	75 21                	jne    800420114b <runcmd+0xaf>
			break;
  800420112a:	90                   	nop
		}
		argv[argc++] = buf;
		while (*buf && !strchr(WHITESPACE, *buf))
			buf++;
	}
	argv[argc] = 0;
  800420112b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420112e:	48 98                	cltq   
  8004201130:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  8004201137:	ff 00 00 00 00 

	// Lookup and invoke the command
	if (argc == 0)
  800420113c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201140:	0f 85 a1 00 00 00    	jne    80042011e7 <runcmd+0x14b>
  8004201146:	e9 92 00 00 00       	jmpq   80042011dd <runcmd+0x141>
			*buf++ = 0;
		if (*buf == 0)
			break;

		// save and scan past next arg
		if (argc == MAXARGS-1) {
  800420114b:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  800420114f:	75 2a                	jne    800420117b <runcmd+0xdf>
			cprintf("Too many arguments (max %d)\n", MAXARGS);
  8004201151:	be 10 00 00 00       	mov    $0x10,%esi
  8004201156:	48 bf 87 1a 21 04 80 	movabs $0x8004211a87,%rdi
  800420115d:	00 00 00 
  8004201160:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201165:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  800420116c:	00 00 00 
  800420116f:	ff d2                	callq  *%rdx
			return 0;
  8004201171:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201176:	e9 30 01 00 00       	jmpq   80042012ab <runcmd+0x20f>
		}
		argv[argc++] = buf;
  800420117b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420117e:	8d 50 01             	lea    0x1(%rax),%edx
  8004201181:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201184:	48 98                	cltq   
  8004201186:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  800420118d:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201194:	ff 
		while (*buf && !strchr(WHITESPACE, *buf))
  8004201195:	eb 08                	jmp    800420119f <runcmd+0x103>
			buf++;
  8004201197:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  800420119e:	01 
		if (argc == MAXARGS-1) {
			cprintf("Too many arguments (max %d)\n", MAXARGS);
			return 0;
		}
		argv[argc++] = buf;
		while (*buf && !strchr(WHITESPACE, *buf))
  800420119f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042011a6:	0f b6 00             	movzbl (%rax),%eax
  80042011a9:	84 c0                	test   %al,%al
  80042011ab:	74 2a                	je     80042011d7 <runcmd+0x13b>
  80042011ad:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042011b4:	0f b6 00             	movzbl (%rax),%eax
  80042011b7:	0f be c0             	movsbl %al,%eax
  80042011ba:	89 c6                	mov    %eax,%esi
  80042011bc:	48 bf 82 1a 21 04 80 	movabs $0x8004211a82,%rdi
  80042011c3:	00 00 00 
  80042011c6:	48 b8 41 b4 20 04 80 	movabs $0x800420b441,%rax
  80042011cd:	00 00 00 
  80042011d0:	ff d0                	callq  *%rax
  80042011d2:	48 85 c0             	test   %rax,%rax
  80042011d5:	74 c0                	je     8004201197 <runcmd+0xfb>
			buf++;
	}
  80042011d7:	90                   	nop
	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
	argv[argc] = 0;
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
  80042011d8:	e9 07 ff ff ff       	jmpq   80042010e4 <runcmd+0x48>
	}
	argv[argc] = 0;

	// Lookup and invoke the command
	if (argc == 0)
		return 0;
  80042011dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011e2:	e9 c4 00 00 00       	jmpq   80042012ab <runcmd+0x20f>
	for (i = 0; i < NCOMMANDS; i++) {
  80042011e7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  80042011ee:	e9 82 00 00 00       	jmpq   8004201275 <runcmd+0x1d9>
		if (strcmp(argv[0], commands[i].name) == 0)
  80042011f3:	48 b9 80 65 22 04 80 	movabs $0x8004226580,%rcx
  80042011fa:	00 00 00 
  80042011fd:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201200:	48 63 d0             	movslq %eax,%rdx
  8004201203:	48 89 d0             	mov    %rdx,%rax
  8004201206:	48 01 c0             	add    %rax,%rax
  8004201209:	48 01 d0             	add    %rdx,%rax
  800420120c:	48 c1 e0 03          	shl    $0x3,%rax
  8004201210:	48 01 c8             	add    %rcx,%rax
  8004201213:	48 8b 10             	mov    (%rax),%rdx
  8004201216:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420121d:	48 89 d6             	mov    %rdx,%rsi
  8004201220:	48 89 c7             	mov    %rax,%rdi
  8004201223:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  800420122a:	00 00 00 
  800420122d:	ff d0                	callq  *%rax
  800420122f:	85 c0                	test   %eax,%eax
  8004201231:	75 3e                	jne    8004201271 <runcmd+0x1d5>
			return commands[i].func(argc, argv, tf);
  8004201233:	48 b9 80 65 22 04 80 	movabs $0x8004226580,%rcx
  800420123a:	00 00 00 
  800420123d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201240:	48 63 d0             	movslq %eax,%rdx
  8004201243:	48 89 d0             	mov    %rdx,%rax
  8004201246:	48 01 c0             	add    %rax,%rax
  8004201249:	48 01 d0             	add    %rdx,%rax
  800420124c:	48 c1 e0 03          	shl    $0x3,%rax
  8004201250:	48 01 c8             	add    %rcx,%rax
  8004201253:	48 83 c0 10          	add    $0x10,%rax
  8004201257:	48 8b 00             	mov    (%rax),%rax
  800420125a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201261:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201268:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800420126b:	89 cf                	mov    %ecx,%edi
  800420126d:	ff d0                	callq  *%rax
  800420126f:	eb 3a                	jmp    80042012ab <runcmd+0x20f>
	argv[argc] = 0;

	// Lookup and invoke the command
	if (argc == 0)
		return 0;
	for (i = 0; i < NCOMMANDS; i++) {
  8004201271:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201275:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201278:	83 f8 01             	cmp    $0x1,%eax
  800420127b:	0f 86 72 ff ff ff    	jbe    80042011f3 <runcmd+0x157>
		if (strcmp(argv[0], commands[i].name) == 0)
			return commands[i].func(argc, argv, tf);
	}
	cprintf("Unknown command '%s'\n", argv[0]);
  8004201281:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201288:	48 89 c6             	mov    %rax,%rsi
  800420128b:	48 bf a4 1a 21 04 80 	movabs $0x8004211aa4,%rdi
  8004201292:	00 00 00 
  8004201295:	b8 00 00 00 00       	mov    $0x0,%eax
  800420129a:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042012a1:	00 00 00 
  80042012a4:	ff d2                	callq  *%rdx
	return 0;
  80042012a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042012ab:	c9                   	leaveq 
  80042012ac:	c3                   	retq   

00000080042012ad <monitor>:

void
monitor(struct Trapframe *tf)
{
  80042012ad:	55                   	push   %rbp
  80042012ae:	48 89 e5             	mov    %rsp,%rbp
  80042012b1:	48 83 ec 20          	sub    $0x20,%rsp
  80042012b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	char *buf;

	cprintf("Welcome to the JOS kernel monitor!\n");
  80042012b9:	48 bf c0 1a 21 04 80 	movabs $0x8004211ac0,%rdi
  80042012c0:	00 00 00 
  80042012c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012c8:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042012cf:	00 00 00 
  80042012d2:	ff d2                	callq  *%rdx
	cprintf("Type 'help' for a list of commands.\n");
  80042012d4:	48 bf e8 1a 21 04 80 	movabs $0x8004211ae8,%rdi
  80042012db:	00 00 00 
  80042012de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012e3:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042012ea:	00 00 00 
  80042012ed:	ff d2                	callq  *%rdx

	if (tf != NULL)
  80042012ef:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042012f4:	74 13                	je     8004201309 <monitor+0x5c>
		print_trapframe(tf);
  80042012f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042012fa:	48 89 c7             	mov    %rax,%rdi
  80042012fd:	48 b8 7c 8e 20 04 80 	movabs $0x8004208e7c,%rax
  8004201304:	00 00 00 
  8004201307:	ff d0                	callq  *%rax

	while (1) {
		buf = readline("K> ");
  8004201309:	48 bf 0d 1b 21 04 80 	movabs $0x8004211b0d,%rdi
  8004201310:	00 00 00 
  8004201313:	48 b8 60 b0 20 04 80 	movabs $0x800420b060,%rax
  800420131a:	00 00 00 
  800420131d:	ff d0                	callq  *%rax
  800420131f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (buf != NULL)
  8004201323:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201328:	74 20                	je     800420134a <monitor+0x9d>
			if (runcmd(buf, tf) < 0)
  800420132a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420132e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201332:	48 89 d6             	mov    %rdx,%rsi
  8004201335:	48 89 c7             	mov    %rax,%rdi
  8004201338:	48 b8 9c 10 20 04 80 	movabs $0x800420109c,%rax
  800420133f:	00 00 00 
  8004201342:	ff d0                	callq  *%rax
  8004201344:	85 c0                	test   %eax,%eax
  8004201346:	79 02                	jns    800420134a <monitor+0x9d>
				break;
  8004201348:	eb 02                	jmp    800420134c <monitor+0x9f>
	}
  800420134a:	eb bd                	jmp    8004201309 <monitor+0x5c>
}
  800420134c:	c9                   	leaveq 
  800420134d:	c3                   	retq   

000000800420134e <page2ppn>:
int	user_mem_check(struct Env *env, const void *va, size_t len, int perm);
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline ppn_t
page2ppn(struct PageInfo *pp)
{
  800420134e:	55                   	push   %rbp
  800420134f:	48 89 e5             	mov    %rsp,%rbp
  8004201352:	48 83 ec 08          	sub    $0x8,%rsp
  8004201356:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return pp - pages;
  800420135a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420135e:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004201365:	00 00 00 
  8004201368:	48 8b 00             	mov    (%rax),%rax
  800420136b:	48 29 c2             	sub    %rax,%rdx
  800420136e:	48 89 d0             	mov    %rdx,%rax
  8004201371:	48 c1 f8 04          	sar    $0x4,%rax
}
  8004201375:	c9                   	leaveq 
  8004201376:	c3                   	retq   

0000008004201377 <page2pa>:

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
  8004201377:	55                   	push   %rbp
  8004201378:	48 89 e5             	mov    %rsp,%rbp
  800420137b:	48 83 ec 08          	sub    $0x8,%rsp
  800420137f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return page2ppn(pp) << PGSHIFT;
  8004201383:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201387:	48 89 c7             	mov    %rax,%rdi
  800420138a:	48 b8 4e 13 20 04 80 	movabs $0x800420134e,%rax
  8004201391:	00 00 00 
  8004201394:	ff d0                	callq  *%rax
  8004201396:	48 c1 e0 0c          	shl    $0xc,%rax
}
  800420139a:	c9                   	leaveq 
  800420139b:	c3                   	retq   

000000800420139c <pa2page>:

static inline struct PageInfo*
pa2page(physaddr_t pa)
{
  800420139c:	55                   	push   %rbp
  800420139d:	48 89 e5             	mov    %rsp,%rbp
  80042013a0:	48 83 ec 10          	sub    $0x10,%rsp
  80042013a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (PPN(pa) >= npages)
  80042013a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042013ac:	48 c1 e8 0c          	shr    $0xc,%rax
  80042013b0:	48 89 c2             	mov    %rax,%rdx
  80042013b3:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042013ba:	00 00 00 
  80042013bd:	48 8b 00             	mov    (%rax),%rax
  80042013c0:	48 39 c2             	cmp    %rax,%rdx
  80042013c3:	72 2a                	jb     80042013ef <pa2page+0x53>
		panic("pa2page called with invalid pa");
  80042013c5:	48 ba 18 1b 21 04 80 	movabs $0x8004211b18,%rdx
  80042013cc:	00 00 00 
  80042013cf:	be 52 00 00 00       	mov    $0x52,%esi
  80042013d4:	48 bf 37 1b 21 04 80 	movabs $0x8004211b37,%rdi
  80042013db:	00 00 00 
  80042013de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013e3:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  80042013ea:	00 00 00 
  80042013ed:	ff d1                	callq  *%rcx
	return &pages[PPN(pa)];
  80042013ef:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  80042013f6:	00 00 00 
  80042013f9:	48 8b 00             	mov    (%rax),%rax
  80042013fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201400:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201404:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201408:	48 01 d0             	add    %rdx,%rax
}
  800420140b:	c9                   	leaveq 
  800420140c:	c3                   	retq   

000000800420140d <page2kva>:

static inline void*
page2kva(struct PageInfo *pp)
{
  800420140d:	55                   	push   %rbp
  800420140e:	48 89 e5             	mov    %rsp,%rbp
  8004201411:	48 83 ec 20          	sub    $0x20,%rsp
  8004201415:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return KADDR(page2pa(pp));
  8004201419:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420141d:	48 89 c7             	mov    %rax,%rdi
  8004201420:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004201427:	00 00 00 
  800420142a:	ff d0                	callq  *%rax
  800420142c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201430:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201434:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201438:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420143b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420143e:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201445:	00 00 00 
  8004201448:	48 8b 00             	mov    (%rax),%rax
  800420144b:	48 39 c2             	cmp    %rax,%rdx
  800420144e:	72 32                	jb     8004201482 <page2kva+0x75>
  8004201450:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201454:	48 89 c1             	mov    %rax,%rcx
  8004201457:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  800420145e:	00 00 00 
  8004201461:	be 59 00 00 00       	mov    $0x59,%esi
  8004201466:	48 bf 37 1b 21 04 80 	movabs $0x8004211b37,%rdi
  800420146d:	00 00 00 
  8004201470:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201475:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420147c:	00 00 00 
  800420147f:	41 ff d0             	callq  *%r8
  8004201482:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201489:	00 00 00 
  800420148c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201490:	48 01 d0             	add    %rdx,%rax
}
  8004201493:	c9                   	leaveq 
  8004201494:	c3                   	retq   

0000008004201495 <restrictive_type>:
   uint32_t length_low;
   uint32_t length_high;
   uint32_t type;
 } memory_map_t;

static __inline uint32_t restrictive_type(uint32_t t1, uint32_t t2) {
  8004201495:	55                   	push   %rbp
  8004201496:	48 89 e5             	mov    %rsp,%rbp
  8004201499:	48 83 ec 08          	sub    $0x8,%rsp
  800420149d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042014a0:	89 75 f8             	mov    %esi,-0x8(%rbp)
  if(t1==MB_TYPE_BAD || t2==MB_TYPE_BAD)
  80042014a3:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  80042014a7:	74 06                	je     80042014af <restrictive_type+0x1a>
  80042014a9:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  80042014ad:	75 07                	jne    80042014b6 <restrictive_type+0x21>
    return MB_TYPE_BAD;
  80042014af:	b8 05 00 00 00       	mov    $0x5,%eax
  80042014b4:	eb 3e                	jmp    80042014f4 <restrictive_type+0x5f>
  else if(t1==MB_TYPE_ACPI_NVS || t2==MB_TYPE_ACPI_NVS)
  80042014b6:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  80042014ba:	74 06                	je     80042014c2 <restrictive_type+0x2d>
  80042014bc:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  80042014c0:	75 07                	jne    80042014c9 <restrictive_type+0x34>
    return MB_TYPE_ACPI_NVS;
  80042014c2:	b8 04 00 00 00       	mov    $0x4,%eax
  80042014c7:	eb 2b                	jmp    80042014f4 <restrictive_type+0x5f>
  else if(t1==MB_TYPE_RESERVED || t2==MB_TYPE_RESERVED)
  80042014c9:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  80042014cd:	74 06                	je     80042014d5 <restrictive_type+0x40>
  80042014cf:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  80042014d3:	75 07                	jne    80042014dc <restrictive_type+0x47>
    return MB_TYPE_RESERVED;
  80042014d5:	b8 02 00 00 00       	mov    $0x2,%eax
  80042014da:	eb 18                	jmp    80042014f4 <restrictive_type+0x5f>
  else if(t1==MB_TYPE_ACPI_RECLM || t2==MB_TYPE_ACPI_RECLM)
  80042014dc:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  80042014e0:	74 06                	je     80042014e8 <restrictive_type+0x53>
  80042014e2:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  80042014e6:	75 07                	jne    80042014ef <restrictive_type+0x5a>
    return MB_TYPE_ACPI_RECLM;
  80042014e8:	b8 03 00 00 00       	mov    $0x3,%eax
  80042014ed:	eb 05                	jmp    80042014f4 <restrictive_type+0x5f>

  return MB_TYPE_USABLE;
  80042014ef:	b8 01 00 00 00       	mov    $0x1,%eax
}
  80042014f4:	c9                   	leaveq 
  80042014f5:	c3                   	retq   

00000080042014f6 <nvram_read>:
// Detect machine's physical memory setup.
// --------------------------------------------------------------

static int
nvram_read(int r)
{
  80042014f6:	55                   	push   %rbp
  80042014f7:	48 89 e5             	mov    %rsp,%rbp
  80042014fa:	53                   	push   %rbx
  80042014fb:	48 83 ec 18          	sub    $0x18,%rsp
  80042014ff:	89 7d ec             	mov    %edi,-0x14(%rbp)
    return mc146818_read(r) | (mc146818_read(r + 1) << 8);
  8004201502:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201505:	89 c7                	mov    %eax,%edi
  8004201507:	48 b8 cd 75 20 04 80 	movabs $0x80042075cd,%rax
  800420150e:	00 00 00 
  8004201511:	ff d0                	callq  *%rax
  8004201513:	89 c3                	mov    %eax,%ebx
  8004201515:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201518:	83 c0 01             	add    $0x1,%eax
  800420151b:	89 c7                	mov    %eax,%edi
  800420151d:	48 b8 cd 75 20 04 80 	movabs $0x80042075cd,%rax
  8004201524:	00 00 00 
  8004201527:	ff d0                	callq  *%rax
  8004201529:	c1 e0 08             	shl    $0x8,%eax
  800420152c:	09 d8                	or     %ebx,%eax
}
  800420152e:	48 83 c4 18          	add    $0x18,%rsp
  8004201532:	5b                   	pop    %rbx
  8004201533:	5d                   	pop    %rbp
  8004201534:	c3                   	retq   

0000008004201535 <multiboot_read>:

static void
multiboot_read(multiboot_info_t* mbinfo, size_t* basemem, size_t* extmem) {
  8004201535:	55                   	push   %rbp
  8004201536:	48 89 e5             	mov    %rsp,%rbp
  8004201539:	41 54                	push   %r12
  800420153b:	53                   	push   %rbx
  800420153c:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201543:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  800420154a:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201551:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201558:	48 89 e0             	mov    %rsp,%rax
  800420155b:	49 89 c4             	mov    %rax,%r12
    int i;

    memory_map_t* mmap_base = (memory_map_t*)(uintptr_t)mbinfo->mmap_addr;
  800420155e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201565:	8b 40 30             	mov    0x30(%rax),%eax
  8004201568:	89 c0                	mov    %eax,%eax
  800420156a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    memory_map_t* mmap_list[mbinfo->mmap_length/ (sizeof(memory_map_t))];
  800420156e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201575:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201578:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  800420157d:	f7 e2                	mul    %edx
  800420157f:	89 d0                	mov    %edx,%eax
  8004201581:	c1 e8 04             	shr    $0x4,%eax
  8004201584:	89 c0                	mov    %eax,%eax
  8004201586:	48 89 c2             	mov    %rax,%rdx
  8004201589:	48 83 ea 01          	sub    $0x1,%rdx
  800420158d:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201591:	49 89 c0             	mov    %rax,%r8
  8004201594:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420159a:	48 89 c1             	mov    %rax,%rcx
  800420159d:	bb 00 00 00 00       	mov    $0x0,%ebx
  80042015a2:	48 c1 e0 03          	shl    $0x3,%rax
  80042015a6:	48 8d 50 07          	lea    0x7(%rax),%rdx
  80042015aa:	b8 10 00 00 00       	mov    $0x10,%eax
  80042015af:	48 83 e8 01          	sub    $0x1,%rax
  80042015b3:	48 01 d0             	add    %rdx,%rax
  80042015b6:	bb 10 00 00 00       	mov    $0x10,%ebx
  80042015bb:	ba 00 00 00 00       	mov    $0x0,%edx
  80042015c0:	48 f7 f3             	div    %rbx
  80042015c3:	48 6b c0 10          	imul   $0x10,%rax,%rax
  80042015c7:	48 29 c4             	sub    %rax,%rsp
  80042015ca:	48 89 e0             	mov    %rsp,%rax
  80042015cd:	48 83 c0 07          	add    $0x7,%rax
  80042015d1:	48 c1 e8 03          	shr    $0x3,%rax
  80042015d5:	48 c1 e0 03          	shl    $0x3,%rax
  80042015d9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

    cprintf("\ne820 MEMORY MAP\n");
  80042015dd:	48 bf 6b 1b 21 04 80 	movabs $0x8004211b6b,%rdi
  80042015e4:	00 00 00 
  80042015e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015ec:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042015f3:	00 00 00 
  80042015f6:	ff d2                	callq  *%rdx
    for(i = 0; i < (mbinfo->mmap_length / (sizeof(memory_map_t))); i++) {
  80042015f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042015ff:	e9 6c 01 00 00       	jmpq   8004201770 <multiboot_read+0x23b>
        memory_map_t* mmap = &mmap_base[i];
  8004201604:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201607:	48 63 d0             	movslq %eax,%rdx
  800420160a:	48 89 d0             	mov    %rdx,%rax
  800420160d:	48 01 c0             	add    %rax,%rax
  8004201610:	48 01 d0             	add    %rdx,%rax
  8004201613:	48 c1 e0 03          	shl    $0x3,%rax
  8004201617:	48 89 c2             	mov    %rax,%rdx
  800420161a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420161e:	48 01 d0             	add    %rdx,%rax
  8004201621:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

        uint64_t addr = APPEND_HILO(mmap->base_addr_high, mmap->base_addr_low);
  8004201625:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201629:	8b 40 08             	mov    0x8(%rax),%eax
  800420162c:	89 c0                	mov    %eax,%eax
  800420162e:	48 c1 e0 20          	shl    $0x20,%rax
  8004201632:	48 89 c2             	mov    %rax,%rdx
  8004201635:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201639:	8b 40 04             	mov    0x4(%rax),%eax
  800420163c:	89 c0                	mov    %eax,%eax
  800420163e:	48 01 d0             	add    %rdx,%rax
  8004201641:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        uint64_t len = APPEND_HILO(mmap->length_high, mmap->length_low);
  8004201645:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201649:	8b 40 10             	mov    0x10(%rax),%eax
  800420164c:	89 c0                	mov    %eax,%eax
  800420164e:	48 c1 e0 20          	shl    $0x20,%rax
  8004201652:	48 89 c2             	mov    %rax,%rdx
  8004201655:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201659:	8b 40 0c             	mov    0xc(%rax),%eax
  800420165c:	89 c0                	mov    %eax,%eax
  800420165e:	48 01 d0             	add    %rdx,%rax
  8004201661:	48 89 45 b0          	mov    %rax,-0x50(%rbp)

        cprintf("size: %d, address: 0x%016x, length: 0x%016x, type: %x\n", mmap->size,
  8004201665:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201669:	8b 70 14             	mov    0x14(%rax),%esi
  800420166c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201670:	8b 00                	mov    (%rax),%eax
  8004201672:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201676:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420167a:	41 89 f0             	mov    %esi,%r8d
  800420167d:	89 c6                	mov    %eax,%esi
  800420167f:	48 bf 80 1b 21 04 80 	movabs $0x8004211b80,%rdi
  8004201686:	00 00 00 
  8004201689:	b8 00 00 00 00       	mov    $0x0,%eax
  800420168e:	49 b9 d6 76 20 04 80 	movabs $0x80042076d6,%r9
  8004201695:	00 00 00 
  8004201698:	41 ff d1             	callq  *%r9
                addr, len, mmap->type);

        if(mmap->type > 5 || mmap->type < 1)
  800420169b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420169f:	8b 40 14             	mov    0x14(%rax),%eax
  80042016a2:	83 f8 05             	cmp    $0x5,%eax
  80042016a5:	77 0b                	ja     80042016b2 <multiboot_read+0x17d>
  80042016a7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016ab:	8b 40 14             	mov    0x14(%rax),%eax
  80042016ae:	85 c0                	test   %eax,%eax
  80042016b0:	75 0b                	jne    80042016bd <multiboot_read+0x188>
        mmap->type = MB_TYPE_RESERVED;
  80042016b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016b6:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)

        //Insert into the sorted list
        int j = 0;
  80042016bd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
        for(;j<i;j++) {
  80042016c4:	e9 85 00 00 00       	jmpq   800420174e <multiboot_read+0x219>
            memory_map_t* this = mmap_list[j];
  80042016c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042016cd:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042016d0:	48 63 d2             	movslq %edx,%rdx
  80042016d3:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042016d7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
            uint64_t this_addr = APPEND_HILO(this->base_addr_high, this->base_addr_low);
  80042016db:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042016df:	8b 40 08             	mov    0x8(%rax),%eax
  80042016e2:	89 c0                	mov    %eax,%eax
  80042016e4:	48 c1 e0 20          	shl    $0x20,%rax
  80042016e8:	48 89 c2             	mov    %rax,%rdx
  80042016eb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042016ef:	8b 40 04             	mov    0x4(%rax),%eax
  80042016f2:	89 c0                	mov    %eax,%eax
  80042016f4:	48 01 d0             	add    %rdx,%rax
  80042016f7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
            if(this_addr > addr) {
  80042016fb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042016ff:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201703:	76 45                	jbe    800420174a <multiboot_read+0x215>
                int last = i+1;
  8004201705:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201708:	83 c0 01             	add    $0x1,%eax
  800420170b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
                while(last != j) {
  800420170e:	eb 30                	jmp    8004201740 <multiboot_read+0x20b>
                    *(mmap_list + last) = *(mmap_list + last - 1);
  8004201710:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201714:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201717:	48 63 d2             	movslq %edx,%rdx
  800420171a:	48 c1 e2 03          	shl    $0x3,%rdx
  800420171e:	48 01 c2             	add    %rax,%rdx
  8004201721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201725:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201728:	48 63 c9             	movslq %ecx,%rcx
  800420172b:	48 c1 e1 03          	shl    $0x3,%rcx
  800420172f:	48 83 e9 08          	sub    $0x8,%rcx
  8004201733:	48 01 c8             	add    %rcx,%rax
  8004201736:	48 8b 00             	mov    (%rax),%rax
  8004201739:	48 89 02             	mov    %rax,(%rdx)
                    last--;
  800420173c:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
        for(;j<i;j++) {
            memory_map_t* this = mmap_list[j];
            uint64_t this_addr = APPEND_HILO(this->base_addr_high, this->base_addr_low);
            if(this_addr > addr) {
                int last = i+1;
                while(last != j) {
  8004201740:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201743:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201746:	75 c8                	jne    8004201710 <multiboot_read+0x1db>
                    *(mmap_list + last) = *(mmap_list + last - 1);
                    last--;
                }
                break;
  8004201748:	eb 10                	jmp    800420175a <multiboot_read+0x225>
        if(mmap->type > 5 || mmap->type < 1)
        mmap->type = MB_TYPE_RESERVED;

        //Insert into the sorted list
        int j = 0;
        for(;j<i;j++) {
  800420174a:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420174e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201751:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201754:	0f 8c 6f ff ff ff    	jl     80042016c9 <multiboot_read+0x194>
                    last--;
                }
                break;
            }
        }
        mmap_list[j] = mmap;
  800420175a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420175e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201761:	48 63 d2             	movslq %edx,%rdx
  8004201764:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201768:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)

    memory_map_t* mmap_base = (memory_map_t*)(uintptr_t)mbinfo->mmap_addr;
    memory_map_t* mmap_list[mbinfo->mmap_length/ (sizeof(memory_map_t))];

    cprintf("\ne820 MEMORY MAP\n");
    for(i = 0; i < (mbinfo->mmap_length / (sizeof(memory_map_t))); i++) {
  800420176c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201770:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201773:	48 63 c8             	movslq %eax,%rcx
  8004201776:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420177d:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201780:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201785:	f7 e2                	mul    %edx
  8004201787:	89 d0                	mov    %edx,%eax
  8004201789:	c1 e8 04             	shr    $0x4,%eax
  800420178c:	89 c0                	mov    %eax,%eax
  800420178e:	48 39 c1             	cmp    %rax,%rcx
  8004201791:	0f 82 6d fe ff ff    	jb     8004201604 <multiboot_read+0xcf>
                break;
            }
        }
        mmap_list[j] = mmap;
    }
    cprintf("\n");
  8004201797:	48 bf b7 1b 21 04 80 	movabs $0x8004211bb7,%rdi
  800420179e:	00 00 00 
  80042017a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017a6:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042017ad:	00 00 00 
  80042017b0:	ff d2                	callq  *%rdx

    // Sanitize the list
    for(i=1;i < (mbinfo->mmap_length / (sizeof(memory_map_t))); i++) {
  80042017b2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  80042017b9:	e9 93 01 00 00       	jmpq   8004201951 <multiboot_read+0x41c>
        memory_map_t* prev = mmap_list[i-1];
  80042017be:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042017c1:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042017c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042017c8:	48 63 d2             	movslq %edx,%rdx
  80042017cb:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042017cf:	48 89 45 98          	mov    %rax,-0x68(%rbp)
        memory_map_t* this = mmap_list[i];
  80042017d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042017d7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042017da:	48 63 d2             	movslq %edx,%rdx
  80042017dd:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042017e1:	48 89 45 90          	mov    %rax,-0x70(%rbp)

        uint64_t this_addr = APPEND_HILO(this->base_addr_high, this->base_addr_low);
  80042017e5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042017e9:	8b 40 08             	mov    0x8(%rax),%eax
  80042017ec:	89 c0                	mov    %eax,%eax
  80042017ee:	48 c1 e0 20          	shl    $0x20,%rax
  80042017f2:	48 89 c2             	mov    %rax,%rdx
  80042017f5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042017f9:	8b 40 04             	mov    0x4(%rax),%eax
  80042017fc:	89 c0                	mov    %eax,%eax
  80042017fe:	48 01 d0             	add    %rdx,%rax
  8004201801:	48 89 45 88          	mov    %rax,-0x78(%rbp)
        uint64_t prev_addr = APPEND_HILO(prev->base_addr_high, prev->base_addr_low);
  8004201805:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201809:	8b 40 08             	mov    0x8(%rax),%eax
  800420180c:	89 c0                	mov    %eax,%eax
  800420180e:	48 c1 e0 20          	shl    $0x20,%rax
  8004201812:	48 89 c2             	mov    %rax,%rdx
  8004201815:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201819:	8b 40 04             	mov    0x4(%rax),%eax
  800420181c:	89 c0                	mov    %eax,%eax
  800420181e:	48 01 d0             	add    %rdx,%rax
  8004201821:	48 89 45 80          	mov    %rax,-0x80(%rbp)
        uint64_t prev_length = APPEND_HILO(prev->length_high, prev->length_low);
  8004201825:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201829:	8b 40 10             	mov    0x10(%rax),%eax
  800420182c:	89 c0                	mov    %eax,%eax
  800420182e:	48 c1 e0 20          	shl    $0x20,%rax
  8004201832:	48 89 c2             	mov    %rax,%rdx
  8004201835:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201839:	8b 40 0c             	mov    0xc(%rax),%eax
  800420183c:	89 c0                	mov    %eax,%eax
  800420183e:	48 01 d0             	add    %rdx,%rax
  8004201841:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
        uint64_t this_length = APPEND_HILO(this->length_high, this->length_low);
  8004201848:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420184c:	8b 40 10             	mov    0x10(%rax),%eax
  800420184f:	89 c0                	mov    %eax,%eax
  8004201851:	48 c1 e0 20          	shl    $0x20,%rax
  8004201855:	48 89 c2             	mov    %rax,%rdx
  8004201858:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420185c:	8b 40 0c             	mov    0xc(%rax),%eax
  800420185f:	89 c0                	mov    %eax,%eax
  8004201861:	48 01 d0             	add    %rdx,%rax
  8004201864:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)

        // Merge adjacent regions with same type
        if(prev_addr + prev_length == this_addr && prev->type == this->type) {
  800420186b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004201872:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004201876:	48 01 d0             	add    %rdx,%rax
  8004201879:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  800420187d:	75 7c                	jne    80042018fb <multiboot_read+0x3c6>
  800420187f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201883:	8b 50 14             	mov    0x14(%rax),%edx
  8004201886:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420188a:	8b 40 14             	mov    0x14(%rax),%eax
  800420188d:	39 c2                	cmp    %eax,%edx
  800420188f:	75 6a                	jne    80042018fb <multiboot_read+0x3c6>
            this->length_low = (uint32_t)prev_length + this_length;
  8004201891:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004201898:	89 c2                	mov    %eax,%edx
  800420189a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042018a1:	01 c2                	add    %eax,%edx
  80042018a3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042018a7:	89 50 0c             	mov    %edx,0xc(%rax)
            this->length_high = (uint32_t)((prev_length + this_length)>>32);
  80042018aa:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042018b1:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042018b8:	48 01 d0             	add    %rdx,%rax
  80042018bb:	48 c1 e8 20          	shr    $0x20,%rax
  80042018bf:	89 c2                	mov    %eax,%edx
  80042018c1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042018c5:	89 50 10             	mov    %edx,0x10(%rax)
            this->base_addr_low = prev->base_addr_low;
  80042018c8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042018cc:	8b 50 04             	mov    0x4(%rax),%edx
  80042018cf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042018d3:	89 50 04             	mov    %edx,0x4(%rax)
            this->base_addr_high = prev->base_addr_high;
  80042018d6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042018da:	8b 50 08             	mov    0x8(%rax),%edx
  80042018dd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042018e1:	89 50 08             	mov    %edx,0x8(%rax)
            mmap_list[i-1] = NULL;
  80042018e4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042018e7:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042018ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042018ee:	48 63 d2             	movslq %edx,%rdx
  80042018f1:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  80042018f8:	00 
  80042018f9:	eb 52                	jmp    800420194d <multiboot_read+0x418>
        } else if(prev_addr + prev_length > this_addr) {
  80042018fb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004201902:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004201906:	48 01 d0             	add    %rdx,%rax
  8004201909:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  800420190d:	76 3e                	jbe    800420194d <multiboot_read+0x418>
            //Overlapping regions
            uint32_t type = restrictive_type(prev->type, this->type);
  800420190f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201913:	8b 50 14             	mov    0x14(%rax),%edx
  8004201916:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420191a:	8b 40 14             	mov    0x14(%rax),%eax
  800420191d:	89 d6                	mov    %edx,%esi
  800420191f:	89 c7                	mov    %eax,%edi
  8004201921:	48 b8 95 14 20 04 80 	movabs $0x8004201495,%rax
  8004201928:	00 00 00 
  800420192b:	ff d0                	callq  *%rax
  800420192d:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
            prev->type = type;
  8004201933:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201937:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  800420193d:	89 50 14             	mov    %edx,0x14(%rax)
            this->type = type;
  8004201940:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201944:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  800420194a:	89 50 14             	mov    %edx,0x14(%rax)
        mmap_list[j] = mmap;
    }
    cprintf("\n");

    // Sanitize the list
    for(i=1;i < (mbinfo->mmap_length / (sizeof(memory_map_t))); i++) {
  800420194d:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201951:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201954:	48 63 c8             	movslq %eax,%rcx
  8004201957:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420195e:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201961:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201966:	f7 e2                	mul    %edx
  8004201968:	89 d0                	mov    %edx,%eax
  800420196a:	c1 e8 04             	shr    $0x4,%eax
  800420196d:	89 c0                	mov    %eax,%eax
  800420196f:	48 39 c1             	cmp    %rax,%rcx
  8004201972:	0f 82 46 fe ff ff    	jb     80042017be <multiboot_read+0x289>
            prev->type = type;
            this->type = type;
        }
    }

    for(i=0;i < (mbinfo->mmap_length / (sizeof(memory_map_t))); i++) {
  8004201978:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420197f:	e9 dc 00 00 00       	jmpq   8004201a60 <multiboot_read+0x52b>
        memory_map_t* mmap = mmap_list[i];
  8004201984:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201988:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420198b:	48 63 d2             	movslq %edx,%rdx
  800420198e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201992:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
        if(mmap) {
  8004201999:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  80042019a0:	00 
  80042019a1:	0f 84 b5 00 00 00    	je     8004201a5c <multiboot_read+0x527>
            if(mmap->type == MB_TYPE_USABLE || mmap->type == MB_TYPE_ACPI_RECLM) {
  80042019a7:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042019ae:	8b 40 14             	mov    0x14(%rax),%eax
  80042019b1:	83 f8 01             	cmp    $0x1,%eax
  80042019b4:	74 13                	je     80042019c9 <multiboot_read+0x494>
  80042019b6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042019bd:	8b 40 14             	mov    0x14(%rax),%eax
  80042019c0:	83 f8 03             	cmp    $0x3,%eax
  80042019c3:	0f 85 93 00 00 00    	jne    8004201a5c <multiboot_read+0x527>
                if(mmap->base_addr_low < 0x100000 && mmap->base_addr_high == 0)
  80042019c9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042019d0:	8b 40 04             	mov    0x4(%rax),%eax
  80042019d3:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  80042019d8:	77 49                	ja     8004201a23 <multiboot_read+0x4ee>
  80042019da:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042019e1:	8b 40 08             	mov    0x8(%rax),%eax
  80042019e4:	85 c0                	test   %eax,%eax
  80042019e6:	75 3b                	jne    8004201a23 <multiboot_read+0x4ee>
                    *basemem += APPEND_HILO(mmap->length_high, mmap->length_low);
  80042019e8:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042019ef:	48 8b 10             	mov    (%rax),%rdx
  80042019f2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042019f9:	8b 40 10             	mov    0x10(%rax),%eax
  80042019fc:	89 c0                	mov    %eax,%eax
  80042019fe:	48 c1 e0 20          	shl    $0x20,%rax
  8004201a02:	48 89 c1             	mov    %rax,%rcx
  8004201a05:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004201a0c:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201a0f:	89 c0                	mov    %eax,%eax
  8004201a11:	48 01 c8             	add    %rcx,%rax
  8004201a14:	48 01 c2             	add    %rax,%rdx
  8004201a17:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004201a1e:	48 89 10             	mov    %rdx,(%rax)
  8004201a21:	eb 39                	jmp    8004201a5c <multiboot_read+0x527>
                else
                *extmem += APPEND_HILO(mmap->length_high, mmap->length_low);
  8004201a23:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004201a2a:	48 8b 10             	mov    (%rax),%rdx
  8004201a2d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004201a34:	8b 40 10             	mov    0x10(%rax),%eax
  8004201a37:	89 c0                	mov    %eax,%eax
  8004201a39:	48 c1 e0 20          	shl    $0x20,%rax
  8004201a3d:	48 89 c1             	mov    %rax,%rcx
  8004201a40:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004201a47:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201a4a:	89 c0                	mov    %eax,%eax
  8004201a4c:	48 01 c8             	add    %rcx,%rax
  8004201a4f:	48 01 c2             	add    %rax,%rdx
  8004201a52:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004201a59:	48 89 10             	mov    %rdx,(%rax)
            prev->type = type;
            this->type = type;
        }
    }

    for(i=0;i < (mbinfo->mmap_length / (sizeof(memory_map_t))); i++) {
  8004201a5c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201a60:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201a63:	48 63 c8             	movslq %eax,%rcx
  8004201a66:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201a6d:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201a70:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201a75:	f7 e2                	mul    %edx
  8004201a77:	89 d0                	mov    %edx,%eax
  8004201a79:	c1 e8 04             	shr    $0x4,%eax
  8004201a7c:	89 c0                	mov    %eax,%eax
  8004201a7e:	48 39 c1             	cmp    %rax,%rcx
  8004201a81:	0f 82 fd fe ff ff    	jb     8004201984 <multiboot_read+0x44f>
  8004201a87:	4c 89 e4             	mov    %r12,%rsp
                else
                *extmem += APPEND_HILO(mmap->length_high, mmap->length_low);
            }
        }
    }
}
  8004201a8a:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  8004201a8e:	5b                   	pop    %rbx
  8004201a8f:	41 5c                	pop    %r12
  8004201a91:	5d                   	pop    %rbp
  8004201a92:	c3                   	retq   

0000008004201a93 <i386_detect_memory>:

static void
i386_detect_memory(void)
{
  8004201a93:	55                   	push   %rbp
  8004201a94:	48 89 e5             	mov    %rsp,%rbp
  8004201a97:	48 83 ec 50          	sub    $0x50,%rsp
    size_t npages_extmem;
    size_t basemem = 0;
  8004201a9b:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004201aa2:	00 
    size_t extmem = 0;
  8004201aa3:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004201aaa:	00 

    // Check if the bootloader passed us a multiboot structure
    extern char multiboot_info[];
    uintptr_t* mbp = (uintptr_t*)multiboot_info;
  8004201aab:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004201ab2:	00 00 00 
  8004201ab5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    multiboot_info_t * mbinfo = (multiboot_info_t*)*mbp;
  8004201ab9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201abd:	48 8b 00             	mov    (%rax),%rax
  8004201ac0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    if(mbinfo && (mbinfo->flags & MB_FLAG_MMAP)) {
  8004201ac4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201ac9:	74 2d                	je     8004201af8 <i386_detect_memory+0x65>
  8004201acb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201acf:	8b 00                	mov    (%rax),%eax
  8004201ad1:	83 e0 40             	and    $0x40,%eax
  8004201ad4:	85 c0                	test   %eax,%eax
  8004201ad6:	74 20                	je     8004201af8 <i386_detect_memory+0x65>
        multiboot_read(mbinfo, &basemem, &extmem);
  8004201ad8:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  8004201adc:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004201ae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201ae4:	48 89 ce             	mov    %rcx,%rsi
  8004201ae7:	48 89 c7             	mov    %rax,%rdi
  8004201aea:	48 b8 35 15 20 04 80 	movabs $0x8004201535,%rax
  8004201af1:	00 00 00 
  8004201af4:	ff d0                	callq  *%rax
  8004201af6:	eb 34                	jmp    8004201b2c <i386_detect_memory+0x99>
    } else {
        basemem = (nvram_read(NVRAM_BASELO) * 1024);
  8004201af8:	bf 15 00 00 00       	mov    $0x15,%edi
  8004201afd:	48 b8 f6 14 20 04 80 	movabs $0x80042014f6,%rax
  8004201b04:	00 00 00 
  8004201b07:	ff d0                	callq  *%rax
  8004201b09:	c1 e0 0a             	shl    $0xa,%eax
  8004201b0c:	48 98                	cltq   
  8004201b0e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        extmem = (nvram_read(NVRAM_EXTLO) * 1024);
  8004201b12:	bf 17 00 00 00       	mov    $0x17,%edi
  8004201b17:	48 b8 f6 14 20 04 80 	movabs $0x80042014f6,%rax
  8004201b1e:	00 00 00 
  8004201b21:	ff d0                	callq  *%rax
  8004201b23:	c1 e0 0a             	shl    $0xa,%eax
  8004201b26:	48 98                	cltq   
  8004201b28:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    }

    assert(basemem);
  8004201b2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201b30:	48 85 c0             	test   %rax,%rax
  8004201b33:	75 35                	jne    8004201b6a <i386_detect_memory+0xd7>
  8004201b35:	48 b9 b9 1b 21 04 80 	movabs $0x8004211bb9,%rcx
  8004201b3c:	00 00 00 
  8004201b3f:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004201b46:	00 00 00 
  8004201b49:	be 86 00 00 00       	mov    $0x86,%esi
  8004201b4e:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004201b55:	00 00 00 
  8004201b58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b5d:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004201b64:	00 00 00 
  8004201b67:	41 ff d0             	callq  *%r8

    npages_basemem = basemem / PGSIZE;
  8004201b6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201b6e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b72:	48 89 c2             	mov    %rax,%rdx
  8004201b75:	48 b8 70 c1 2b 04 80 	movabs $0x80042bc170,%rax
  8004201b7c:	00 00 00 
  8004201b7f:	48 89 10             	mov    %rdx,(%rax)
    npages_extmem = extmem / PGSIZE;
  8004201b82:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004201b86:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b8a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if(nvram_read(NVRAM_EXTLO) == 0xffff) {
  8004201b8e:	bf 17 00 00 00       	mov    $0x17,%edi
  8004201b93:	48 b8 f6 14 20 04 80 	movabs $0x80042014f6,%rax
  8004201b9a:	00 00 00 
  8004201b9d:	ff d0                	callq  *%rax
  8004201b9f:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004201ba4:	75 2c                	jne    8004201bd2 <i386_detect_memory+0x13f>
        // EXTMEM > 16M in blocks of 64k
        size_t pextmem = nvram_read(NVRAM_EXTGT16LO) * (64 * 1024);
  8004201ba6:	bf 34 00 00 00       	mov    $0x34,%edi
  8004201bab:	48 b8 f6 14 20 04 80 	movabs $0x80042014f6,%rax
  8004201bb2:	00 00 00 
  8004201bb5:	ff d0                	callq  *%rax
  8004201bb7:	c1 e0 10             	shl    $0x10,%eax
  8004201bba:	48 98                	cltq   
  8004201bbc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        npages_extmem = ((16 * 1024 * 1024) + pextmem - (1 * 1024 * 1024)) / PGSIZE;
  8004201bc0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004201bc4:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  8004201bca:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201bce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    }

    // Calculate the number of physical pages available in both base
    // and extended memory.
    if (npages_extmem)
  8004201bd2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201bd7:	74 1a                	je     8004201bf3 <i386_detect_memory+0x160>
        npages = (EXTPHYSMEM / PGSIZE) + npages_extmem;
  8004201bd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bdd:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004201be4:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201beb:	00 00 00 
  8004201bee:	48 89 10             	mov    %rdx,(%rax)
  8004201bf1:	eb 1a                	jmp    8004201c0d <i386_detect_memory+0x17a>
    else
        npages = npages_basemem;
  8004201bf3:	48 b8 70 c1 2b 04 80 	movabs $0x80042bc170,%rax
  8004201bfa:	00 00 00 
  8004201bfd:	48 8b 10             	mov    (%rax),%rdx
  8004201c00:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201c07:	00 00 00 
  8004201c0a:	48 89 10             	mov    %rdx,(%rax)

    cprintf("Physical memory: %uM available, base = %uK, extended = %uK, npages = %d\n",
  8004201c0d:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201c14:	00 00 00 
  8004201c17:	48 8b 30             	mov    (%rax),%rsi
            npages * PGSIZE / (1024 * 1024),
            npages_basemem * PGSIZE / 1024,
            npages_extmem * PGSIZE / 1024,
  8004201c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c1e:	48 c1 e0 0c          	shl    $0xc,%rax
    if (npages_extmem)
        npages = (EXTPHYSMEM / PGSIZE) + npages_extmem;
    else
        npages = npages_basemem;

    cprintf("Physical memory: %uM available, base = %uK, extended = %uK, npages = %d\n",
  8004201c22:	48 c1 e8 0a          	shr    $0xa,%rax
  8004201c26:	48 89 c1             	mov    %rax,%rcx
            npages * PGSIZE / (1024 * 1024),
            npages_basemem * PGSIZE / 1024,
  8004201c29:	48 b8 70 c1 2b 04 80 	movabs $0x80042bc170,%rax
  8004201c30:	00 00 00 
  8004201c33:	48 8b 00             	mov    (%rax),%rax
  8004201c36:	48 c1 e0 0c          	shl    $0xc,%rax
    if (npages_extmem)
        npages = (EXTPHYSMEM / PGSIZE) + npages_extmem;
    else
        npages = npages_basemem;

    cprintf("Physical memory: %uM available, base = %uK, extended = %uK, npages = %d\n",
  8004201c3a:	48 c1 e8 0a          	shr    $0xa,%rax
  8004201c3e:	48 89 c2             	mov    %rax,%rdx
            npages * PGSIZE / (1024 * 1024),
  8004201c41:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201c48:	00 00 00 
  8004201c4b:	48 8b 00             	mov    (%rax),%rax
  8004201c4e:	48 c1 e0 0c          	shl    $0xc,%rax
    if (npages_extmem)
        npages = (EXTPHYSMEM / PGSIZE) + npages_extmem;
    else
        npages = npages_basemem;

    cprintf("Physical memory: %uM available, base = %uK, extended = %uK, npages = %d\n",
  8004201c52:	48 c1 e8 14          	shr    $0x14,%rax
  8004201c56:	49 89 f0             	mov    %rsi,%r8
  8004201c59:	48 89 c6             	mov    %rax,%rsi
  8004201c5c:	48 bf e8 1b 21 04 80 	movabs $0x8004211be8,%rdi
  8004201c63:	00 00 00 
  8004201c66:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c6b:	49 b9 d6 76 20 04 80 	movabs $0x80042076d6,%r9
  8004201c72:	00 00 00 
  8004201c75:	41 ff d1             	callq  *%r9
    //JOS 64 pages are limited by the size of both the UPAGES
    //  virtual address space, and the range from KERNBASE to UVPT.
    //
    // NB: qemu seems to have a bug that crashes the host system on 13.10 if you try to
    //     max out memory.
    uint64_t upages_max = (ULIM - UPAGES) / sizeof(struct PageInfo);
  8004201c78:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  8004201c7f:	00 
    uint64_t kern_mem_max = (UVPT - KERNBASE) / PGSIZE;
  8004201c80:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  8004201c87:	07 
    cprintf("Pages limited to %llu by upage address range (%uMB), Pages limited to %llu by remapped phys mem (%uMB)\n",
            upages_max, ((upages_max * PGSIZE) / (1024 * 1024)),
            kern_mem_max, kern_mem_max * PGSIZE / (1024 * 1024));
  8004201c88:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004201c8c:	48 c1 e0 0c          	shl    $0xc,%rax
    //
    // NB: qemu seems to have a bug that crashes the host system on 13.10 if you try to
    //     max out memory.
    uint64_t upages_max = (ULIM - UPAGES) / sizeof(struct PageInfo);
    uint64_t kern_mem_max = (UVPT - KERNBASE) / PGSIZE;
    cprintf("Pages limited to %llu by upage address range (%uMB), Pages limited to %llu by remapped phys mem (%uMB)\n",
  8004201c90:	48 c1 e8 14          	shr    $0x14,%rax
  8004201c94:	48 89 c1             	mov    %rax,%rcx
            upages_max, ((upages_max * PGSIZE) / (1024 * 1024)),
  8004201c97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201c9b:	48 c1 e0 0c          	shl    $0xc,%rax
    //
    // NB: qemu seems to have a bug that crashes the host system on 13.10 if you try to
    //     max out memory.
    uint64_t upages_max = (ULIM - UPAGES) / sizeof(struct PageInfo);
    uint64_t kern_mem_max = (UVPT - KERNBASE) / PGSIZE;
    cprintf("Pages limited to %llu by upage address range (%uMB), Pages limited to %llu by remapped phys mem (%uMB)\n",
  8004201c9f:	48 c1 e8 14          	shr    $0x14,%rax
  8004201ca3:	48 89 c6             	mov    %rax,%rsi
  8004201ca6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004201caa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201cae:	49 89 c8             	mov    %rcx,%r8
  8004201cb1:	48 89 d1             	mov    %rdx,%rcx
  8004201cb4:	48 89 f2             	mov    %rsi,%rdx
  8004201cb7:	48 89 c6             	mov    %rax,%rsi
  8004201cba:	48 bf 38 1c 21 04 80 	movabs $0x8004211c38,%rdi
  8004201cc1:	00 00 00 
  8004201cc4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201cc9:	49 b9 d6 76 20 04 80 	movabs $0x80042076d6,%r9
  8004201cd0:	00 00 00 
  8004201cd3:	41 ff d1             	callq  *%r9
            upages_max, ((upages_max * PGSIZE) / (1024 * 1024)),
            kern_mem_max, kern_mem_max * PGSIZE / (1024 * 1024));
    uint64_t max_npages = upages_max < kern_mem_max ? upages_max : kern_mem_max;
  8004201cd6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201cda:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  8004201cde:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004201ce3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

    if(npages > max_npages) {
  8004201ce7:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201cee:	00 00 00 
  8004201cf1:	48 8b 00             	mov    (%rax),%rax
  8004201cf4:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004201cf8:	76 3a                	jbe    8004201d34 <i386_detect_memory+0x2a1>
        npages = max_npages - 1024;
  8004201cfa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201cfe:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  8004201d05:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201d0c:	00 00 00 
  8004201d0f:	48 89 10             	mov    %rdx,(%rax)
        cprintf("Using only %uK of the available memory.\n", max_npages);
  8004201d12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201d16:	48 89 c6             	mov    %rax,%rsi
  8004201d19:	48 bf a0 1c 21 04 80 	movabs $0x8004211ca0,%rdi
  8004201d20:	00 00 00 
  8004201d23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d28:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004201d2f:	00 00 00 
  8004201d32:	ff d2                	callq  *%rdx
    }
}
  8004201d34:	c9                   	leaveq 
  8004201d35:	c3                   	retq   

0000008004201d36 <boot_alloc>:
// If we're out of memory, boot_alloc should panic.
// This function may ONLY be used during initialization,
// before the page_free_list list has been set up.
static void *
boot_alloc(uint32_t n)
{
  8004201d36:	55                   	push   %rbp
  8004201d37:	48 89 e5             	mov    %rsp,%rbp
  8004201d3a:	48 83 ec 40          	sub    $0x40,%rsp
  8004201d3e:	89 7d cc             	mov    %edi,-0x34(%rbp)
    static char *nextfree;  // virtual address of next byte of free memory
    char *result;

    if (!nextfree) {
  8004201d41:	48 b8 88 c1 2b 04 80 	movabs $0x80042bc188,%rax
  8004201d48:	00 00 00 
  8004201d4b:	48 8b 00             	mov    (%rax),%rax
  8004201d4e:	48 85 c0             	test   %rax,%rax
  8004201d51:	75 4b                	jne    8004201d9e <boot_alloc+0x68>
        extern char end[];
        nextfree = ROUNDUP((char *) end, PGSIZE);
  8004201d53:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  8004201d5a:	00 
  8004201d5b:	48 b8 e0 e6 2b 04 80 	movabs $0x80042be6e0,%rax
  8004201d62:	00 00 00 
  8004201d65:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004201d69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d6d:	48 01 d0             	add    %rdx,%rax
  8004201d70:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201d74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201d78:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d7d:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201d81:	48 89 d0             	mov    %rdx,%rax
  8004201d84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004201d88:	48 29 c2             	sub    %rax,%rdx
  8004201d8b:	48 89 d0             	mov    %rdx,%rax
  8004201d8e:	48 89 c2             	mov    %rax,%rdx
  8004201d91:	48 b8 88 c1 2b 04 80 	movabs $0x80042bc188,%rax
  8004201d98:	00 00 00 
  8004201d9b:	48 89 10             	mov    %rdx,(%rax)
    }
    result = nextfree;
  8004201d9e:	48 b8 88 c1 2b 04 80 	movabs $0x80042bc188,%rax
  8004201da5:	00 00 00 
  8004201da8:	48 8b 00             	mov    (%rax),%rax
  8004201dab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    if (n > 0) {
  8004201daf:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004201db3:	0f 84 ad 00 00 00    	je     8004201e66 <boot_alloc+0x130>
        nextfree = ROUNDUP((char *)(nextfree + n), PGSIZE);
  8004201db9:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004201dc0:	00 
  8004201dc1:	48 b8 88 c1 2b 04 80 	movabs $0x80042bc188,%rax
  8004201dc8:	00 00 00 
  8004201dcb:	48 8b 10             	mov    (%rax),%rdx
  8004201dce:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004201dd1:	48 01 d0             	add    %rdx,%rax
  8004201dd4:	48 89 c2             	mov    %rax,%rdx
  8004201dd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004201ddb:	48 01 d0             	add    %rdx,%rax
  8004201dde:	48 83 e8 01          	sub    $0x1,%rax
  8004201de2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201de6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dea:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201def:	48 f7 75 e0          	divq   -0x20(%rbp)
  8004201df3:	48 89 d0             	mov    %rdx,%rax
  8004201df6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004201dfa:	48 29 c2             	sub    %rax,%rdx
  8004201dfd:	48 89 d0             	mov    %rdx,%rax
  8004201e00:	48 89 c2             	mov    %rax,%rdx
  8004201e03:	48 b8 88 c1 2b 04 80 	movabs $0x80042bc188,%rax
  8004201e0a:	00 00 00 
  8004201e0d:	48 89 10             	mov    %rdx,(%rax)
        if ((uint64_t) nextfree > KERNBASE + (npages * PGSIZE)) {
  8004201e10:	48 b8 88 c1 2b 04 80 	movabs $0x80042bc188,%rax
  8004201e17:	00 00 00 
  8004201e1a:	48 8b 00             	mov    (%rax),%rax
  8004201e1d:	48 89 c2             	mov    %rax,%rdx
  8004201e20:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201e27:	00 00 00 
  8004201e2a:	48 8b 00             	mov    (%rax),%rax
  8004201e2d:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004201e33:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201e37:	48 39 c2             	cmp    %rax,%rdx
  8004201e3a:	76 2a                	jbe    8004201e66 <boot_alloc+0x130>
            panic("boot_alloc: out of memory\n");
  8004201e3c:	48 ba c9 1c 21 04 80 	movabs $0x8004211cc9,%rdx
  8004201e43:	00 00 00 
  8004201e46:	be d7 00 00 00       	mov    $0xd7,%esi
  8004201e4b:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004201e52:	00 00 00 
  8004201e55:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e5a:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  8004201e61:	00 00 00 
  8004201e64:	ff d1                	callq  *%rcx
        }
    }

    return result;
  8004201e66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  8004201e6a:	c9                   	leaveq 
  8004201e6b:	c3                   	retq   

0000008004201e6c <x64_vm_init>:
//
// From UTOP to ULIM, the user is allowed to read but not write.
// Above ULIM the user cannot read or write.
void
x64_vm_init(void)
{
  8004201e6c:	55                   	push   %rbp
  8004201e6d:	48 89 e5             	mov    %rsp,%rbp
  8004201e70:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
    pml4e_t* pml4e;
    uint32_t cr0;
    uint64_t n;
    int r;
    struct Env *env;
    i386_detect_memory();
  8004201e74:	48 b8 93 1a 20 04 80 	movabs $0x8004201a93,%rax
  8004201e7b:	00 00 00 
  8004201e7e:	ff d0                	callq  *%rax
    //////////////////////////////////////////////////////////////////////
    // create initial page directory.
    // panic("x64_vm_init: this function is not finished\n");
    pml4e = boot_alloc(PGSIZE);
  8004201e80:	bf 00 10 00 00       	mov    $0x1000,%edi
  8004201e85:	48 b8 36 1d 20 04 80 	movabs $0x8004201d36,%rax
  8004201e8c:	00 00 00 
  8004201e8f:	ff d0                	callq  *%rax
  8004201e91:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    memset(pml4e, 0, PGSIZE);
  8004201e95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201e99:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004201e9e:	be 00 00 00 00       	mov    $0x0,%esi
  8004201ea3:	48 89 c7             	mov    %rax,%rdi
  8004201ea6:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  8004201ead:	00 00 00 
  8004201eb0:	ff d0                	callq  *%rax
    boot_pml4e = pml4e;
  8004201eb2:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004201eb9:	00 00 00 
  8004201ebc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201ec0:	48 89 10             	mov    %rdx,(%rax)
    boot_cr3 = PADDR(pml4e);
  8004201ec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ec7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201ecb:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004201ed2:	00 00 00 
  8004201ed5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  8004201ed9:	77 32                	ja     8004201f0d <x64_vm_init+0xa1>
  8004201edb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201edf:	48 89 c1             	mov    %rax,%rcx
  8004201ee2:	48 ba e8 1c 21 04 80 	movabs $0x8004211ce8,%rdx
  8004201ee9:	00 00 00 
  8004201eec:	be f7 00 00 00       	mov    $0xf7,%esi
  8004201ef1:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004201ef8:	00 00 00 
  8004201efb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f00:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004201f07:	00 00 00 
  8004201f0a:	41 ff d0             	callq  *%r8
  8004201f0d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004201f14:	ff ff ff 
  8004201f17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201f1b:	48 01 c2             	add    %rax,%rdx
  8004201f1e:	48 b8 58 d6 2b 04 80 	movabs $0x80042bd658,%rax
  8004201f25:	00 00 00 
  8004201f28:	48 89 10             	mov    %rdx,(%rax)
    // Allocate an array of npages 'struct PageInfo's and store it in 'pages'.
    // The kernel uses this array to keep track of physical pages: for
    // each physical page, there is a corresponding struct PageInfo in this
    // array.  'npages' is the number of physical pages in memory.
    // Your code goes here:
    uint32_t page_size = ROUNDUP(sizeof(struct PageInfo) * npages, PGSIZE);
  8004201f2b:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004201f32:	00 
  8004201f33:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004201f3a:	00 00 00 
  8004201f3d:	48 8b 00             	mov    (%rax),%rax
  8004201f40:	48 c1 e0 04          	shl    $0x4,%rax
  8004201f44:	48 89 c2             	mov    %rax,%rdx
  8004201f47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201f4b:	48 01 d0             	add    %rdx,%rax
  8004201f4e:	48 83 e8 01          	sub    $0x1,%rax
  8004201f52:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201f56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004201f5a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201f5f:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004201f63:	48 89 d0             	mov    %rdx,%rax
  8004201f66:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004201f6a:	48 29 c2             	sub    %rax,%rdx
  8004201f6d:	48 89 d0             	mov    %rdx,%rax
  8004201f70:	89 45 dc             	mov    %eax,-0x24(%rbp)
    pages = boot_alloc(page_size);
  8004201f73:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004201f76:	89 c7                	mov    %eax,%edi
  8004201f78:	48 b8 36 1d 20 04 80 	movabs $0x8004201d36,%rax
  8004201f7f:	00 00 00 
  8004201f82:	ff d0                	callq  *%rax
  8004201f84:	48 ba 70 d6 2b 04 80 	movabs $0x80042bd670,%rdx
  8004201f8b:	00 00 00 
  8004201f8e:	48 89 02             	mov    %rax,(%rdx)

    //////////////////////////////////////////////////////////////////////
    // Make 'envs' point to an array of size 'NENV' of 'struct Env'.
    // LAB 3: Your code here.

    uint32_t env_size = sizeof(struct Env) * NENV;
  8004201f91:	c7 45 d8 00 e0 03 00 	movl   $0x3e000,-0x28(%rbp)
	envs = boot_alloc(env_size);
  8004201f98:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004201f9b:	89 c7                	mov    %eax,%edi
  8004201f9d:	48 b8 36 1d 20 04 80 	movabs $0x8004201d36,%rax
  8004201fa4:	00 00 00 
  8004201fa7:	ff d0                	callq  *%rax
  8004201fa9:	48 ba 90 c1 2b 04 80 	movabs $0x80042bc190,%rdx
  8004201fb0:	00 00 00 
  8004201fb3:	48 89 02             	mov    %rax,(%rdx)
	env = envs;
  8004201fb6:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  8004201fbd:	00 00 00 
  8004201fc0:	48 8b 00             	mov    (%rax),%rax
  8004201fc3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    //////////////////////////////////////////////////////////////////////
    // Now that we've allocated the initial kernel data structures, we set
    // up the list of free physical pages. Once we've done so, all further
    // memory management will go through the page_* functions. In
    // particular, we can now map memory using boot_map_region or page_insert
    page_init();
  8004201fc7:	48 b8 30 23 20 04 80 	movabs $0x8004202330,%rax
  8004201fce:	00 00 00 
  8004201fd1:	ff d0                	callq  *%rax
    //    - the new image at UPAGES -- kernel R, us/er R
    //      (ie. perm = PTE_U | PTE_P)
    //    - pages itself -- kernel RW, user NONE
    // Your code goes here:

    boot_map_region(boot_pml4e, UPAGES, page_size, PADDR(pages), PTE_U);
  8004201fd3:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004201fda:	00 00 00 
  8004201fdd:	48 8b 00             	mov    (%rax),%rax
  8004201fe0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201fe4:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004201feb:	00 00 00 
  8004201fee:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004201ff2:	77 32                	ja     8004202026 <x64_vm_init+0x1ba>
  8004201ff4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ff8:	48 89 c1             	mov    %rax,%rcx
  8004201ffb:	48 ba e8 1c 21 04 80 	movabs $0x8004211ce8,%rdx
  8004202002:	00 00 00 
  8004202005:	be 1b 01 00 00       	mov    $0x11b,%esi
  800420200a:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004202011:	00 00 00 
  8004202014:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202019:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004202020:	00 00 00 
  8004202023:	41 ff d0             	callq  *%r8
  8004202026:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420202d:	ff ff ff 
  8004202030:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202034:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202038:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420203b:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004202042:	00 00 00 
  8004202045:	48 8b 00             	mov    (%rax),%rax
  8004202048:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420204e:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202055:	00 00 00 
  8004202058:	48 89 c7             	mov    %rax,%rdi
  800420205b:	48 b8 c3 2b 20 04 80 	movabs $0x8004202bc3,%rax
  8004202062:	00 00 00 
  8004202065:	ff d0                	callq  *%rax
    // Permissions:
    //    - the new image at UENVS  -- kernel R, user R
    //    - envs itself -- kernel RW, user NONE
    // LAB 3: Your code here.

    boot_map_region(boot_pml4e, UENVS, env_size, PADDR(env), PTE_U);
  8004202067:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420206b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420206f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202076:	00 00 00 
  8004202079:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420207d:	77 32                	ja     80042020b1 <x64_vm_init+0x245>
  800420207f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202083:	48 89 c1             	mov    %rax,%rcx
  8004202086:	48 ba e8 1c 21 04 80 	movabs $0x8004211ce8,%rdx
  800420208d:	00 00 00 
  8004202090:	be 25 01 00 00       	mov    $0x125,%esi
  8004202095:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420209c:	00 00 00 
  800420209f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042020a4:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042020ab:	00 00 00 
  80042020ae:	41 ff d0             	callq  *%r8
  80042020b1:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042020b8:	ff ff ff 
  80042020bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042020bf:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042020c3:	8b 55 d8             	mov    -0x28(%rbp),%edx
  80042020c6:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042020cd:	00 00 00 
  80042020d0:	48 8b 00             	mov    (%rax),%rax
  80042020d3:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  80042020d9:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  80042020e0:	00 00 00 
  80042020e3:	48 89 c7             	mov    %rax,%rdi
  80042020e6:	48 b8 c3 2b 20 04 80 	movabs $0x8004202bc3,%rax
  80042020ed:	00 00 00 
  80042020f0:	ff d0                	callq  *%rax
    //       the kernel overflows its stack, it will fault rather than
    //       overwrite memory.  Known as a "guard page".
    //     Permissions: kernel RW, user NONE
    // Your code goes here:

    boot_map_region(boot_pml4e, KSTACKTOP-KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W);
  80042020f2:	48 b8 00 60 21 04 80 	movabs $0x8004216000,%rax
  80042020f9:	00 00 00 
  80042020fc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202100:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202107:	00 00 00 
  800420210a:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
  800420210e:	77 32                	ja     8004202142 <x64_vm_init+0x2d6>
  8004202110:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202114:	48 89 c1             	mov    %rax,%rcx
  8004202117:	48 ba e8 1c 21 04 80 	movabs $0x8004211ce8,%rdx
  800420211e:	00 00 00 
  8004202121:	be 33 01 00 00       	mov    $0x133,%esi
  8004202126:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420212d:	00 00 00 
  8004202130:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202135:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420213c:	00 00 00 
  800420213f:	41 ff d0             	callq  *%r8
  8004202142:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202149:	ff ff ff 
  800420214c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202150:	48 01 c2             	add    %rax,%rdx
  8004202153:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  800420215a:	00 00 00 
  800420215d:	48 8b 00             	mov    (%rax),%rax
  8004202160:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  8004202166:	48 89 d1             	mov    %rdx,%rcx
  8004202169:	ba 00 00 01 00       	mov    $0x10000,%edx
  800420216e:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  8004202175:	00 00 00 
  8004202178:	48 89 c7             	mov    %rax,%rdi
  800420217b:	48 b8 c3 2b 20 04 80 	movabs $0x8004202bc3,%rax
  8004202182:	00 00 00 
  8004202185:	ff d0                	callq  *%rax
    //      the PA range [0, npages*PGSIZE)
    // Permissions: kernel RW, user NONE
    // Your code goes here:


    boot_map_region(boot_pml4e, KERNBASE, npages * PGSIZE, (physaddr_t)0x0, PTE_W);
  8004202187:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  800420218e:	00 00 00 
  8004202191:	48 8b 00             	mov    (%rax),%rax
  8004202194:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202198:	48 89 c2             	mov    %rax,%rdx
  800420219b:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042021a2:	00 00 00 
  80042021a5:	48 8b 00             	mov    (%rax),%rax
  80042021a8:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  80042021ae:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042021b3:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042021ba:	00 00 00 
  80042021bd:	48 89 c7             	mov    %rax,%rdi
  80042021c0:	48 b8 c3 2b 20 04 80 	movabs $0x8004202bc3,%rax
  80042021c7:	00 00 00 
  80042021ca:	ff d0                	callq  *%rax

    // Check that the initial page directory has been set up correctly.
    check_page_free_list(1);
  80042021cc:	bf 01 00 00 00       	mov    $0x1,%edi
  80042021d1:	48 b8 05 30 20 04 80 	movabs $0x8004203005,%rax
  80042021d8:	00 00 00 
  80042021db:	ff d0                	callq  *%rax
    check_page_alloc();
  80042021dd:	48 b8 e2 34 20 04 80 	movabs $0x80042034e2,%rax
  80042021e4:	00 00 00 
  80042021e7:	ff d0                	callq  *%rax
    page_check();
  80042021e9:	48 b8 30 48 20 04 80 	movabs $0x8004204830,%rax
  80042021f0:	00 00 00 
  80042021f3:	ff d0                	callq  *%rax
    check_page_free_list(0);
  80042021f5:	bf 00 00 00 00       	mov    $0x0,%edi
  80042021fa:	48 b8 05 30 20 04 80 	movabs $0x8004203005,%rax
  8004202201:	00 00 00 
  8004202204:	ff d0                	callq  *%rax
    check_boot_pml4e(boot_pml4e);
  8004202206:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  800420220d:	00 00 00 
  8004202210:	48 8b 00             	mov    (%rax),%rax
  8004202213:	48 89 c7             	mov    %rax,%rdi
  8004202216:	48 b8 ce 3e 20 04 80 	movabs $0x8004203ece,%rax
  800420221d:	00 00 00 
  8004202220:	ff d0                	callq  *%rax

    //////////////////////////////////////////////////////////////////////
    // Permissions: kernel RW, user NONE
    pdpe_t *pdpe = KADDR(PTE_ADDR(pml4e[1]));
  8004202222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202226:	48 83 c0 08          	add    $0x8,%rax
  800420222a:	48 8b 00             	mov    (%rax),%rax
  800420222d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202233:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004202237:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420223b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420223f:	89 45 ac             	mov    %eax,-0x54(%rbp)
  8004202242:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004202245:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  800420224c:	00 00 00 
  800420224f:	48 8b 00             	mov    (%rax),%rax
  8004202252:	48 39 c2             	cmp    %rax,%rdx
  8004202255:	72 32                	jb     8004202289 <x64_vm_init+0x41d>
  8004202257:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420225b:	48 89 c1             	mov    %rax,%rcx
  800420225e:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004202265:	00 00 00 
  8004202268:	be 49 01 00 00       	mov    $0x149,%esi
  800420226d:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004202274:	00 00 00 
  8004202277:	b8 00 00 00 00       	mov    $0x0,%eax
  800420227c:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004202283:	00 00 00 
  8004202286:	41 ff d0             	callq  *%r8
  8004202289:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202290:	00 00 00 
  8004202293:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004202297:	48 01 d0             	add    %rdx,%rax
  800420229a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    pde_t *pgdir = KADDR(PTE_ADDR(pdpe[0]));
  800420229e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042022a2:	48 8b 00             	mov    (%rax),%rax
  80042022a5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042022ab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042022af:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042022b3:	48 c1 e8 0c          	shr    $0xc,%rax
  80042022b7:	89 45 94             	mov    %eax,-0x6c(%rbp)
  80042022ba:	8b 55 94             	mov    -0x6c(%rbp),%edx
  80042022bd:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042022c4:	00 00 00 
  80042022c7:	48 8b 00             	mov    (%rax),%rax
  80042022ca:	48 39 c2             	cmp    %rax,%rdx
  80042022cd:	72 32                	jb     8004202301 <x64_vm_init+0x495>
  80042022cf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042022d3:	48 89 c1             	mov    %rax,%rcx
  80042022d6:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  80042022dd:	00 00 00 
  80042022e0:	be 4a 01 00 00       	mov    $0x14a,%esi
  80042022e5:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042022ec:	00 00 00 
  80042022ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042022f4:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042022fb:	00 00 00 
  80042022fe:	41 ff d0             	callq  *%r8
  8004202301:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202308:	00 00 00 
  800420230b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420230f:	48 01 d0             	add    %rdx,%rax
  8004202312:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    lcr3(boot_cr3);
  8004202316:	48 b8 58 d6 2b 04 80 	movabs $0x80042bd658,%rax
  800420231d:	00 00 00 
  8004202320:	48 8b 00             	mov    (%rax),%rax
  8004202323:	48 89 45 80          	mov    %rax,-0x80(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202327:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420232b:	0f 22 d8             	mov    %rax,%cr3
}
  800420232e:	c9                   	leaveq 
  800420232f:	c3                   	retq   

0000008004202330 <page_init>:
// allocator functions below to allocate and deallocate physical
// memory via the page_free_list.
//
void
page_init(void)
{
  8004202330:	55                   	push   %rbp
  8004202331:	48 89 e5             	mov    %rsp,%rbp
  8004202334:	48 83 ec 60          	sub    $0x60,%rsp
    // free pages!
    // NB: Make sure you preserve the direction in which your page_free_list
    // is constructed
    // NB: Remember to mark the memory used for initial boot page table i.e (va>=BOOT_PAGE_TABLE_START && va < BOOT_PAGE_TABLE_END) as in-use (not free)
    size_t i;
    struct PageInfo* last = NULL;
  8004202338:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420233f:	00 

    uint64_t io_page = IOPHYSMEM / PGSIZE;
  8004202340:	48 c7 45 e0 a0 00 00 	movq   $0xa0,-0x20(%rbp)
  8004202347:	00 
    uint64_t free_page = PADDR(boot_alloc(0)) / PGSIZE;
  8004202348:	bf 00 00 00 00       	mov    $0x0,%edi
  800420234d:	48 b8 36 1d 20 04 80 	movabs $0x8004201d36,%rax
  8004202354:	00 00 00 
  8004202357:	ff d0                	callq  *%rax
  8004202359:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420235d:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202364:	00 00 00 
  8004202367:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800420236b:	77 32                	ja     800420239f <page_init+0x6f>
  800420236d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202371:	48 89 c1             	mov    %rax,%rcx
  8004202374:	48 ba e8 1c 21 04 80 	movabs $0x8004211ce8,%rdx
  800420237b:	00 00 00 
  800420237e:	be 76 01 00 00       	mov    $0x176,%esi
  8004202383:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420238a:	00 00 00 
  800420238d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202392:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004202399:	00 00 00 
  800420239c:	41 ff d0             	callq  *%r8
  800420239f:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042023a6:	ff ff ff 
  80042023a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042023ad:	48 01 d0             	add    %rdx,%rax
  80042023b0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042023b4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    pages[0].pp_ref = 1;
  80042023b8:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  80042023bf:	00 00 00 
  80042023c2:	48 8b 00             	mov    (%rax),%rax
  80042023c5:	66 c7 40 08 01 00    	movw   $0x1,0x8(%rax)
    pages[0].pp_link = NULL;
  80042023cb:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  80042023d2:	00 00 00 
  80042023d5:	48 8b 00             	mov    (%rax),%rax
  80042023d8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

    for (i = 1; i < npages; i++) {
  80042023df:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
  80042023e6:	00 
  80042023e7:	e9 fe 01 00 00       	jmpq   80042025ea <page_init+0x2ba>

        bool used = false;
  80042023ec:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)

        if (i >= io_page && i < free_page)
  80042023f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023f4:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042023f8:	72 0e                	jb     8004202408 <page_init+0xd8>
  80042023fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023fe:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202402:	73 04                	jae    8004202408 <page_init+0xd8>
            used = true;
  8004202404:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)

        uint64_t va = KERNBASE + i * PGSIZE;
  8004202408:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420240c:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202412:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202416:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

        if (va >= BOOT_PAGE_TABLE_START && va < BOOT_PAGE_TABLE_END)
  800420241a:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202421:	00 00 00 
  8004202424:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004202428:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420242c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202430:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004202433:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004202436:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  800420243d:	00 00 00 
  8004202440:	48 8b 00             	mov    (%rax),%rax
  8004202443:	48 39 c2             	cmp    %rax,%rdx
  8004202446:	72 32                	jb     800420247a <page_init+0x14a>
  8004202448:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420244c:	48 89 c1             	mov    %rax,%rcx
  800420244f:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004202456:	00 00 00 
  8004202459:	be 84 01 00 00       	mov    $0x184,%esi
  800420245e:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004202465:	00 00 00 
  8004202468:	b8 00 00 00 00       	mov    $0x0,%eax
  800420246d:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004202474:	00 00 00 
  8004202477:	41 ff d0             	callq  *%r8
  800420247a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202481:	00 00 00 
  8004202484:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202488:	48 01 d0             	add    %rdx,%rax
  800420248b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420248f:	0f 87 81 00 00 00    	ja     8004202516 <page_init+0x1e6>
  8004202495:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  800420249c:	00 00 00 
  800420249f:	48 05 00 50 00 00    	add    $0x5000,%rax
  80042024a5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042024a9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042024ad:	48 c1 e8 0c          	shr    $0xc,%rax
  80042024b1:	89 45 ac             	mov    %eax,-0x54(%rbp)
  80042024b4:	8b 55 ac             	mov    -0x54(%rbp),%edx
  80042024b7:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042024be:	00 00 00 
  80042024c1:	48 8b 00             	mov    (%rax),%rax
  80042024c4:	48 39 c2             	cmp    %rax,%rdx
  80042024c7:	72 32                	jb     80042024fb <page_init+0x1cb>
  80042024c9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042024cd:	48 89 c1             	mov    %rax,%rcx
  80042024d0:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  80042024d7:	00 00 00 
  80042024da:	be 84 01 00 00       	mov    $0x184,%esi
  80042024df:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042024e6:	00 00 00 
  80042024e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024ee:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042024f5:	00 00 00 
  80042024f8:	41 ff d0             	callq  *%r8
  80042024fb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202502:	00 00 00 
  8004202505:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004202509:	48 01 d0             	add    %rdx,%rax
  800420250c:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004202510:	76 04                	jbe    8004202516 <page_init+0x1e6>
            used = true;
  8004202512:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)

        if (used) {
  8004202516:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800420251a:	74 42                	je     800420255e <page_init+0x22e>
            pages[i].pp_ref = 1;
  800420251c:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004202523:	00 00 00 
  8004202526:	48 8b 00             	mov    (%rax),%rax
  8004202529:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420252d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202531:	48 01 d0             	add    %rdx,%rax
  8004202534:	66 c7 40 08 01 00    	movw   $0x1,0x8(%rax)
            pages[i].pp_link = NULL;
  800420253a:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004202541:	00 00 00 
  8004202544:	48 8b 00             	mov    (%rax),%rax
  8004202547:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420254b:	48 c1 e2 04          	shl    $0x4,%rdx
  800420254f:	48 01 d0             	add    %rdx,%rax
  8004202552:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            continue;
  8004202559:	e9 87 00 00 00       	jmpq   80042025e5 <page_init+0x2b5>
        }

        pages[i].pp_ref = 0;
  800420255e:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004202565:	00 00 00 
  8004202568:	48 8b 00             	mov    (%rax),%rax
  800420256b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420256f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202573:	48 01 d0             	add    %rdx,%rax
  8004202576:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
        if(last)
  800420257c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004202581:	74 21                	je     80042025a4 <page_init+0x274>
            last->pp_link = &pages[i];
  8004202583:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  800420258a:	00 00 00 
  800420258d:	48 8b 00             	mov    (%rax),%rax
  8004202590:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202594:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202598:	48 01 c2             	add    %rax,%rdx
  800420259b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420259f:	48 89 10             	mov    %rdx,(%rax)
  80042025a2:	eb 25                	jmp    80042025c9 <page_init+0x299>
        else
            page_free_list = &pages[i];
  80042025a4:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  80042025ab:	00 00 00 
  80042025ae:	48 8b 00             	mov    (%rax),%rax
  80042025b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042025b5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042025b9:	48 01 c2             	add    %rax,%rdx
  80042025bc:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  80042025c3:	00 00 00 
  80042025c6:	48 89 10             	mov    %rdx,(%rax)
        last = &pages[i];
  80042025c9:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  80042025d0:	00 00 00 
  80042025d3:	48 8b 00             	mov    (%rax),%rax
  80042025d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042025da:	48 c1 e2 04          	shl    $0x4,%rdx
  80042025de:	48 01 d0             	add    %rdx,%rax
  80042025e1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    uint64_t free_page = PADDR(boot_alloc(0)) / PGSIZE;

    pages[0].pp_ref = 1;
    pages[0].pp_link = NULL;

    for (i = 1; i < npages; i++) {
  80042025e5:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042025ea:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042025f1:	00 00 00 
  80042025f4:	48 8b 00             	mov    (%rax),%rax
  80042025f7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042025fb:	0f 82 eb fd ff ff    	jb     80042023ec <page_init+0xbc>
            last->pp_link = &pages[i];
        else
            page_free_list = &pages[i];
        last = &pages[i];
    }
}
  8004202601:	c9                   	leaveq 
  8004202602:	c3                   	retq   

0000008004202603 <page_alloc>:
// Returns NULL if out of free memory.
//
// Hint: use page2kva and memset
struct PageInfo *
page_alloc(int alloc_flags)
{
  8004202603:	55                   	push   %rbp
  8004202604:	48 89 e5             	mov    %rsp,%rbp
  8004202607:	48 83 ec 20          	sub    $0x20,%rsp
  800420260b:	89 7d ec             	mov    %edi,-0x14(%rbp)
    if (!page_free_list)
  800420260e:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004202615:	00 00 00 
  8004202618:	48 8b 00             	mov    (%rax),%rax
  800420261b:	48 85 c0             	test   %rax,%rax
  800420261e:	75 07                	jne    8004202627 <page_alloc+0x24>
        return NULL;
  8004202620:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202625:	eb 6a                	jmp    8004202691 <page_alloc+0x8e>

    struct PageInfo *page = page_free_list;
  8004202627:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  800420262e:	00 00 00 
  8004202631:	48 8b 00             	mov    (%rax),%rax
  8004202634:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    page_free_list = page->pp_link;
  8004202638:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420263c:	48 8b 10             	mov    (%rax),%rdx
  800420263f:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004202646:	00 00 00 
  8004202649:	48 89 10             	mov    %rdx,(%rax)

    if (alloc_flags & ALLOC_ZERO)
  800420264c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420264f:	83 e0 01             	and    $0x1,%eax
  8004202652:	85 c0                	test   %eax,%eax
  8004202654:	74 2c                	je     8004202682 <page_alloc+0x7f>
        memset(page2kva(page), '\0', PGSIZE);
  8004202656:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420265a:	48 89 c7             	mov    %rax,%rdi
  800420265d:	48 b8 0d 14 20 04 80 	movabs $0x800420140d,%rax
  8004202664:	00 00 00 
  8004202667:	ff d0                	callq  *%rax
  8004202669:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420266e:	be 00 00 00 00       	mov    $0x0,%esi
  8004202673:	48 89 c7             	mov    %rax,%rdi
  8004202676:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420267d:	00 00 00 
  8004202680:	ff d0                	callq  *%rax

    page->pp_link = NULL;
  8004202682:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202686:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

    return page;
  800420268d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004202691:	c9                   	leaveq 
  8004202692:	c3                   	retq   

0000008004202693 <page_initpp>:
// The result has null links and 0 refcount.
// Note that the corresponding physical page is NOT initialized!
//
static void
page_initpp(struct PageInfo *pp)
{
  8004202693:	55                   	push   %rbp
  8004202694:	48 89 e5             	mov    %rsp,%rbp
  8004202697:	48 83 ec 10          	sub    $0x10,%rsp
  800420269b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    memset(pp, 0, sizeof(*pp));
  800420269f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042026a3:	ba 10 00 00 00       	mov    $0x10,%edx
  80042026a8:	be 00 00 00 00       	mov    $0x0,%esi
  80042026ad:	48 89 c7             	mov    %rax,%rdi
  80042026b0:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  80042026b7:	00 00 00 
  80042026ba:	ff d0                	callq  *%rax
}
  80042026bc:	c9                   	leaveq 
  80042026bd:	c3                   	retq   

00000080042026be <page_free>:
// Return a page to the free list.
// (This function should only be called when pp->pp_ref reaches 0.)
//
void
page_free(struct PageInfo *pp)
{
  80042026be:	55                   	push   %rbp
  80042026bf:	48 89 e5             	mov    %rsp,%rbp
  80042026c2:	48 83 ec 10          	sub    $0x10,%rsp
  80042026c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if (pp->pp_ref != 0 || pp->pp_link)
  80042026ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042026ce:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042026d2:	66 85 c0             	test   %ax,%ax
  80042026d5:	75 0c                	jne    80042026e3 <page_free+0x25>
  80042026d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042026db:	48 8b 00             	mov    (%rax),%rax
  80042026de:	48 85 c0             	test   %rax,%rax
  80042026e1:	74 2a                	je     800420270d <page_free+0x4f>
    panic("'the page could not be freed");
  80042026e3:	48 ba 0c 1d 21 04 80 	movabs $0x8004211d0c,%rdx
  80042026ea:	00 00 00 
  80042026ed:	be c6 01 00 00       	mov    $0x1c6,%esi
  80042026f2:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042026f9:	00 00 00 
  80042026fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202701:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  8004202708:	00 00 00 
  800420270b:	ff d1                	callq  *%rcx

    pp->pp_link = page_free_list;
  800420270d:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004202714:	00 00 00 
  8004202717:	48 8b 10             	mov    (%rax),%rdx
  800420271a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420271e:	48 89 10             	mov    %rdx,(%rax)
    page_free_list = pp;
  8004202721:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004202728:	00 00 00 
  800420272b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420272f:	48 89 10             	mov    %rdx,(%rax)
}
  8004202732:	c9                   	leaveq 
  8004202733:	c3                   	retq   

0000008004202734 <page_decref>:
// Decrement the reference count on a page,
// freeing it if there are no more refs.
//
void
page_decref(struct PageInfo* pp)
{
  8004202734:	55                   	push   %rbp
  8004202735:	48 89 e5             	mov    %rsp,%rbp
  8004202738:	48 83 ec 10          	sub    $0x10,%rsp
  800420273c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if (--pp->pp_ref == 0)
  8004202740:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202744:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202748:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420274b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420274f:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202757:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420275b:	66 85 c0             	test   %ax,%ax
  800420275e:	75 13                	jne    8004202773 <page_decref+0x3f>
        page_free(pp);
  8004202760:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202764:	48 89 c7             	mov    %rax,%rdi
  8004202767:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  800420276e:	00 00 00 
  8004202771:	ff d0                	callq  *%rax
}
  8004202773:	c9                   	leaveq 
  8004202774:	c3                   	retq   

0000008004202775 <pml4e_walk>:
// table, page directory,page directory pointer and pml4 entries.
//

pte_t *
pml4e_walk(pml4e_t *pml4e, const void *va, int create)
{
  8004202775:	55                   	push   %rbp
  8004202776:	48 89 e5             	mov    %rsp,%rbp
  8004202779:	48 83 ec 50          	sub    $0x50,%rsp
  800420277d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004202781:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004202785:	89 55 bc             	mov    %edx,-0x44(%rbp)
    pdpe_t *pdpe;
    struct PageInfo *page = NULL;
  8004202788:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420278f:	00 
    pml4e_t *current_pml4e = &pml4e[PML4(va)];
  8004202790:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202794:	48 c1 e8 27          	shr    $0x27,%rax
  8004202798:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420279d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042027a4:	00 
  80042027a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042027a9:	48 01 d0             	add    %rdx,%rax
  80042027ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    if(!(*current_pml4e & PTE_P)) {
  80042027b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042027b4:	48 8b 00             	mov    (%rax),%rax
  80042027b7:	83 e0 01             	and    $0x1,%eax
  80042027ba:	48 85 c0             	test   %rax,%rax
  80042027bd:	75 6a                	jne    8004202829 <pml4e_walk+0xb4>
        if (!create)
  80042027bf:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  80042027c3:	75 0a                	jne    80042027cf <pml4e_walk+0x5a>
            return NULL;
  80042027c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042027ca:	e9 23 01 00 00       	jmpq   80042028f2 <pml4e_walk+0x17d>
        page = page_alloc(ALLOC_ZERO);
  80042027cf:	bf 01 00 00 00       	mov    $0x1,%edi
  80042027d4:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  80042027db:	00 00 00 
  80042027de:	ff d0                	callq  *%rax
  80042027e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if (!page)
  80042027e4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042027e9:	75 0a                	jne    80042027f5 <pml4e_walk+0x80>
            return NULL;
  80042027eb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042027f0:	e9 fd 00 00 00       	jmpq   80042028f2 <pml4e_walk+0x17d>

        page->pp_ref++;
  80042027f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027f9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042027fd:	8d 50 01             	lea    0x1(%rax),%edx
  8004202800:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202804:	66 89 50 08          	mov    %dx,0x8(%rax)
        *current_pml4e = (pml4e_t) page2pa(page) | PTE_P | PTE_W | PTE_U;
  8004202808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420280c:	48 89 c7             	mov    %rax,%rdi
  800420280f:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004202816:	00 00 00 
  8004202819:	ff d0                	callq  *%rax
  800420281b:	48 83 c8 07          	or     $0x7,%rax
  800420281f:	48 89 c2             	mov    %rax,%rdx
  8004202822:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202826:	48 89 10             	mov    %rdx,(%rax)
    }

    pdpe = (pdpe_t *) KADDR(PTE_ADDR(*current_pml4e));
  8004202829:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420282d:	48 8b 00             	mov    (%rax),%rax
  8004202830:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202836:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420283a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420283e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202842:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004202845:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004202848:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  800420284f:	00 00 00 
  8004202852:	48 8b 00             	mov    (%rax),%rax
  8004202855:	48 39 c2             	cmp    %rax,%rdx
  8004202858:	72 32                	jb     800420288c <pml4e_walk+0x117>
  800420285a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420285e:	48 89 c1             	mov    %rax,%rcx
  8004202861:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004202868:	00 00 00 
  800420286b:	be 02 02 00 00       	mov    $0x202,%esi
  8004202870:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004202877:	00 00 00 
  800420287a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420287f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004202886:	00 00 00 
  8004202889:	41 ff d0             	callq  *%r8
  800420288c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202893:	00 00 00 
  8004202896:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420289a:	48 01 d0             	add    %rdx,%rax
  800420289d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    pte_t *pte = pdpe_walk(pdpe, va, create);
  80042028a1:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042028a4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  80042028a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042028ac:	48 89 ce             	mov    %rcx,%rsi
  80042028af:	48 89 c7             	mov    %rax,%rdi
  80042028b2:	48 b8 f4 28 20 04 80 	movabs $0x80042028f4,%rax
  80042028b9:	00 00 00 
  80042028bc:	ff d0                	callq  *%rax
  80042028be:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    if (!pte && page) {
  80042028c2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042028c7:	75 25                	jne    80042028ee <pml4e_walk+0x179>
  80042028c9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042028ce:	74 1e                	je     80042028ee <pml4e_walk+0x179>
        *current_pml4e = 0x0;
  80042028d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042028d4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        page_decref(page);
  80042028db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042028df:	48 89 c7             	mov    %rax,%rdi
  80042028e2:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  80042028e9:	00 00 00 
  80042028ec:	ff d0                	callq  *%rax
    }

    return pte;
  80042028ee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
}
  80042028f2:	c9                   	leaveq 
  80042028f3:	c3                   	retq   

00000080042028f4 <pdpe_walk>:
// Given a pdpe i.e page directory pointer pdpe_walk returns the pointer to page table entry
// The programming logic in this function is similar to pml4e_walk.
// It calls the pgdir_walk which returns the page_table entry pointer.
// Hints are the same as in pml4e_walk
pte_t *
pdpe_walk(pdpe_t *pdpe,const void *va,int create){
  80042028f4:	55                   	push   %rbp
  80042028f5:	48 89 e5             	mov    %rsp,%rbp
  80042028f8:	48 83 ec 50          	sub    $0x50,%rsp
  80042028fc:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004202900:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004202904:	89 55 bc             	mov    %edx,-0x44(%rbp)
    pde_t *pde;
    struct PageInfo *page = NULL;
  8004202907:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420290e:	00 
    pdpe_t *current_pdpe = &pdpe[PDPE(va)];
  800420290f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202913:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004202917:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420291c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004202923:	00 
  8004202924:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202928:	48 01 d0             	add    %rdx,%rax
  800420292b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    if(!(*current_pdpe & PTE_P)) {
  800420292f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202933:	48 8b 00             	mov    (%rax),%rax
  8004202936:	83 e0 01             	and    $0x1,%eax
  8004202939:	48 85 c0             	test   %rax,%rax
  800420293c:	75 6a                	jne    80042029a8 <pdpe_walk+0xb4>
        if (!create)
  800420293e:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  8004202942:	75 0a                	jne    800420294e <pdpe_walk+0x5a>
            return NULL;
  8004202944:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202949:	e9 23 01 00 00       	jmpq   8004202a71 <pdpe_walk+0x17d>
        page = page_alloc(ALLOC_ZERO);
  800420294e:	bf 01 00 00 00       	mov    $0x1,%edi
  8004202953:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  800420295a:	00 00 00 
  800420295d:	ff d0                	callq  *%rax
  800420295f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if (!page)
  8004202963:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202968:	75 0a                	jne    8004202974 <pdpe_walk+0x80>
            return NULL;
  800420296a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420296f:	e9 fd 00 00 00       	jmpq   8004202a71 <pdpe_walk+0x17d>
        page->pp_ref++;
  8004202974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202978:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420297c:	8d 50 01             	lea    0x1(%rax),%edx
  800420297f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202983:	66 89 50 08          	mov    %dx,0x8(%rax)
        *current_pdpe = (pdpe_t) page2pa(page) | PTE_P | PTE_W | PTE_U;
  8004202987:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420298b:	48 89 c7             	mov    %rax,%rdi
  800420298e:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004202995:	00 00 00 
  8004202998:	ff d0                	callq  *%rax
  800420299a:	48 83 c8 07          	or     $0x7,%rax
  800420299e:	48 89 c2             	mov    %rax,%rdx
  80042029a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042029a5:	48 89 10             	mov    %rdx,(%rax)
    }

    pde = (pde_t *) KADDR(PTE_ADDR(*current_pdpe));
  80042029a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042029ac:	48 8b 00             	mov    (%rax),%rax
  80042029af:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042029b5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042029b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042029bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042029c1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042029c4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042029c7:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042029ce:	00 00 00 
  80042029d1:	48 8b 00             	mov    (%rax),%rax
  80042029d4:	48 39 c2             	cmp    %rax,%rdx
  80042029d7:	72 32                	jb     8004202a0b <pdpe_walk+0x117>
  80042029d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042029dd:	48 89 c1             	mov    %rax,%rcx
  80042029e0:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  80042029e7:	00 00 00 
  80042029ea:	be 22 02 00 00       	mov    $0x222,%esi
  80042029ef:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042029f6:	00 00 00 
  80042029f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042029fe:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004202a05:	00 00 00 
  8004202a08:	41 ff d0             	callq  *%r8
  8004202a0b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a12:	00 00 00 
  8004202a15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202a19:	48 01 d0             	add    %rdx,%rax
  8004202a1c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    pte_t *pte = pgdir_walk(pde, va, create);
  8004202a20:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004202a23:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004202a27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202a2b:	48 89 ce             	mov    %rcx,%rsi
  8004202a2e:	48 89 c7             	mov    %rax,%rdi
  8004202a31:	48 b8 73 2a 20 04 80 	movabs $0x8004202a73,%rax
  8004202a38:	00 00 00 
  8004202a3b:	ff d0                	callq  *%rax
  8004202a3d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    if (!pte && page) {
  8004202a41:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004202a46:	75 25                	jne    8004202a6d <pdpe_walk+0x179>
  8004202a48:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202a4d:	74 1e                	je     8004202a6d <pdpe_walk+0x179>
        *current_pdpe = 0x0;
  8004202a4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202a53:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        page_decref(page);
  8004202a5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202a5e:	48 89 c7             	mov    %rax,%rdi
  8004202a61:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  8004202a68:	00 00 00 
  8004202a6b:	ff d0                	callq  *%rax
    }

    return pte;
  8004202a6d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
}
  8004202a71:	c9                   	leaveq 
  8004202a72:	c3                   	retq   

0000008004202a73 <pgdir_walk>:
// The logic here is slightly different, in that it needs to look
// not just at the page directory, but also get the last-level page table entry.

pte_t *
pgdir_walk(pde_t *pgdir, const void *va, int create)
{
  8004202a73:	55                   	push   %rbp
  8004202a74:	48 89 e5             	mov    %rsp,%rbp
  8004202a77:	48 83 ec 50          	sub    $0x50,%rsp
  8004202a7b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004202a7f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004202a83:	89 55 bc             	mov    %edx,-0x44(%rbp)
    pde_t *current_pde = &pgdir[PDX(va)];
  8004202a86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202a8a:	48 c1 e8 15          	shr    $0x15,%rax
  8004202a8e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004202a93:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004202a9a:	00 
  8004202a9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202a9f:	48 01 d0             	add    %rdx,%rax
  8004202aa2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    pte_t *pte;

    if (!(*current_pde & PTE_P)) {
  8004202aa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202aaa:	48 8b 00             	mov    (%rax),%rax
  8004202aad:	83 e0 01             	and    $0x1,%eax
  8004202ab0:	48 85 c0             	test   %rax,%rax
  8004202ab3:	75 6a                	jne    8004202b1f <pgdir_walk+0xac>
        if (!create)
  8004202ab5:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  8004202ab9:	75 0a                	jne    8004202ac5 <pgdir_walk+0x52>
            return NULL;
  8004202abb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ac0:	e9 fc 00 00 00       	jmpq   8004202bc1 <pgdir_walk+0x14e>

        struct PageInfo *page = page_alloc(ALLOC_ZERO);
  8004202ac5:	bf 01 00 00 00       	mov    $0x1,%edi
  8004202aca:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004202ad1:	00 00 00 
  8004202ad4:	ff d0                	callq  *%rax
  8004202ad6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if (!page)
  8004202ada:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004202adf:	75 0a                	jne    8004202aeb <pgdir_walk+0x78>
            return NULL;
  8004202ae1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ae6:	e9 d6 00 00 00       	jmpq   8004202bc1 <pgdir_walk+0x14e>

        page->pp_ref++;
  8004202aeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202aef:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202af3:	8d 50 01             	lea    0x1(%rax),%edx
  8004202af6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202afa:	66 89 50 08          	mov    %dx,0x8(%rax)
        *current_pde = (pde_t) page2pa(page) | PTE_P | PTE_W | PTE_U;
  8004202afe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202b02:	48 89 c7             	mov    %rax,%rdi
  8004202b05:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004202b0c:	00 00 00 
  8004202b0f:	ff d0                	callq  *%rax
  8004202b11:	48 83 c8 07          	or     $0x7,%rax
  8004202b15:	48 89 c2             	mov    %rax,%rdx
  8004202b18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202b1c:	48 89 10             	mov    %rdx,(%rax)
    }

    pte = (pte_t *) KADDR(PTE_ADDR(*current_pde));
  8004202b1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202b23:	48 8b 00             	mov    (%rax),%rax
  8004202b26:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202b2c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b34:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202b38:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004202b3b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004202b3e:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004202b45:	00 00 00 
  8004202b48:	48 8b 00             	mov    (%rax),%rax
  8004202b4b:	48 39 c2             	cmp    %rax,%rdx
  8004202b4e:	72 32                	jb     8004202b82 <pgdir_walk+0x10f>
  8004202b50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b54:	48 89 c1             	mov    %rax,%rcx
  8004202b57:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004202b5e:	00 00 00 
  8004202b61:	be 47 02 00 00       	mov    $0x247,%esi
  8004202b66:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004202b6d:	00 00 00 
  8004202b70:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b75:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004202b7c:	00 00 00 
  8004202b7f:	41 ff d0             	callq  *%r8
  8004202b82:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b89:	00 00 00 
  8004202b8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b90:	48 01 d0             	add    %rdx,%rax
  8004202b93:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    if(!pte)
  8004202b97:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004202b9c:	75 07                	jne    8004202ba5 <pgdir_walk+0x132>
        return NULL;
  8004202b9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ba3:	eb 1c                	jmp    8004202bc1 <pgdir_walk+0x14e>

    return &pte[PTX(va)];
  8004202ba5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202ba9:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202bad:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004202bb2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004202bb9:	00 
  8004202bba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202bbe:	48 01 d0             	add    %rdx,%rax
}
  8004202bc1:	c9                   	leaveq 
  8004202bc2:	c3                   	retq   

0000008004202bc3 <boot_map_region>:
// mapped pages.
//
// Hint: the TA solution uses pml4e_walk
static void
boot_map_region(pml4e_t *pml4e, uintptr_t la, size_t size, physaddr_t pa, int perm)
{
  8004202bc3:	55                   	push   %rbp
  8004202bc4:	48 89 e5             	mov    %rsp,%rbp
  8004202bc7:	48 83 ec 40          	sub    $0x40,%rsp
  8004202bcb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004202bcf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004202bd3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004202bd7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004202bdb:	44 89 45 cc          	mov    %r8d,-0x34(%rbp)
    pte_t *pte;
    int i = 0 ;
  8004202bdf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    for(i = 0; i < size; i += PGSIZE) {
  8004202be6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202bed:	e9 8a 00 00 00       	jmpq   8004202c7c <boot_map_region+0xb9>
        pte = pml4e_walk(pml4e, (void *)la + i, true);
  8004202bf2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202bf5:	48 63 d0             	movslq %eax,%rdx
  8004202bf8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202bfc:	48 01 d0             	add    %rdx,%rax
  8004202bff:	48 89 c1             	mov    %rax,%rcx
  8004202c02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202c06:	ba 01 00 00 00       	mov    $0x1,%edx
  8004202c0b:	48 89 ce             	mov    %rcx,%rsi
  8004202c0e:	48 89 c7             	mov    %rax,%rdi
  8004202c11:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  8004202c18:	00 00 00 
  8004202c1b:	ff d0                	callq  *%rax
  8004202c1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if (!pte)
  8004202c21:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004202c26:	75 2a                	jne    8004202c52 <boot_map_region+0x8f>
            panic("failed to find the physical memory");
  8004202c28:	48 ba 30 1d 21 04 80 	movabs $0x8004211d30,%rdx
  8004202c2f:	00 00 00 
  8004202c32:	be 61 02 00 00       	mov    $0x261,%esi
  8004202c37:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004202c3e:	00 00 00 
  8004202c41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c46:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  8004202c4d:	00 00 00 
  8004202c50:	ff d1                	callq  *%rcx
        *pte = (pa + i) | perm | PTE_P;
  8004202c52:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202c55:	48 63 d0             	movslq %eax,%rdx
  8004202c58:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202c5c:	48 01 c2             	add    %rax,%rdx
  8004202c5f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004202c62:	48 98                	cltq   
  8004202c64:	48 09 d0             	or     %rdx,%rax
  8004202c67:	48 83 c8 01          	or     $0x1,%rax
  8004202c6b:	48 89 c2             	mov    %rax,%rdx
  8004202c6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202c72:	48 89 10             	mov    %rdx,(%rax)
static void
boot_map_region(pml4e_t *pml4e, uintptr_t la, size_t size, physaddr_t pa, int perm)
{
    pte_t *pte;
    int i = 0 ;
    for(i = 0; i < size; i += PGSIZE) {
  8004202c75:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%rbp)
  8004202c7c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202c7f:	48 98                	cltq   
  8004202c81:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004202c85:	0f 82 67 ff ff ff    	jb     8004202bf2 <boot_map_region+0x2f>
        pte = pml4e_walk(pml4e, (void *)la + i, true);
        if (!pte)
            panic("failed to find the physical memory");
        *pte = (pa + i) | perm | PTE_P;
    }
}
  8004202c8b:	c9                   	leaveq 
  8004202c8c:	c3                   	retq   

0000008004202c8d <page_insert>:
// Hint: The TA solution is implemented using pml4e_walk, page_remove,
// and page2pa.
//
int
page_insert(pml4e_t *pml4e, struct PageInfo *pp, void *va, int perm)
{
  8004202c8d:	55                   	push   %rbp
  8004202c8e:	48 89 e5             	mov    %rsp,%rbp
  8004202c91:	48 83 ec 30          	sub    $0x30,%rsp
  8004202c95:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004202c99:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004202c9d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004202ca1:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
    pte_t *pte = pml4e_walk(pml4e, va, true);
  8004202ca4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004202ca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202cac:	ba 01 00 00 00       	mov    $0x1,%edx
  8004202cb1:	48 89 ce             	mov    %rcx,%rsi
  8004202cb4:	48 89 c7             	mov    %rax,%rdi
  8004202cb7:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  8004202cbe:	00 00 00 
  8004202cc1:	ff d0                	callq  *%rax
  8004202cc3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (!pte)
  8004202cc7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ccc:	75 07                	jne    8004202cd5 <page_insert+0x48>
        return -E_NO_MEM;
  8004202cce:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004202cd3:	eb 6b                	jmp    8004202d40 <page_insert+0xb3>
    if (*pte & PTE_P)
  8004202cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202cd9:	48 8b 00             	mov    (%rax),%rax
  8004202cdc:	83 e0 01             	and    $0x1,%eax
  8004202cdf:	48 85 c0             	test   %rax,%rax
  8004202ce2:	74 1a                	je     8004202cfe <page_insert+0x71>
        page_remove(pml4e, va);
  8004202ce4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202ce8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202cec:	48 89 d6             	mov    %rdx,%rsi
  8004202cef:	48 89 c7             	mov    %rax,%rdi
  8004202cf2:	48 b8 b9 2d 20 04 80 	movabs $0x8004202db9,%rax
  8004202cf9:	00 00 00 
  8004202cfc:	ff d0                	callq  *%rax

    pp->pp_ref++;
  8004202cfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202d02:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202d06:	8d 50 01             	lea    0x1(%rax),%edx
  8004202d09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202d0d:	66 89 50 08          	mov    %dx,0x8(%rax)
    *pte = page2pa(pp) | perm | PTE_P;
  8004202d11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202d15:	48 89 c7             	mov    %rax,%rdi
  8004202d18:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004202d1f:	00 00 00 
  8004202d22:	ff d0                	callq  *%rax
  8004202d24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004202d27:	48 63 d2             	movslq %edx,%rdx
  8004202d2a:	48 09 d0             	or     %rdx,%rax
  8004202d2d:	48 83 c8 01          	or     $0x1,%rax
  8004202d31:	48 89 c2             	mov    %rax,%rdx
  8004202d34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202d38:	48 89 10             	mov    %rdx,(%rax)

    return 0;
  8004202d3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004202d40:	c9                   	leaveq 
  8004202d41:	c3                   	retq   

0000008004202d42 <page_lookup>:
//
// Hint: the TA solution uses pml4e_walk and pa2page.
//
struct PageInfo *
page_lookup(pml4e_t *pml4e, void *va, pte_t **pte_store)
{
  8004202d42:	55                   	push   %rbp
  8004202d43:	48 89 e5             	mov    %rsp,%rbp
  8004202d46:	48 83 ec 30          	sub    $0x30,%rsp
  8004202d4a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004202d4e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004202d52:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    pte_t *pte = pml4e_walk(pml4e, va, true);
  8004202d56:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004202d5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202d5e:	ba 01 00 00 00       	mov    $0x1,%edx
  8004202d63:	48 89 ce             	mov    %rcx,%rsi
  8004202d66:	48 89 c7             	mov    %rax,%rdi
  8004202d69:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  8004202d70:	00 00 00 
  8004202d73:	ff d0                	callq  *%rax
  8004202d75:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (!pte)
  8004202d79:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202d7e:	75 07                	jne    8004202d87 <page_lookup+0x45>
        return NULL;
  8004202d80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d85:	eb 30                	jmp    8004202db7 <page_lookup+0x75>

    physaddr_t pa = (physaddr_t) *pte;
  8004202d87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202d8b:	48 8b 00             	mov    (%rax),%rax
  8004202d8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    if (pte_store)
  8004202d92:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004202d97:	74 0b                	je     8004202da4 <page_lookup+0x62>
        *pte_store = pte;
  8004202d99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202d9d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202da1:	48 89 10             	mov    %rdx,(%rax)

    return pa2page(pa);
  8004202da4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202da8:	48 89 c7             	mov    %rax,%rdi
  8004202dab:	48 b8 9c 13 20 04 80 	movabs $0x800420139c,%rax
  8004202db2:	00 00 00 
  8004202db5:	ff d0                	callq  *%rax
}
  8004202db7:	c9                   	leaveq 
  8004202db8:	c3                   	retq   

0000008004202db9 <page_remove>:
// Hint: The TA solution is implemented using page_lookup,
//   tlb_invalidate, and page_decref.
//
void
page_remove(pml4e_t *pml4e, void *va)
{
  8004202db9:	55                   	push   %rbp
  8004202dba:	48 89 e5             	mov    %rsp,%rbp
  8004202dbd:	48 83 ec 20          	sub    $0x20,%rsp
  8004202dc1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004202dc5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    pte_t *pte = NULL;
  8004202dc9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004202dd0:	00 
    struct PageInfo *page = page_lookup(pml4e, va, &pte);
  8004202dd1:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004202dd5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004202dd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ddd:	48 89 ce             	mov    %rcx,%rsi
  8004202de0:	48 89 c7             	mov    %rax,%rdi
  8004202de3:	48 b8 42 2d 20 04 80 	movabs $0x8004202d42,%rax
  8004202dea:	00 00 00 
  8004202ded:	ff d0                	callq  *%rax
  8004202def:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (page) {
  8004202df3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202df8:	74 41                	je     8004202e3b <page_remove+0x82>
        page_decref(page);
  8004202dfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202dfe:	48 89 c7             	mov    %rax,%rdi
  8004202e01:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  8004202e08:	00 00 00 
  8004202e0b:	ff d0                	callq  *%rax
        if (pte) {
  8004202e0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202e11:	48 85 c0             	test   %rax,%rax
  8004202e14:	74 25                	je     8004202e3b <page_remove+0x82>
            *pte = 0;
  8004202e16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202e1a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            tlb_invalidate(pml4e, va);
  8004202e21:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004202e25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e29:	48 89 d6             	mov    %rdx,%rsi
  8004202e2c:	48 89 c7             	mov    %rax,%rdi
  8004202e2f:	48 b8 3d 2e 20 04 80 	movabs $0x8004202e3d,%rax
  8004202e36:	00 00 00 
  8004202e39:	ff d0                	callq  *%rax
        }
    }
}
  8004202e3b:	c9                   	leaveq 
  8004202e3c:	c3                   	retq   

0000008004202e3d <tlb_invalidate>:
// Invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
//
void
tlb_invalidate(pml4e_t *pml4e, void *va)
{
  8004202e3d:	55                   	push   %rbp
  8004202e3e:	48 89 e5             	mov    %rsp,%rbp
  8004202e41:	48 83 ec 20          	sub    $0x20,%rsp
  8004202e45:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004202e49:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004202e4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202e51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004202e55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202e59:	0f 01 38             	invlpg (%rax)
    // Flush the entry only if we're modifying the current address space.
    // For now, there is only one address space, so always invalidate.
    invlpg(va);
}
  8004202e5c:	c9                   	leaveq 
  8004202e5d:	c3                   	retq   

0000008004202e5e <user_mem_check>:
// Returns 0 if the user program can access this range of addresses,
// and -E_FAULT otherwise.
//
int
user_mem_check(struct Env *env, const void *va, size_t len, int perm)
{
  8004202e5e:	55                   	push   %rbp
  8004202e5f:	48 89 e5             	mov    %rsp,%rbp
  8004202e62:	48 83 ec 50          	sub    $0x50,%rsp
  8004202e66:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004202e6a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004202e6e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004202e72:	89 4d b4             	mov    %ecx,-0x4c(%rbp)
    // LAB 3: Your code here.
	uint64_t end = ROUNDUP((uint64_t)va+len,PGSIZE),start = ROUNDDOWN((uint64_t)va, PGSIZE);
  8004202e75:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004202e7c:	00 
  8004202e7d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004202e81:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202e85:	48 01 c2             	add    %rax,%rdx
  8004202e88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202e8c:	48 01 d0             	add    %rdx,%rax
  8004202e8f:	48 83 e8 01          	sub    $0x1,%rax
  8004202e93:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e9b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202ea0:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004202ea4:	48 89 d0             	mov    %rdx,%rax
  8004202ea7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202eab:	48 29 c2             	sub    %rax,%rdx
  8004202eae:	48 89 d0             	mov    %rdx,%rax
  8004202eb1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202eb5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202eb9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202ebd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202ec1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202ec7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	for (; start < end; start += PGSIZE)
  8004202ecb:	e9 99 00 00 00       	jmpq   8004202f69 <user_mem_check+0x10b>
	{
		pte_t *pte = pml4e_walk(env->env_pml4e, (const void *)start, false);
  8004202ed0:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004202ed4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202ed8:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004202edf:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202ee4:	48 89 ce             	mov    %rcx,%rsi
  8004202ee7:	48 89 c7             	mov    %rax,%rdi
  8004202eea:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  8004202ef1:	00 00 00 
  8004202ef4:	ff d0                	callq  *%rax
  8004202ef6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if (start >= ULIM || pte == NULL || ((*pte & perm) != perm) || ((*pte & PTE_P) == 0))
  8004202efa:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004202f01:	00 00 00 
  8004202f04:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202f08:	77 2f                	ja     8004202f39 <user_mem_check+0xdb>
  8004202f0a:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004202f0f:	74 28                	je     8004202f39 <user_mem_check+0xdb>
  8004202f11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202f15:	48 8b 10             	mov    (%rax),%rdx
  8004202f18:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  8004202f1b:	48 98                	cltq   
  8004202f1d:	48 21 c2             	and    %rax,%rdx
  8004202f20:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  8004202f23:	48 98                	cltq   
  8004202f25:	48 39 c2             	cmp    %rax,%rdx
  8004202f28:	75 0f                	jne    8004202f39 <user_mem_check+0xdb>
  8004202f2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202f2e:	48 8b 00             	mov    (%rax),%rax
  8004202f31:	83 e0 01             	and    $0x1,%eax
  8004202f34:	48 85 c0             	test   %rax,%rax
  8004202f37:	75 28                	jne    8004202f61 <user_mem_check+0x103>
		{
			user_mem_check_addr = start < (uintptr_t)va ? (uintptr_t)va : start;
  8004202f39:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202f3d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202f41:	76 06                	jbe    8004202f49 <user_mem_check+0xeb>
  8004202f43:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202f47:	eb 04                	jmp    8004202f4d <user_mem_check+0xef>
  8004202f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f4d:	48 ba 80 c1 2b 04 80 	movabs $0x80042bc180,%rdx
  8004202f54:	00 00 00 
  8004202f57:	48 89 02             	mov    %rax,(%rdx)
			return -E_FAULT;
  8004202f5a:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004202f5f:	eb 1b                	jmp    8004202f7c <user_mem_check+0x11e>
user_mem_check(struct Env *env, const void *va, size_t len, int perm)
{
    // LAB 3: Your code here.
	uint64_t end = ROUNDUP((uint64_t)va+len,PGSIZE),start = ROUNDDOWN((uint64_t)va, PGSIZE);

	for (; start < end; start += PGSIZE)
  8004202f61:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004202f68:	00 
  8004202f69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f6d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004202f71:	0f 82 59 ff ff ff    	jb     8004202ed0 <user_mem_check+0x72>
		{
			user_mem_check_addr = start < (uintptr_t)va ? (uintptr_t)va : start;
			return -E_FAULT;
		}
	}
	return 0;
  8004202f77:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004202f7c:	c9                   	leaveq 
  8004202f7d:	c3                   	retq   

0000008004202f7e <user_mem_assert>:
// If it cannot, 'env' is destroyed and, if env is the current
// environment, this function will not return.
//
void
user_mem_assert(struct Env *env, const void *va, size_t len, int perm)
{
  8004202f7e:	55                   	push   %rbp
  8004202f7f:	48 89 e5             	mov    %rsp,%rbp
  8004202f82:	48 83 ec 20          	sub    $0x20,%rsp
  8004202f86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004202f8e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004202f92:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    if (user_mem_check(env, va, len, perm | PTE_U) < 0) {
  8004202f95:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004202f98:	83 c8 04             	or     $0x4,%eax
  8004202f9b:	89 c1                	mov    %eax,%ecx
  8004202f9d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202fa1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004202fa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fa9:	48 89 c7             	mov    %rax,%rdi
  8004202fac:	48 b8 5e 2e 20 04 80 	movabs $0x8004202e5e,%rax
  8004202fb3:	00 00 00 
  8004202fb6:	ff d0                	callq  *%rax
  8004202fb8:	85 c0                	test   %eax,%eax
  8004202fba:	79 47                	jns    8004203003 <user_mem_assert+0x85>
        cprintf("[%08x] user_mem_check assertion failure for "
  8004202fbc:	48 b8 80 c1 2b 04 80 	movabs $0x80042bc180,%rax
  8004202fc3:	00 00 00 
  8004202fc6:	48 8b 10             	mov    (%rax),%rdx
  8004202fc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fcd:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004202fd3:	89 c6                	mov    %eax,%esi
  8004202fd5:	48 bf 58 1d 21 04 80 	movabs $0x8004211d58,%rdi
  8004202fdc:	00 00 00 
  8004202fdf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202fe4:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004202feb:	00 00 00 
  8004202fee:	ff d1                	callq  *%rcx
                "va %08x\n", env->env_id, user_mem_check_addr);
        env_destroy(env);  // may not return
  8004202ff0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff4:	48 89 c7             	mov    %rax,%rdi
  8004202ff7:	48 b8 1b 74 20 04 80 	movabs $0x800420741b,%rax
  8004202ffe:	00 00 00 
  8004203001:	ff d0                	callq  *%rax
    }
}
  8004203003:	c9                   	leaveq 
  8004203004:	c3                   	retq   

0000008004203005 <check_page_free_list>:
// Check that the pages on the page_free_list are reasonable.
//

static void
check_page_free_list(bool only_low_memory)
{
  8004203005:	55                   	push   %rbp
  8004203006:	48 89 e5             	mov    %rsp,%rbp
  8004203009:	48 83 ec 60          	sub    $0x60,%rsp
  800420300d:	89 f8                	mov    %edi,%eax
  800420300f:	88 45 ac             	mov    %al,-0x54(%rbp)
    struct PageInfo *pp;
    unsigned pdx_limit = only_low_memory ? 1 : NPDENTRIES;
  8004203012:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004203016:	74 07                	je     800420301f <check_page_free_list+0x1a>
  8004203018:	b8 01 00 00 00       	mov    $0x1,%eax
  800420301d:	eb 05                	jmp    8004203024 <check_page_free_list+0x1f>
  800420301f:	b8 00 02 00 00       	mov    $0x200,%eax
  8004203024:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    uint64_t nfree_basemem = 0, nfree_extmem = 0;
  8004203027:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420302e:	00 
  800420302f:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004203036:	00 
    void *first_free_page;

    if (!page_free_list)
  8004203037:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  800420303e:	00 00 00 
  8004203041:	48 8b 00             	mov    (%rax),%rax
  8004203044:	48 85 c0             	test   %rax,%rax
  8004203047:	75 2a                	jne    8004203073 <check_page_free_list+0x6e>
        panic("'page_free_list' is a null pointer!");
  8004203049:	48 ba 90 1d 21 04 80 	movabs $0x8004211d90,%rdx
  8004203050:	00 00 00 
  8004203053:	be 1c 03 00 00       	mov    $0x31c,%esi
  8004203058:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420305f:	00 00 00 
  8004203062:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203067:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  800420306e:	00 00 00 
  8004203071:	ff d1                	callq  *%rcx

    if (only_low_memory) {
  8004203073:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004203077:	0f 84 a9 00 00 00    	je     8004203126 <check_page_free_list+0x121>
        // Move pages with lower addresses first in the free
        // list, since entry_pgdir does not map all pages.
        struct PageInfo *pp1, *pp2;
        struct PageInfo **tp[2] = { &pp1, &pp2 };
  800420307d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004203081:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004203085:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  8004203089:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        for (pp = page_free_list; pp; pp = pp->pp_link) {
  800420308d:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004203094:	00 00 00 
  8004203097:	48 8b 00             	mov    (%rax),%rax
  800420309a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420309e:	eb 58                	jmp    80042030f8 <check_page_free_list+0xf3>
            int pagetype = PDX(page2pa(pp)) >= pdx_limit;
  80042030a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030a4:	48 89 c7             	mov    %rax,%rdi
  80042030a7:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  80042030ae:	00 00 00 
  80042030b1:	ff d0                	callq  *%rax
  80042030b3:	48 c1 e8 15          	shr    $0x15,%rax
  80042030b7:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030bc:	48 89 c2             	mov    %rax,%rdx
  80042030bf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042030c2:	48 39 c2             	cmp    %rax,%rdx
  80042030c5:	0f 93 c0             	setae  %al
  80042030c8:	0f b6 c0             	movzbl %al,%eax
  80042030cb:	89 45 e0             	mov    %eax,-0x20(%rbp)
            *tp[pagetype] = pp;
  80042030ce:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042030d1:	48 98                	cltq   
  80042030d3:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042030d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042030dc:	48 89 10             	mov    %rdx,(%rax)
            tp[pagetype] = &pp->pp_link;
  80042030df:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042030e3:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042030e6:	48 98                	cltq   
  80042030e8:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
    if (only_low_memory) {
        // Move pages with lower addresses first in the free
        // list, since entry_pgdir does not map all pages.
        struct PageInfo *pp1, *pp2;
        struct PageInfo **tp[2] = { &pp1, &pp2 };
        for (pp = page_free_list; pp; pp = pp->pp_link) {
  80042030ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030f1:	48 8b 00             	mov    (%rax),%rax
  80042030f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042030f8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042030fd:	75 a1                	jne    80042030a0 <check_page_free_list+0x9b>
            int pagetype = PDX(page2pa(pp)) >= pdx_limit;
            *tp[pagetype] = pp;
            tp[pagetype] = &pp->pp_link;
        }
        *tp[1] = 0;
  80042030ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203103:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        *tp[0] = pp2;
  800420310a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420310e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203112:	48 89 10             	mov    %rdx,(%rax)
        page_free_list = pp1;
  8004203115:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203119:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004203120:	00 00 00 
  8004203123:	48 89 10             	mov    %rdx,(%rax)
    }

    // if there's a page that shouldn't be on the free list,
    // try to make sure it eventually causes trouble.
    for (pp = page_free_list; pp; pp = pp->pp_link)
  8004203126:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  800420312d:	00 00 00 
  8004203130:	48 8b 00             	mov    (%rax),%rax
  8004203133:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203137:	eb 5e                	jmp    8004203197 <check_page_free_list+0x192>
        if (PDX(page2pa(pp)) < pdx_limit)
  8004203139:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420313d:	48 89 c7             	mov    %rax,%rdi
  8004203140:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004203147:	00 00 00 
  800420314a:	ff d0                	callq  *%rax
  800420314c:	48 c1 e8 15          	shr    $0x15,%rax
  8004203150:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203155:	48 89 c2             	mov    %rax,%rdx
  8004203158:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420315b:	48 39 c2             	cmp    %rax,%rdx
  800420315e:	73 2c                	jae    800420318c <check_page_free_list+0x187>
            memset(page2kva(pp), 0x97, 128);
  8004203160:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203164:	48 89 c7             	mov    %rax,%rdi
  8004203167:	48 b8 0d 14 20 04 80 	movabs $0x800420140d,%rax
  800420316e:	00 00 00 
  8004203171:	ff d0                	callq  *%rax
  8004203173:	ba 80 00 00 00       	mov    $0x80,%edx
  8004203178:	be 97 00 00 00       	mov    $0x97,%esi
  800420317d:	48 89 c7             	mov    %rax,%rdi
  8004203180:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  8004203187:	00 00 00 
  800420318a:	ff d0                	callq  *%rax
        page_free_list = pp1;
    }

    // if there's a page that shouldn't be on the free list,
    // try to make sure it eventually causes trouble.
    for (pp = page_free_list; pp; pp = pp->pp_link)
  800420318c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203190:	48 8b 00             	mov    (%rax),%rax
  8004203193:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203197:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420319c:	75 9b                	jne    8004203139 <check_page_free_list+0x134>
        if (PDX(page2pa(pp)) < pdx_limit)
            memset(page2kva(pp), 0x97, 128);

    first_free_page = boot_alloc(0);
  800420319e:	bf 00 00 00 00       	mov    $0x0,%edi
  80042031a3:	48 b8 36 1d 20 04 80 	movabs $0x8004201d36,%rax
  80042031aa:	00 00 00 
  80042031ad:	ff d0                	callq  *%rax
  80042031af:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    for (pp = page_free_list; pp; pp = pp->pp_link) {
  80042031b3:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  80042031ba:	00 00 00 
  80042031bd:	48 8b 00             	mov    (%rax),%rax
  80042031c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042031c4:	e9 d0 02 00 00       	jmpq   8004203499 <check_page_free_list+0x494>
        // check that we didn't corrupt the free list itself
        assert(pp >= pages);
  80042031c9:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  80042031d0:	00 00 00 
  80042031d3:	48 8b 00             	mov    (%rax),%rax
  80042031d6:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042031da:	73 35                	jae    8004203211 <check_page_free_list+0x20c>
  80042031dc:	48 b9 b4 1d 21 04 80 	movabs $0x8004211db4,%rcx
  80042031e3:	00 00 00 
  80042031e6:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042031ed:	00 00 00 
  80042031f0:	be 36 03 00 00       	mov    $0x336,%esi
  80042031f5:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042031fc:	00 00 00 
  80042031ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203204:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420320b:	00 00 00 
  800420320e:	41 ff d0             	callq  *%r8
        assert(pp < pages + npages);
  8004203211:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004203218:	00 00 00 
  800420321b:	48 8b 10             	mov    (%rax),%rdx
  800420321e:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004203225:	00 00 00 
  8004203228:	48 8b 00             	mov    (%rax),%rax
  800420322b:	48 c1 e0 04          	shl    $0x4,%rax
  800420322f:	48 01 d0             	add    %rdx,%rax
  8004203232:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004203236:	77 35                	ja     800420326d <check_page_free_list+0x268>
  8004203238:	48 b9 c0 1d 21 04 80 	movabs $0x8004211dc0,%rcx
  800420323f:	00 00 00 
  8004203242:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203249:	00 00 00 
  800420324c:	be 37 03 00 00       	mov    $0x337,%esi
  8004203251:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203258:	00 00 00 
  800420325b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203260:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203267:	00 00 00 
  800420326a:	41 ff d0             	callq  *%r8
        assert(((char *) pp - (char *) pages) % sizeof(*pp) == 0);
  800420326d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203271:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004203278:	00 00 00 
  800420327b:	48 8b 00             	mov    (%rax),%rax
  800420327e:	48 29 c2             	sub    %rax,%rdx
  8004203281:	48 89 d0             	mov    %rdx,%rax
  8004203284:	83 e0 0f             	and    $0xf,%eax
  8004203287:	48 85 c0             	test   %rax,%rax
  800420328a:	74 35                	je     80042032c1 <check_page_free_list+0x2bc>
  800420328c:	48 b9 d8 1d 21 04 80 	movabs $0x8004211dd8,%rcx
  8004203293:	00 00 00 
  8004203296:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420329d:	00 00 00 
  80042032a0:	be 38 03 00 00       	mov    $0x338,%esi
  80042032a5:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042032ac:	00 00 00 
  80042032af:	b8 00 00 00 00       	mov    $0x0,%eax
  80042032b4:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042032bb:	00 00 00 
  80042032be:	41 ff d0             	callq  *%r8


// check a few pages that shouldn't be on the free list
        assert(page2pa(pp) != 0);
  80042032c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042032c5:	48 89 c7             	mov    %rax,%rdi
  80042032c8:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  80042032cf:	00 00 00 
  80042032d2:	ff d0                	callq  *%rax
  80042032d4:	48 85 c0             	test   %rax,%rax
  80042032d7:	75 35                	jne    800420330e <check_page_free_list+0x309>
  80042032d9:	48 b9 0a 1e 21 04 80 	movabs $0x8004211e0a,%rcx
  80042032e0:	00 00 00 
  80042032e3:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042032ea:	00 00 00 
  80042032ed:	be 3c 03 00 00       	mov    $0x33c,%esi
  80042032f2:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042032f9:	00 00 00 
  80042032fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203301:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203308:	00 00 00 
  800420330b:	41 ff d0             	callq  *%r8
        assert(page2pa(pp) != IOPHYSMEM);
  800420330e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203312:	48 89 c7             	mov    %rax,%rdi
  8004203315:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  800420331c:	00 00 00 
  800420331f:	ff d0                	callq  *%rax
  8004203321:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004203327:	75 35                	jne    800420335e <check_page_free_list+0x359>
  8004203329:	48 b9 1b 1e 21 04 80 	movabs $0x8004211e1b,%rcx
  8004203330:	00 00 00 
  8004203333:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420333a:	00 00 00 
  800420333d:	be 3d 03 00 00       	mov    $0x33d,%esi
  8004203342:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203349:	00 00 00 
  800420334c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203351:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203358:	00 00 00 
  800420335b:	41 ff d0             	callq  *%r8
        assert(page2pa(pp) != EXTPHYSMEM - PGSIZE);
  800420335e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203362:	48 89 c7             	mov    %rax,%rdi
  8004203365:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  800420336c:	00 00 00 
  800420336f:	ff d0                	callq  *%rax
  8004203371:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004203377:	75 35                	jne    80042033ae <check_page_free_list+0x3a9>
  8004203379:	48 b9 38 1e 21 04 80 	movabs $0x8004211e38,%rcx
  8004203380:	00 00 00 
  8004203383:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420338a:	00 00 00 
  800420338d:	be 3e 03 00 00       	mov    $0x33e,%esi
  8004203392:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203399:	00 00 00 
  800420339c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033a1:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042033a8:	00 00 00 
  80042033ab:	41 ff d0             	callq  *%r8
        assert(page2pa(pp) != EXTPHYSMEM);
  80042033ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042033b2:	48 89 c7             	mov    %rax,%rdi
  80042033b5:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  80042033bc:	00 00 00 
  80042033bf:	ff d0                	callq  *%rax
  80042033c1:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042033c7:	75 35                	jne    80042033fe <check_page_free_list+0x3f9>
  80042033c9:	48 b9 5b 1e 21 04 80 	movabs $0x8004211e5b,%rcx
  80042033d0:	00 00 00 
  80042033d3:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042033da:	00 00 00 
  80042033dd:	be 3f 03 00 00       	mov    $0x33f,%esi
  80042033e2:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042033e9:	00 00 00 
  80042033ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033f1:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042033f8:	00 00 00 
  80042033fb:	41 ff d0             	callq  *%r8
        assert(page2pa(pp) < EXTPHYSMEM || page2kva(pp) >= first_free_page);
  80042033fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203402:	48 89 c7             	mov    %rax,%rdi
  8004203405:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  800420340c:	00 00 00 
  800420340f:	ff d0                	callq  *%rax
  8004203411:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  8004203417:	76 4e                	jbe    8004203467 <check_page_free_list+0x462>
  8004203419:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420341d:	48 89 c7             	mov    %rax,%rdi
  8004203420:	48 b8 0d 14 20 04 80 	movabs $0x800420140d,%rax
  8004203427:	00 00 00 
  800420342a:	ff d0                	callq  *%rax
  800420342c:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004203430:	73 35                	jae    8004203467 <check_page_free_list+0x462>
  8004203432:	48 b9 78 1e 21 04 80 	movabs $0x8004211e78,%rcx
  8004203439:	00 00 00 
  800420343c:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203443:	00 00 00 
  8004203446:	be 40 03 00 00       	mov    $0x340,%esi
  800420344b:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203452:	00 00 00 
  8004203455:	b8 00 00 00 00       	mov    $0x0,%eax
  800420345a:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203461:	00 00 00 
  8004203464:	41 ff d0             	callq  *%r8

        if (page2pa(pp) < EXTPHYSMEM)
  8004203467:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420346b:	48 89 c7             	mov    %rax,%rdi
  800420346e:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004203475:	00 00 00 
  8004203478:	ff d0                	callq  *%rax
  800420347a:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  8004203480:	77 07                	ja     8004203489 <check_page_free_list+0x484>
            ++nfree_basemem;
  8004203482:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004203487:	eb 05                	jmp    800420348e <check_page_free_list+0x489>
        else
            ++nfree_extmem;
  8004203489:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    for (pp = page_free_list; pp; pp = pp->pp_link)
        if (PDX(page2pa(pp)) < pdx_limit)
            memset(page2kva(pp), 0x97, 128);

    first_free_page = boot_alloc(0);
    for (pp = page_free_list; pp; pp = pp->pp_link) {
  800420348e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203492:	48 8b 00             	mov    (%rax),%rax
  8004203495:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203499:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420349e:	0f 85 25 fd ff ff    	jne    80042031c9 <check_page_free_list+0x1c4>
            ++nfree_basemem;
        else
            ++nfree_extmem;
    }

    assert(nfree_extmem > 0);
  80042034a4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042034a9:	75 35                	jne    80042034e0 <check_page_free_list+0x4db>
  80042034ab:	48 b9 b4 1e 21 04 80 	movabs $0x8004211eb4,%rcx
  80042034b2:	00 00 00 
  80042034b5:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042034bc:	00 00 00 
  80042034bf:	be 48 03 00 00       	mov    $0x348,%esi
  80042034c4:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042034cb:	00 00 00 
  80042034ce:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034d3:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042034da:	00 00 00 
  80042034dd:	41 ff d0             	callq  *%r8
}
  80042034e0:	c9                   	leaveq 
  80042034e1:	c3                   	retq   

00000080042034e2 <check_page_alloc>:
// Check the physical page allocator (page_alloc(), page_free(),
// and page_init()).
//
static void
check_page_alloc(void)
{
  80042034e2:	55                   	push   %rbp
  80042034e3:	48 89 e5             	mov    %rsp,%rbp
  80042034e6:	48 83 ec 40          	sub    $0x40,%rsp
    int i;

    // if there's a page that shouldn't be on
    // the free list, try to make sure it
    // eventually causes trouble.
    for (pp0 = page_free_list, nfree = 0; pp0; pp0 = pp0->pp_link) {
  80042034ea:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  80042034f1:	00 00 00 
  80042034f4:	48 8b 00             	mov    (%rax),%rax
  80042034f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042034fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004203502:	eb 37                	jmp    800420353b <check_page_alloc+0x59>
        memset(page2kva(pp0), 0x97, PGSIZE);
  8004203504:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203508:	48 89 c7             	mov    %rax,%rdi
  800420350b:	48 b8 0d 14 20 04 80 	movabs $0x800420140d,%rax
  8004203512:	00 00 00 
  8004203515:	ff d0                	callq  *%rax
  8004203517:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420351c:	be 97 00 00 00       	mov    $0x97,%esi
  8004203521:	48 89 c7             	mov    %rax,%rdi
  8004203524:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420352b:	00 00 00 
  800420352e:	ff d0                	callq  *%rax
    int i;

    // if there's a page that shouldn't be on
    // the free list, try to make sure it
    // eventually causes trouble.
    for (pp0 = page_free_list, nfree = 0; pp0; pp0 = pp0->pp_link) {
  8004203530:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203534:	48 8b 00             	mov    (%rax),%rax
  8004203537:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420353b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203540:	75 c2                	jne    8004203504 <check_page_alloc+0x22>
        memset(page2kva(pp0), 0x97, PGSIZE);
    }

    for (pp0 = page_free_list, nfree = 0; pp0; pp0 = pp0->pp_link) {
  8004203542:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004203549:	00 00 00 
  800420354c:	48 8b 00             	mov    (%rax),%rax
  800420354f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203553:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420355a:	e9 ec 01 00 00       	jmpq   800420374b <check_page_alloc+0x269>
        // check that we didn't corrupt the free list itself
        assert(pp0 >= pages);
  800420355f:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004203566:	00 00 00 
  8004203569:	48 8b 00             	mov    (%rax),%rax
  800420356c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004203570:	73 35                	jae    80042035a7 <check_page_alloc+0xc5>
  8004203572:	48 b9 c5 1e 21 04 80 	movabs $0x8004211ec5,%rcx
  8004203579:	00 00 00 
  800420357c:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203583:	00 00 00 
  8004203586:	be 62 03 00 00       	mov    $0x362,%esi
  800420358b:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203592:	00 00 00 
  8004203595:	b8 00 00 00 00       	mov    $0x0,%eax
  800420359a:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042035a1:	00 00 00 
  80042035a4:	41 ff d0             	callq  *%r8
        assert(pp0 < pages + npages);
  80042035a7:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  80042035ae:	00 00 00 
  80042035b1:	48 8b 10             	mov    (%rax),%rdx
  80042035b4:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042035bb:	00 00 00 
  80042035be:	48 8b 00             	mov    (%rax),%rax
  80042035c1:	48 c1 e0 04          	shl    $0x4,%rax
  80042035c5:	48 01 d0             	add    %rdx,%rax
  80042035c8:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042035cc:	77 35                	ja     8004203603 <check_page_alloc+0x121>
  80042035ce:	48 b9 d2 1e 21 04 80 	movabs $0x8004211ed2,%rcx
  80042035d5:	00 00 00 
  80042035d8:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042035df:	00 00 00 
  80042035e2:	be 63 03 00 00       	mov    $0x363,%esi
  80042035e7:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042035ee:	00 00 00 
  80042035f1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042035f6:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042035fd:	00 00 00 
  8004203600:	41 ff d0             	callq  *%r8

        // check a few pages that shouldn't be on the free list
        assert(page2pa(pp0) != 0);
  8004203603:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203607:	48 89 c7             	mov    %rax,%rdi
  800420360a:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004203611:	00 00 00 
  8004203614:	ff d0                	callq  *%rax
  8004203616:	48 85 c0             	test   %rax,%rax
  8004203619:	75 35                	jne    8004203650 <check_page_alloc+0x16e>
  800420361b:	48 b9 e7 1e 21 04 80 	movabs $0x8004211ee7,%rcx
  8004203622:	00 00 00 
  8004203625:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420362c:	00 00 00 
  800420362f:	be 66 03 00 00       	mov    $0x366,%esi
  8004203634:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420363b:	00 00 00 
  800420363e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203643:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420364a:	00 00 00 
  800420364d:	41 ff d0             	callq  *%r8
        assert(page2pa(pp0) != IOPHYSMEM);
  8004203650:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203654:	48 89 c7             	mov    %rax,%rdi
  8004203657:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  800420365e:	00 00 00 
  8004203661:	ff d0                	callq  *%rax
  8004203663:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004203669:	75 35                	jne    80042036a0 <check_page_alloc+0x1be>
  800420366b:	48 b9 f9 1e 21 04 80 	movabs $0x8004211ef9,%rcx
  8004203672:	00 00 00 
  8004203675:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420367c:	00 00 00 
  800420367f:	be 67 03 00 00       	mov    $0x367,%esi
  8004203684:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420368b:	00 00 00 
  800420368e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203693:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420369a:	00 00 00 
  800420369d:	41 ff d0             	callq  *%r8
        assert(page2pa(pp0) != EXTPHYSMEM - PGSIZE);
  80042036a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042036a4:	48 89 c7             	mov    %rax,%rdi
  80042036a7:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  80042036ae:	00 00 00 
  80042036b1:	ff d0                	callq  *%rax
  80042036b3:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042036b9:	75 35                	jne    80042036f0 <check_page_alloc+0x20e>
  80042036bb:	48 b9 18 1f 21 04 80 	movabs $0x8004211f18,%rcx
  80042036c2:	00 00 00 
  80042036c5:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042036cc:	00 00 00 
  80042036cf:	be 68 03 00 00       	mov    $0x368,%esi
  80042036d4:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042036db:	00 00 00 
  80042036de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042036e3:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042036ea:	00 00 00 
  80042036ed:	41 ff d0             	callq  *%r8
        assert(page2pa(pp0) != EXTPHYSMEM);
  80042036f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042036f4:	48 89 c7             	mov    %rax,%rdi
  80042036f7:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  80042036fe:	00 00 00 
  8004203701:	ff d0                	callq  *%rax
  8004203703:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  8004203709:	75 35                	jne    8004203740 <check_page_alloc+0x25e>
  800420370b:	48 b9 3c 1f 21 04 80 	movabs $0x8004211f3c,%rcx
  8004203712:	00 00 00 
  8004203715:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420371c:	00 00 00 
  800420371f:	be 69 03 00 00       	mov    $0x369,%esi
  8004203724:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420372b:	00 00 00 
  800420372e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203733:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420373a:	00 00 00 
  800420373d:	41 ff d0             	callq  *%r8
    // eventually causes trouble.
    for (pp0 = page_free_list, nfree = 0; pp0; pp0 = pp0->pp_link) {
        memset(page2kva(pp0), 0x97, PGSIZE);
    }

    for (pp0 = page_free_list, nfree = 0; pp0; pp0 = pp0->pp_link) {
  8004203740:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203744:	48 8b 00             	mov    (%rax),%rax
  8004203747:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420374b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203750:	0f 85 09 fe ff ff    	jne    800420355f <check_page_alloc+0x7d>
        assert(page2pa(pp0) != IOPHYSMEM);
        assert(page2pa(pp0) != EXTPHYSMEM - PGSIZE);
        assert(page2pa(pp0) != EXTPHYSMEM);
    }
    // should be able to allocate three pages
    pp0 = pp1 = pp2 = 0;
  8004203756:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420375d:	00 
  800420375e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203762:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203766:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420376a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    assert((pp0 = page_alloc(0)));
  800420376e:	bf 00 00 00 00       	mov    $0x0,%edi
  8004203773:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  800420377a:	00 00 00 
  800420377d:	ff d0                	callq  *%rax
  800420377f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203783:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203788:	75 35                	jne    80042037bf <check_page_alloc+0x2dd>
  800420378a:	48 b9 57 1f 21 04 80 	movabs $0x8004211f57,%rcx
  8004203791:	00 00 00 
  8004203794:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420379b:	00 00 00 
  800420379e:	be 6d 03 00 00       	mov    $0x36d,%esi
  80042037a3:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042037aa:	00 00 00 
  80042037ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042037b2:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042037b9:	00 00 00 
  80042037bc:	41 ff d0             	callq  *%r8
    assert((pp1 = page_alloc(0)));
  80042037bf:	bf 00 00 00 00       	mov    $0x0,%edi
  80042037c4:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  80042037cb:	00 00 00 
  80042037ce:	ff d0                	callq  *%rax
  80042037d0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042037d4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042037d9:	75 35                	jne    8004203810 <check_page_alloc+0x32e>
  80042037db:	48 b9 6d 1f 21 04 80 	movabs $0x8004211f6d,%rcx
  80042037e2:	00 00 00 
  80042037e5:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042037ec:	00 00 00 
  80042037ef:	be 6e 03 00 00       	mov    $0x36e,%esi
  80042037f4:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042037fb:	00 00 00 
  80042037fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203803:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420380a:	00 00 00 
  800420380d:	41 ff d0             	callq  *%r8
    assert((pp2 = page_alloc(0)));
  8004203810:	bf 00 00 00 00       	mov    $0x0,%edi
  8004203815:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  800420381c:	00 00 00 
  800420381f:	ff d0                	callq  *%rax
  8004203821:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203825:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420382a:	75 35                	jne    8004203861 <check_page_alloc+0x37f>
  800420382c:	48 b9 83 1f 21 04 80 	movabs $0x8004211f83,%rcx
  8004203833:	00 00 00 
  8004203836:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420383d:	00 00 00 
  8004203840:	be 6f 03 00 00       	mov    $0x36f,%esi
  8004203845:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420384c:	00 00 00 
  800420384f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203854:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420385b:	00 00 00 
  800420385e:	41 ff d0             	callq  *%r8
    assert(pp0);
  8004203861:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203866:	75 35                	jne    800420389d <check_page_alloc+0x3bb>
  8004203868:	48 b9 99 1f 21 04 80 	movabs $0x8004211f99,%rcx
  800420386f:	00 00 00 
  8004203872:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203879:	00 00 00 
  800420387c:	be 70 03 00 00       	mov    $0x370,%esi
  8004203881:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203888:	00 00 00 
  800420388b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203890:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203897:	00 00 00 
  800420389a:	41 ff d0             	callq  *%r8
    assert(pp1 && pp1 != pp0);
  800420389d:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042038a2:	74 0a                	je     80042038ae <check_page_alloc+0x3cc>
  80042038a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038a8:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042038ac:	75 35                	jne    80042038e3 <check_page_alloc+0x401>
  80042038ae:	48 b9 9d 1f 21 04 80 	movabs $0x8004211f9d,%rcx
  80042038b5:	00 00 00 
  80042038b8:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042038bf:	00 00 00 
  80042038c2:	be 71 03 00 00       	mov    $0x371,%esi
  80042038c7:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042038ce:	00 00 00 
  80042038d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042038d6:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042038dd:	00 00 00 
  80042038e0:	41 ff d0             	callq  *%r8
    assert(pp2 && pp2 != pp1 && pp2 != pp0);
  80042038e3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042038e8:	74 14                	je     80042038fe <check_page_alloc+0x41c>
  80042038ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042038ee:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042038f2:	74 0a                	je     80042038fe <check_page_alloc+0x41c>
  80042038f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042038f8:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042038fc:	75 35                	jne    8004203933 <check_page_alloc+0x451>
  80042038fe:	48 b9 b0 1f 21 04 80 	movabs $0x8004211fb0,%rcx
  8004203905:	00 00 00 
  8004203908:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420390f:	00 00 00 
  8004203912:	be 72 03 00 00       	mov    $0x372,%esi
  8004203917:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420391e:	00 00 00 
  8004203921:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203926:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420392d:	00 00 00 
  8004203930:	41 ff d0             	callq  *%r8
    assert(page2pa(pp0) < npages*PGSIZE);
  8004203933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203937:	48 89 c7             	mov    %rax,%rdi
  800420393a:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004203941:	00 00 00 
  8004203944:	ff d0                	callq  *%rax
  8004203946:	48 ba 68 d6 2b 04 80 	movabs $0x80042bd668,%rdx
  800420394d:	00 00 00 
  8004203950:	48 8b 12             	mov    (%rdx),%rdx
  8004203953:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004203957:	48 39 d0             	cmp    %rdx,%rax
  800420395a:	72 35                	jb     8004203991 <check_page_alloc+0x4af>
  800420395c:	48 b9 d0 1f 21 04 80 	movabs $0x8004211fd0,%rcx
  8004203963:	00 00 00 
  8004203966:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420396d:	00 00 00 
  8004203970:	be 73 03 00 00       	mov    $0x373,%esi
  8004203975:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420397c:	00 00 00 
  800420397f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203984:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420398b:	00 00 00 
  800420398e:	41 ff d0             	callq  *%r8
    assert(page2pa(pp1) < npages*PGSIZE);
  8004203991:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203995:	48 89 c7             	mov    %rax,%rdi
  8004203998:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  800420399f:	00 00 00 
  80042039a2:	ff d0                	callq  *%rax
  80042039a4:	48 ba 68 d6 2b 04 80 	movabs $0x80042bd668,%rdx
  80042039ab:	00 00 00 
  80042039ae:	48 8b 12             	mov    (%rdx),%rdx
  80042039b1:	48 c1 e2 0c          	shl    $0xc,%rdx
  80042039b5:	48 39 d0             	cmp    %rdx,%rax
  80042039b8:	72 35                	jb     80042039ef <check_page_alloc+0x50d>
  80042039ba:	48 b9 ed 1f 21 04 80 	movabs $0x8004211fed,%rcx
  80042039c1:	00 00 00 
  80042039c4:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042039cb:	00 00 00 
  80042039ce:	be 74 03 00 00       	mov    $0x374,%esi
  80042039d3:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042039da:	00 00 00 
  80042039dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042039e2:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042039e9:	00 00 00 
  80042039ec:	41 ff d0             	callq  *%r8
    assert(page2pa(pp2) < npages*PGSIZE);
  80042039ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042039f3:	48 89 c7             	mov    %rax,%rdi
  80042039f6:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  80042039fd:	00 00 00 
  8004203a00:	ff d0                	callq  *%rax
  8004203a02:	48 ba 68 d6 2b 04 80 	movabs $0x80042bd668,%rdx
  8004203a09:	00 00 00 
  8004203a0c:	48 8b 12             	mov    (%rdx),%rdx
  8004203a0f:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004203a13:	48 39 d0             	cmp    %rdx,%rax
  8004203a16:	72 35                	jb     8004203a4d <check_page_alloc+0x56b>
  8004203a18:	48 b9 0a 20 21 04 80 	movabs $0x800421200a,%rcx
  8004203a1f:	00 00 00 
  8004203a22:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203a29:	00 00 00 
  8004203a2c:	be 75 03 00 00       	mov    $0x375,%esi
  8004203a31:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203a38:	00 00 00 
  8004203a3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203a40:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203a47:	00 00 00 
  8004203a4a:	41 ff d0             	callq  *%r8

    // temporarily steal the rest of the free pages
    fl = page_free_list;
  8004203a4d:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004203a54:	00 00 00 
  8004203a57:	48 8b 00             	mov    (%rax),%rax
  8004203a5a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    page_free_list = 0;
  8004203a5e:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004203a65:	00 00 00 
  8004203a68:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

    // should be no free memory
    assert(!page_alloc(0));
  8004203a6f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004203a74:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004203a7b:	00 00 00 
  8004203a7e:	ff d0                	callq  *%rax
  8004203a80:	48 85 c0             	test   %rax,%rax
  8004203a83:	74 35                	je     8004203aba <check_page_alloc+0x5d8>
  8004203a85:	48 b9 27 20 21 04 80 	movabs $0x8004212027,%rcx
  8004203a8c:	00 00 00 
  8004203a8f:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203a96:	00 00 00 
  8004203a99:	be 7c 03 00 00       	mov    $0x37c,%esi
  8004203a9e:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203aa5:	00 00 00 
  8004203aa8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203aad:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203ab4:	00 00 00 
  8004203ab7:	41 ff d0             	callq  *%r8

    // free and re-allocate?
    page_free(pp0);
  8004203aba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203abe:	48 89 c7             	mov    %rax,%rdi
  8004203ac1:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004203ac8:	00 00 00 
  8004203acb:	ff d0                	callq  *%rax
    page_free(pp1);
  8004203acd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ad1:	48 89 c7             	mov    %rax,%rdi
  8004203ad4:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004203adb:	00 00 00 
  8004203ade:	ff d0                	callq  *%rax
    page_free(pp2);
  8004203ae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203ae4:	48 89 c7             	mov    %rax,%rdi
  8004203ae7:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004203aee:	00 00 00 
  8004203af1:	ff d0                	callq  *%rax
    pp0 = pp1 = pp2 = 0;
  8004203af3:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004203afa:	00 
  8004203afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203aff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b07:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    assert((pp0 = page_alloc(0)));
  8004203b0b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004203b10:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004203b17:	00 00 00 
  8004203b1a:	ff d0                	callq  *%rax
  8004203b1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203b20:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203b25:	75 35                	jne    8004203b5c <check_page_alloc+0x67a>
  8004203b27:	48 b9 57 1f 21 04 80 	movabs $0x8004211f57,%rcx
  8004203b2e:	00 00 00 
  8004203b31:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203b38:	00 00 00 
  8004203b3b:	be 83 03 00 00       	mov    $0x383,%esi
  8004203b40:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203b47:	00 00 00 
  8004203b4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b4f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203b56:	00 00 00 
  8004203b59:	41 ff d0             	callq  *%r8
    assert((pp1 = page_alloc(0)));
  8004203b5c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004203b61:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004203b68:	00 00 00 
  8004203b6b:	ff d0                	callq  *%rax
  8004203b6d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b71:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203b76:	75 35                	jne    8004203bad <check_page_alloc+0x6cb>
  8004203b78:	48 b9 6d 1f 21 04 80 	movabs $0x8004211f6d,%rcx
  8004203b7f:	00 00 00 
  8004203b82:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203b89:	00 00 00 
  8004203b8c:	be 84 03 00 00       	mov    $0x384,%esi
  8004203b91:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203b98:	00 00 00 
  8004203b9b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ba0:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203ba7:	00 00 00 
  8004203baa:	41 ff d0             	callq  *%r8
    assert((pp2 = page_alloc(0)));
  8004203bad:	bf 00 00 00 00       	mov    $0x0,%edi
  8004203bb2:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004203bb9:	00 00 00 
  8004203bbc:	ff d0                	callq  *%rax
  8004203bbe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203bc2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203bc7:	75 35                	jne    8004203bfe <check_page_alloc+0x71c>
  8004203bc9:	48 b9 83 1f 21 04 80 	movabs $0x8004211f83,%rcx
  8004203bd0:	00 00 00 
  8004203bd3:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203bda:	00 00 00 
  8004203bdd:	be 85 03 00 00       	mov    $0x385,%esi
  8004203be2:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203be9:	00 00 00 
  8004203bec:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203bf1:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203bf8:	00 00 00 
  8004203bfb:	41 ff d0             	callq  *%r8
    assert(pp0);
  8004203bfe:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203c03:	75 35                	jne    8004203c3a <check_page_alloc+0x758>
  8004203c05:	48 b9 99 1f 21 04 80 	movabs $0x8004211f99,%rcx
  8004203c0c:	00 00 00 
  8004203c0f:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203c16:	00 00 00 
  8004203c19:	be 86 03 00 00       	mov    $0x386,%esi
  8004203c1e:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203c25:	00 00 00 
  8004203c28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c2d:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203c34:	00 00 00 
  8004203c37:	41 ff d0             	callq  *%r8
    assert(pp1 && pp1 != pp0);
  8004203c3a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203c3f:	74 0a                	je     8004203c4b <check_page_alloc+0x769>
  8004203c41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203c45:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004203c49:	75 35                	jne    8004203c80 <check_page_alloc+0x79e>
  8004203c4b:	48 b9 9d 1f 21 04 80 	movabs $0x8004211f9d,%rcx
  8004203c52:	00 00 00 
  8004203c55:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203c5c:	00 00 00 
  8004203c5f:	be 87 03 00 00       	mov    $0x387,%esi
  8004203c64:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203c6b:	00 00 00 
  8004203c6e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c73:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203c7a:	00 00 00 
  8004203c7d:	41 ff d0             	callq  *%r8
    assert(pp2 && pp2 != pp1 && pp2 != pp0);
  8004203c80:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203c85:	74 14                	je     8004203c9b <check_page_alloc+0x7b9>
  8004203c87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203c8b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004203c8f:	74 0a                	je     8004203c9b <check_page_alloc+0x7b9>
  8004203c91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203c95:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004203c99:	75 35                	jne    8004203cd0 <check_page_alloc+0x7ee>
  8004203c9b:	48 b9 b0 1f 21 04 80 	movabs $0x8004211fb0,%rcx
  8004203ca2:	00 00 00 
  8004203ca5:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203cac:	00 00 00 
  8004203caf:	be 88 03 00 00       	mov    $0x388,%esi
  8004203cb4:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203cbb:	00 00 00 
  8004203cbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203cc3:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203cca:	00 00 00 
  8004203ccd:	41 ff d0             	callq  *%r8
    assert(!page_alloc(0));
  8004203cd0:	bf 00 00 00 00       	mov    $0x0,%edi
  8004203cd5:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004203cdc:	00 00 00 
  8004203cdf:	ff d0                	callq  *%rax
  8004203ce1:	48 85 c0             	test   %rax,%rax
  8004203ce4:	74 35                	je     8004203d1b <check_page_alloc+0x839>
  8004203ce6:	48 b9 27 20 21 04 80 	movabs $0x8004212027,%rcx
  8004203ced:	00 00 00 
  8004203cf0:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203cf7:	00 00 00 
  8004203cfa:	be 89 03 00 00       	mov    $0x389,%esi
  8004203cff:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203d06:	00 00 00 
  8004203d09:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d0e:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203d15:	00 00 00 
  8004203d18:	41 ff d0             	callq  *%r8

    // test flags
    memset(page2kva(pp0), 1, PGSIZE);
  8004203d1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d1f:	48 89 c7             	mov    %rax,%rdi
  8004203d22:	48 b8 0d 14 20 04 80 	movabs $0x800420140d,%rax
  8004203d29:	00 00 00 
  8004203d2c:	ff d0                	callq  *%rax
  8004203d2e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004203d33:	be 01 00 00 00       	mov    $0x1,%esi
  8004203d38:	48 89 c7             	mov    %rax,%rdi
  8004203d3b:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  8004203d42:	00 00 00 
  8004203d45:	ff d0                	callq  *%rax
    page_free(pp0);
  8004203d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d4b:	48 89 c7             	mov    %rax,%rdi
  8004203d4e:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004203d55:	00 00 00 
  8004203d58:	ff d0                	callq  *%rax
    assert((pp = page_alloc(ALLOC_ZERO)));
  8004203d5a:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203d5f:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004203d66:	00 00 00 
  8004203d69:	ff d0                	callq  *%rax
  8004203d6b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203d6f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004203d74:	75 35                	jne    8004203dab <check_page_alloc+0x8c9>
  8004203d76:	48 b9 36 20 21 04 80 	movabs $0x8004212036,%rcx
  8004203d7d:	00 00 00 
  8004203d80:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203d87:	00 00 00 
  8004203d8a:	be 8e 03 00 00       	mov    $0x38e,%esi
  8004203d8f:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203d96:	00 00 00 
  8004203d99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d9e:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203da5:	00 00 00 
  8004203da8:	41 ff d0             	callq  *%r8
    assert(pp && pp0 == pp);
  8004203dab:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004203db0:	74 0a                	je     8004203dbc <check_page_alloc+0x8da>
  8004203db2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203db6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004203dba:	74 35                	je     8004203df1 <check_page_alloc+0x90f>
  8004203dbc:	48 b9 54 20 21 04 80 	movabs $0x8004212054,%rcx
  8004203dc3:	00 00 00 
  8004203dc6:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203dcd:	00 00 00 
  8004203dd0:	be 8f 03 00 00       	mov    $0x38f,%esi
  8004203dd5:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203ddc:	00 00 00 
  8004203ddf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203de4:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203deb:	00 00 00 
  8004203dee:	41 ff d0             	callq  *%r8
    c = page2kva(pp);
  8004203df1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203df5:	48 89 c7             	mov    %rax,%rdi
  8004203df8:	48 b8 0d 14 20 04 80 	movabs $0x800420140d,%rax
  8004203dff:	00 00 00 
  8004203e02:	ff d0                	callq  *%rax
  8004203e04:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    for (i = 0; i < PGSIZE; i++)
  8004203e08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004203e0f:	eb 4d                	jmp    8004203e5e <check_page_alloc+0x97c>
        assert(c[i] == 0);
  8004203e11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004203e14:	48 63 d0             	movslq %eax,%rdx
  8004203e17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203e1b:	48 01 d0             	add    %rdx,%rax
  8004203e1e:	0f b6 00             	movzbl (%rax),%eax
  8004203e21:	84 c0                	test   %al,%al
  8004203e23:	74 35                	je     8004203e5a <check_page_alloc+0x978>
  8004203e25:	48 b9 64 20 21 04 80 	movabs $0x8004212064,%rcx
  8004203e2c:	00 00 00 
  8004203e2f:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203e36:	00 00 00 
  8004203e39:	be 92 03 00 00       	mov    $0x392,%esi
  8004203e3e:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203e45:	00 00 00 
  8004203e48:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e4d:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203e54:	00 00 00 
  8004203e57:	41 ff d0             	callq  *%r8
    memset(page2kva(pp0), 1, PGSIZE);
    page_free(pp0);
    assert((pp = page_alloc(ALLOC_ZERO)));
    assert(pp && pp0 == pp);
    c = page2kva(pp);
    for (i = 0; i < PGSIZE; i++)
  8004203e5a:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004203e5e:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  8004203e65:	7e aa                	jle    8004203e11 <check_page_alloc+0x92f>
        assert(c[i] == 0);

    // give free list back
    page_free_list = fl;
  8004203e67:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004203e6e:	00 00 00 
  8004203e71:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004203e75:	48 89 10             	mov    %rdx,(%rax)

    // free the pages we took
    page_free(pp0);
  8004203e78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e7c:	48 89 c7             	mov    %rax,%rdi
  8004203e7f:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004203e86:	00 00 00 
  8004203e89:	ff d0                	callq  *%rax
    page_free(pp1);
  8004203e8b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203e8f:	48 89 c7             	mov    %rax,%rdi
  8004203e92:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004203e99:	00 00 00 
  8004203e9c:	ff d0                	callq  *%rax
    page_free(pp2);
  8004203e9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203ea2:	48 89 c7             	mov    %rax,%rdi
  8004203ea5:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004203eac:	00 00 00 
  8004203eaf:	ff d0                	callq  *%rax

    cprintf("check_page_alloc() succeeded!\n");
  8004203eb1:	48 bf 70 20 21 04 80 	movabs $0x8004212070,%rdi
  8004203eb8:	00 00 00 
  8004203ebb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ec0:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004203ec7:	00 00 00 
  8004203eca:	ff d2                	callq  *%rdx
}
  8004203ecc:	c9                   	leaveq 
  8004203ecd:	c3                   	retq   

0000008004203ece <check_boot_pml4e>:
// but it is a pretty good sanity check.
//

static void
check_boot_pml4e(pml4e_t *pml4e)
{
  8004203ece:	55                   	push   %rbp
  8004203ecf:	48 89 e5             	mov    %rsp,%rbp
  8004203ed2:	53                   	push   %rbx
  8004203ed3:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  8004203eda:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
    uint64_t i, n;

    pml4e = boot_pml4e;
  8004203ee1:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004203ee8:	00 00 00 
  8004203eeb:	48 8b 00             	mov    (%rax),%rax
  8004203eee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    // check pages array
    n = ROUNDUP(npages*sizeof(struct PageInfo), PGSIZE);
  8004203ef2:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  8004203ef9:	00 
  8004203efa:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004203f01:	00 00 00 
  8004203f04:	48 8b 00             	mov    (%rax),%rax
  8004203f07:	48 c1 e0 04          	shl    $0x4,%rax
  8004203f0b:	48 89 c2             	mov    %rax,%rdx
  8004203f0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203f12:	48 01 d0             	add    %rdx,%rax
  8004203f15:	48 83 e8 01          	sub    $0x1,%rax
  8004203f19:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203f1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203f21:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f26:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004203f2a:	48 89 d0             	mov    %rdx,%rax
  8004203f2d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f31:	48 29 c2             	sub    %rax,%rdx
  8004203f34:	48 89 d0             	mov    %rdx,%rax
  8004203f37:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    for (i = 0; i < n; i += PGSIZE) {
  8004203f3b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004203f42:	00 
  8004203f43:	e9 d4 00 00 00       	jmpq   800420401c <check_boot_pml4e+0x14e>
        // cprintf("%x %x %x\n",i,check_va2pa(pml4e, UPAGES + i), PADDR(pages) + i);
        assert(check_va2pa(pml4e, UPAGES + i) == PADDR(pages) + i);
  8004203f48:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  8004203f4f:	00 00 00 
  8004203f52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f56:	48 01 c2             	add    %rax,%rdx
  8004203f59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f5d:	48 89 d6             	mov    %rdx,%rsi
  8004203f60:	48 89 c7             	mov    %rax,%rdi
  8004203f63:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  8004203f6a:	00 00 00 
  8004203f6d:	ff d0                	callq  *%rax
  8004203f6f:	48 ba 70 d6 2b 04 80 	movabs $0x80042bd670,%rdx
  8004203f76:	00 00 00 
  8004203f79:	48 8b 12             	mov    (%rdx),%rdx
  8004203f7c:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004203f80:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  8004203f87:	00 00 00 
  8004203f8a:	48 39 55 c0          	cmp    %rdx,-0x40(%rbp)
  8004203f8e:	77 32                	ja     8004203fc2 <check_boot_pml4e+0xf4>
  8004203f90:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203f94:	48 89 c1             	mov    %rax,%rcx
  8004203f97:	48 ba e8 1c 21 04 80 	movabs $0x8004211ce8,%rdx
  8004203f9e:	00 00 00 
  8004203fa1:	be b2 03 00 00       	mov    $0x3b2,%esi
  8004203fa6:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203fad:	00 00 00 
  8004203fb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fb5:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004203fbc:	00 00 00 
  8004203fbf:	41 ff d0             	callq  *%r8
  8004203fc2:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004203fc9:	ff ff ff 
  8004203fcc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004203fd0:	48 01 d1             	add    %rdx,%rcx
  8004203fd3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203fd7:	48 01 ca             	add    %rcx,%rdx
  8004203fda:	48 39 d0             	cmp    %rdx,%rax
  8004203fdd:	74 35                	je     8004204014 <check_boot_pml4e+0x146>
  8004203fdf:	48 b9 90 20 21 04 80 	movabs $0x8004212090,%rcx
  8004203fe6:	00 00 00 
  8004203fe9:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004203ff0:	00 00 00 
  8004203ff3:	be b2 03 00 00       	mov    $0x3b2,%esi
  8004203ff8:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004203fff:	00 00 00 
  8004204002:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204007:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420400e:	00 00 00 
  8004204011:	41 ff d0             	callq  *%r8

    pml4e = boot_pml4e;

    // check pages array
    n = ROUNDUP(npages*sizeof(struct PageInfo), PGSIZE);
    for (i = 0; i < n; i += PGSIZE) {
  8004204014:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800420401b:	00 
  800420401c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204020:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004204024:	0f 82 1e ff ff ff    	jb     8004203f48 <check_boot_pml4e+0x7a>
        // cprintf("%x %x %x\n",i,check_va2pa(pml4e, UPAGES + i), PADDR(pages) + i);
        assert(check_va2pa(pml4e, UPAGES + i) == PADDR(pages) + i);
    }

    // check envs array (new test for lab 3)
    n = ROUNDUP(NENV*sizeof(struct Env), PGSIZE);
  800420402a:	48 c7 45 b8 00 10 00 	movq   $0x1000,-0x48(%rbp)
  8004204031:	00 
  8004204032:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204036:	48 05 ff df 03 00    	add    $0x3dfff,%rax
  800420403c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204040:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004204044:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204049:	48 f7 75 b8          	divq   -0x48(%rbp)
  800420404d:	48 89 d0             	mov    %rdx,%rax
  8004204050:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004204054:	48 29 c2             	sub    %rax,%rdx
  8004204057:	48 89 d0             	mov    %rdx,%rax
  800420405a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	for (i = 0; i < n; i += PGSIZE)
  800420405e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204065:	00 
  8004204066:	e9 d4 00 00 00       	jmpq   800420413f <check_boot_pml4e+0x271>
		assert(check_va2pa(pml4e, UENVS + i) == PADDR(envs) + i);
  800420406b:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  8004204072:	00 00 00 
  8004204075:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204079:	48 01 c2             	add    %rax,%rdx
  800420407c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204080:	48 89 d6             	mov    %rdx,%rsi
  8004204083:	48 89 c7             	mov    %rax,%rdi
  8004204086:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  800420408d:	00 00 00 
  8004204090:	ff d0                	callq  *%rax
  8004204092:	48 ba 90 c1 2b 04 80 	movabs $0x80042bc190,%rdx
  8004204099:	00 00 00 
  800420409c:	48 8b 12             	mov    (%rdx),%rdx
  800420409f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  80042040a3:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042040aa:	00 00 00 
  80042040ad:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042040b1:	77 32                	ja     80042040e5 <check_boot_pml4e+0x217>
  80042040b3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042040b7:	48 89 c1             	mov    %rax,%rcx
  80042040ba:	48 ba e8 1c 21 04 80 	movabs $0x8004211ce8,%rdx
  80042040c1:	00 00 00 
  80042040c4:	be b8 03 00 00       	mov    $0x3b8,%esi
  80042040c9:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042040d0:	00 00 00 
  80042040d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042040d8:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042040df:	00 00 00 
  80042040e2:	41 ff d0             	callq  *%r8
  80042040e5:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042040ec:	ff ff ff 
  80042040ef:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042040f3:	48 01 d1             	add    %rdx,%rcx
  80042040f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042040fa:	48 01 ca             	add    %rcx,%rdx
  80042040fd:	48 39 d0             	cmp    %rdx,%rax
  8004204100:	74 35                	je     8004204137 <check_boot_pml4e+0x269>
  8004204102:	48 b9 c8 20 21 04 80 	movabs $0x80042120c8,%rcx
  8004204109:	00 00 00 
  800420410c:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204113:	00 00 00 
  8004204116:	be b8 03 00 00       	mov    $0x3b8,%esi
  800420411b:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204122:	00 00 00 
  8004204125:	b8 00 00 00 00       	mov    $0x0,%eax
  800420412a:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204131:	00 00 00 
  8004204134:	41 ff d0             	callq  *%r8
        assert(check_va2pa(pml4e, UPAGES + i) == PADDR(pages) + i);
    }

    // check envs array (new test for lab 3)
    n = ROUNDUP(NENV*sizeof(struct Env), PGSIZE);
	for (i = 0; i < n; i += PGSIZE)
  8004204137:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800420413e:	00 
  800420413f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204143:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004204147:	0f 82 1e ff ff ff    	jb     800420406b <check_boot_pml4e+0x19d>
		assert(check_va2pa(pml4e, UENVS + i) == PADDR(envs) + i);
    // check phys mem
    for (i = 0; i < npages * PGSIZE; i += PGSIZE)
  800420414d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204154:	00 
  8004204155:	eb 6a                	jmp    80042041c1 <check_boot_pml4e+0x2f3>
        assert(check_va2pa(pml4e, KERNBASE + i) == i);
  8004204157:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420415e:	00 00 00 
  8004204161:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204165:	48 01 c2             	add    %rax,%rdx
  8004204168:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420416c:	48 89 d6             	mov    %rdx,%rsi
  800420416f:	48 89 c7             	mov    %rax,%rdi
  8004204172:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  8004204179:	00 00 00 
  800420417c:	ff d0                	callq  *%rax
  800420417e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004204182:	74 35                	je     80042041b9 <check_boot_pml4e+0x2eb>
  8004204184:	48 b9 00 21 21 04 80 	movabs $0x8004212100,%rcx
  800420418b:	00 00 00 
  800420418e:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204195:	00 00 00 
  8004204198:	be bb 03 00 00       	mov    $0x3bb,%esi
  800420419d:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042041a4:	00 00 00 
  80042041a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041ac:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042041b3:	00 00 00 
  80042041b6:	41 ff d0             	callq  *%r8
    // check envs array (new test for lab 3)
    n = ROUNDUP(NENV*sizeof(struct Env), PGSIZE);
	for (i = 0; i < n; i += PGSIZE)
		assert(check_va2pa(pml4e, UENVS + i) == PADDR(envs) + i);
    // check phys mem
    for (i = 0; i < npages * PGSIZE; i += PGSIZE)
  80042041b9:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  80042041c0:	00 
  80042041c1:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042041c8:	00 00 00 
  80042041cb:	48 8b 00             	mov    (%rax),%rax
  80042041ce:	48 c1 e0 0c          	shl    $0xc,%rax
  80042041d2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042041d6:	0f 87 7b ff ff ff    	ja     8004204157 <check_boot_pml4e+0x289>
        assert(check_va2pa(pml4e, KERNBASE + i) == i);

    // check kernel stack
    for (i = 0; i < KSTKSIZE; i += PGSIZE) {
  80042041dc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042041e3:	00 
  80042041e4:	e9 d1 00 00 00       	jmpq   80042042ba <check_boot_pml4e+0x3ec>
        assert(check_va2pa(pml4e, KSTACKTOP - KSTKSIZE + i) == PADDR(bootstack) + i);
  80042041e9:	48 ba 00 00 ff 03 80 	movabs $0x8003ff0000,%rdx
  80042041f0:	00 00 00 
  80042041f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042041f7:	48 01 c2             	add    %rax,%rdx
  80042041fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042041fe:	48 89 d6             	mov    %rdx,%rsi
  8004204201:	48 89 c7             	mov    %rax,%rdi
  8004204204:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  800420420b:	00 00 00 
  800420420e:	ff d0                	callq  *%rax
  8004204210:	48 bb 00 60 21 04 80 	movabs $0x8004216000,%rbx
  8004204217:	00 00 00 
  800420421a:	48 89 5d a0          	mov    %rbx,-0x60(%rbp)
  800420421e:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  8004204225:	00 00 00 
  8004204228:	48 39 55 a0          	cmp    %rdx,-0x60(%rbp)
  800420422c:	77 32                	ja     8004204260 <check_boot_pml4e+0x392>
  800420422e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004204232:	48 89 c1             	mov    %rax,%rcx
  8004204235:	48 ba e8 1c 21 04 80 	movabs $0x8004211ce8,%rdx
  800420423c:	00 00 00 
  800420423f:	be bf 03 00 00       	mov    $0x3bf,%esi
  8004204244:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420424b:	00 00 00 
  800420424e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204253:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420425a:	00 00 00 
  800420425d:	41 ff d0             	callq  *%r8
  8004204260:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004204267:	ff ff ff 
  800420426a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420426e:	48 01 d1             	add    %rdx,%rcx
  8004204271:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004204275:	48 01 ca             	add    %rcx,%rdx
  8004204278:	48 39 d0             	cmp    %rdx,%rax
  800420427b:	74 35                	je     80042042b2 <check_boot_pml4e+0x3e4>
  800420427d:	48 b9 28 21 21 04 80 	movabs $0x8004212128,%rcx
  8004204284:	00 00 00 
  8004204287:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420428e:	00 00 00 
  8004204291:	be bf 03 00 00       	mov    $0x3bf,%esi
  8004204296:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420429d:	00 00 00 
  80042042a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042042a5:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042042ac:	00 00 00 
  80042042af:	41 ff d0             	callq  *%r8
    // check phys mem
    for (i = 0; i < npages * PGSIZE; i += PGSIZE)
        assert(check_va2pa(pml4e, KERNBASE + i) == i);

    // check kernel stack
    for (i = 0; i < KSTKSIZE; i += PGSIZE) {
  80042042b2:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  80042042b9:	00 
  80042042ba:	48 81 7d e8 ff ff 00 	cmpq   $0xffff,-0x18(%rbp)
  80042042c1:	00 
  80042042c2:	0f 86 21 ff ff ff    	jbe    80042041e9 <check_boot_pml4e+0x31b>
        assert(check_va2pa(pml4e, KSTACKTOP - KSTKSIZE + i) == PADDR(bootstack) + i);
    }
    assert(check_va2pa(pml4e, KSTACKTOP - KSTKSIZE - 1 )  == ~0);
  80042042c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042042cc:	48 be ff ff fe 03 80 	movabs $0x8003feffff,%rsi
  80042042d3:	00 00 00 
  80042042d6:	48 89 c7             	mov    %rax,%rdi
  80042042d9:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  80042042e0:	00 00 00 
  80042042e3:	ff d0                	callq  *%rax
  80042042e5:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  80042042e9:	74 35                	je     8004204320 <check_boot_pml4e+0x452>
  80042042eb:	48 b9 70 21 21 04 80 	movabs $0x8004212170,%rcx
  80042042f2:	00 00 00 
  80042042f5:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042042fc:	00 00 00 
  80042042ff:	be c1 03 00 00       	mov    $0x3c1,%esi
  8004204304:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420430b:	00 00 00 
  800420430e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204313:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420431a:	00 00 00 
  800420431d:	41 ff d0             	callq  *%r8


    pdpe_t *pdpe = KADDR(PTE_ADDR(boot_pml4e[1]));
  8004204320:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204327:	00 00 00 
  800420432a:	48 8b 00             	mov    (%rax),%rax
  800420432d:	48 83 c0 08          	add    $0x8,%rax
  8004204331:	48 8b 00             	mov    (%rax),%rax
  8004204334:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420433a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420433e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004204342:	48 c1 e8 0c          	shr    $0xc,%rax
  8004204346:	89 45 94             	mov    %eax,-0x6c(%rbp)
  8004204349:	8b 55 94             	mov    -0x6c(%rbp),%edx
  800420434c:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004204353:	00 00 00 
  8004204356:	48 8b 00             	mov    (%rax),%rax
  8004204359:	48 39 c2             	cmp    %rax,%rdx
  800420435c:	72 32                	jb     8004204390 <check_boot_pml4e+0x4c2>
  800420435e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004204362:	48 89 c1             	mov    %rax,%rcx
  8004204365:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  800420436c:	00 00 00 
  800420436f:	be c4 03 00 00       	mov    $0x3c4,%esi
  8004204374:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420437b:	00 00 00 
  800420437e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204383:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420438a:	00 00 00 
  800420438d:	41 ff d0             	callq  *%r8
  8004204390:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004204397:	00 00 00 
  800420439a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420439e:	48 01 d0             	add    %rdx,%rax
  80042043a1:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    pde_t  *pgdir = KADDR(PTE_ADDR(pdpe[0]));
  80042043a5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042043a9:	48 8b 00             	mov    (%rax),%rax
  80042043ac:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042043b2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042043b6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042043ba:	48 c1 e8 0c          	shr    $0xc,%rax
  80042043be:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
  80042043c4:	8b 95 7c ff ff ff    	mov    -0x84(%rbp),%edx
  80042043ca:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042043d1:	00 00 00 
  80042043d4:	48 8b 00             	mov    (%rax),%rax
  80042043d7:	48 39 c2             	cmp    %rax,%rdx
  80042043da:	72 32                	jb     800420440e <check_boot_pml4e+0x540>
  80042043dc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042043e0:	48 89 c1             	mov    %rax,%rcx
  80042043e3:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  80042043ea:	00 00 00 
  80042043ed:	be c5 03 00 00       	mov    $0x3c5,%esi
  80042043f2:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042043f9:	00 00 00 
  80042043fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204401:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204408:	00 00 00 
  800420440b:	41 ff d0             	callq  *%r8
  800420440e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004204415:	00 00 00 
  8004204418:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420441c:	48 01 d0             	add    %rdx,%rax
  800420441f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    // check PDE permissions
    for (i = 0; i < NPDENTRIES; i++) {
  8004204426:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420442d:	00 
  800420442e:	e9 50 01 00 00       	jmpq   8004204583 <check_boot_pml4e+0x6b5>
        switch (i) {
  8004204433:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204437:	48 83 f8 04          	cmp    $0x4,%rax
  800420443b:	72 67                	jb     80042044a4 <check_boot_pml4e+0x5d6>
  800420443d:	48 83 f8 05          	cmp    $0x5,%rax
  8004204441:	76 06                	jbe    8004204449 <check_boot_pml4e+0x57b>
  8004204443:	48 83 f8 1f          	cmp    $0x1f,%rax
  8004204447:	75 5b                	jne    80042044a4 <check_boot_pml4e+0x5d6>
            //case PDX(UVPT):
            case PDX(KSTACKTOP - 1):
            case PDX(UPAGES):
            case PDX(UENVS):
                assert(pgdir[i] & PTE_P);
  8004204449:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420444d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004204454:	00 
  8004204455:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420445c:	48 01 d0             	add    %rdx,%rax
  800420445f:	48 8b 00             	mov    (%rax),%rax
  8004204462:	83 e0 01             	and    $0x1,%eax
  8004204465:	48 85 c0             	test   %rax,%rax
  8004204468:	75 35                	jne    800420449f <check_boot_pml4e+0x5d1>
  800420446a:	48 b9 a4 21 21 04 80 	movabs $0x80042121a4,%rcx
  8004204471:	00 00 00 
  8004204474:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420447b:	00 00 00 
  800420447e:	be cd 03 00 00       	mov    $0x3cd,%esi
  8004204483:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420448a:	00 00 00 
  800420448d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204492:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204499:	00 00 00 
  800420449c:	41 ff d0             	callq  *%r8
                break;
  800420449f:	e9 da 00 00 00       	jmpq   800420457e <check_boot_pml4e+0x6b0>
            default:
                if (i >= PDX(KERNBASE)) {
  80042044a4:	48 83 7d e8 1f       	cmpq   $0x1f,-0x18(%rbp)
  80042044a9:	0f 86 ce 00 00 00    	jbe    800420457d <check_boot_pml4e+0x6af>
                    if (pgdir[i] & PTE_P)
  80042044af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042044b3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042044ba:	00 
  80042044bb:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042044c2:	48 01 d0             	add    %rdx,%rax
  80042044c5:	48 8b 00             	mov    (%rax),%rax
  80042044c8:	83 e0 01             	and    $0x1,%eax
  80042044cb:	48 85 c0             	test   %rax,%rax
  80042044ce:	74 5a                	je     800420452a <check_boot_pml4e+0x65c>
                        assert(pgdir[i] & PTE_W);
  80042044d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042044d4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042044db:	00 
  80042044dc:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042044e3:	48 01 d0             	add    %rdx,%rax
  80042044e6:	48 8b 00             	mov    (%rax),%rax
  80042044e9:	83 e0 02             	and    $0x2,%eax
  80042044ec:	48 85 c0             	test   %rax,%rax
  80042044ef:	0f 85 88 00 00 00    	jne    800420457d <check_boot_pml4e+0x6af>
  80042044f5:	48 b9 b5 21 21 04 80 	movabs $0x80042121b5,%rcx
  80042044fc:	00 00 00 
  80042044ff:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204506:	00 00 00 
  8004204509:	be d2 03 00 00       	mov    $0x3d2,%esi
  800420450e:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204515:	00 00 00 
  8004204518:	b8 00 00 00 00       	mov    $0x0,%eax
  800420451d:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204524:	00 00 00 
  8004204527:	41 ff d0             	callq  *%r8
                    else
                        assert(pgdir[i] == 0);
  800420452a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420452e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004204535:	00 
  8004204536:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420453d:	48 01 d0             	add    %rdx,%rax
  8004204540:	48 8b 00             	mov    (%rax),%rax
  8004204543:	48 85 c0             	test   %rax,%rax
  8004204546:	74 35                	je     800420457d <check_boot_pml4e+0x6af>
  8004204548:	48 b9 c6 21 21 04 80 	movabs $0x80042121c6,%rcx
  800420454f:	00 00 00 
  8004204552:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204559:	00 00 00 
  800420455c:	be d4 03 00 00       	mov    $0x3d4,%esi
  8004204561:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204568:	00 00 00 
  800420456b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204570:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204577:	00 00 00 
  800420457a:	41 ff d0             	callq  *%r8
                }
                break;
  800420457d:	90                   	nop


    pdpe_t *pdpe = KADDR(PTE_ADDR(boot_pml4e[1]));
    pde_t  *pgdir = KADDR(PTE_ADDR(pdpe[0]));
    // check PDE permissions
    for (i = 0; i < NPDENTRIES; i++) {
  800420457e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004204583:	48 81 7d e8 ff 01 00 	cmpq   $0x1ff,-0x18(%rbp)
  800420458a:	00 
  800420458b:	0f 86 a2 fe ff ff    	jbe    8004204433 <check_boot_pml4e+0x565>
                        assert(pgdir[i] == 0);
                }
                break;
        }
    }
    cprintf("check_boot_pml4e() succeeded!\n");
  8004204591:	48 bf d8 21 21 04 80 	movabs $0x80042121d8,%rdi
  8004204598:	00 00 00 
  800420459b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045a0:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042045a7:	00 00 00 
  80042045aa:	ff d2                	callq  *%rdx
}
  80042045ac:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  80042045b3:	5b                   	pop    %rbx
  80042045b4:	5d                   	pop    %rbp
  80042045b5:	c3                   	retq   

00000080042045b6 <check_va2pa>:
// this functionality for us!  We define our own version to help check
// the check_boot_pml4e() function; it shouldn't be used elsewhere.

static physaddr_t
check_va2pa(pml4e_t *pml4e, uintptr_t va)
{
  80042045b6:	55                   	push   %rbp
  80042045b7:	48 89 e5             	mov    %rsp,%rbp
  80042045ba:	48 83 ec 60          	sub    $0x60,%rsp
  80042045be:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042045c2:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    pte_t *pte;
    pdpe_t *pdpe;
    pde_t *pde;
    // cprintf("%x", va);
    pml4e = &pml4e[PML4(va)];
  80042045c6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042045ca:	48 c1 e8 27          	shr    $0x27,%rax
  80042045ce:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042045d3:	48 c1 e0 03          	shl    $0x3,%rax
  80042045d7:	48 01 45 a8          	add    %rax,-0x58(%rbp)
    // cprintf(" %x %x " , PML4(va), *pml4e);
    if(!(*pml4e & PTE_P))
  80042045db:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042045df:	48 8b 00             	mov    (%rax),%rax
  80042045e2:	83 e0 01             	and    $0x1,%eax
  80042045e5:	48 85 c0             	test   %rax,%rax
  80042045e8:	75 0c                	jne    80042045f6 <check_va2pa+0x40>
        return ~0;
  80042045ea:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042045f1:	e9 38 02 00 00       	jmpq   800420482e <check_va2pa+0x278>
    pdpe = (pdpe_t *) KADDR(PTE_ADDR(*pml4e));
  80042045f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042045fa:	48 8b 00             	mov    (%rax),%rax
  80042045fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004204603:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420460b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420460f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004204612:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004204615:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  800420461c:	00 00 00 
  800420461f:	48 8b 00             	mov    (%rax),%rax
  8004204622:	48 39 c2             	cmp    %rax,%rdx
  8004204625:	72 32                	jb     8004204659 <check_va2pa+0xa3>
  8004204627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420462b:	48 89 c1             	mov    %rax,%rcx
  800420462e:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004204635:	00 00 00 
  8004204638:	be ec 03 00 00       	mov    $0x3ec,%esi
  800420463d:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204644:	00 00 00 
  8004204647:	b8 00 00 00 00       	mov    $0x0,%eax
  800420464c:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204653:	00 00 00 
  8004204656:	41 ff d0             	callq  *%r8
  8004204659:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004204660:	00 00 00 
  8004204663:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204667:	48 01 d0             	add    %rdx,%rax
  800420466a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    // cprintf(" %x %x " , pdpe, *pdpe);
    if (!(pdpe[PDPE(va)] & PTE_P))
  800420466e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004204672:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004204676:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420467b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004204682:	00 
  8004204683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204687:	48 01 d0             	add    %rdx,%rax
  800420468a:	48 8b 00             	mov    (%rax),%rax
  800420468d:	83 e0 01             	and    $0x1,%eax
  8004204690:	48 85 c0             	test   %rax,%rax
  8004204693:	75 0c                	jne    80042046a1 <check_va2pa+0xeb>
        return ~0;
  8004204695:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  800420469c:	e9 8d 01 00 00       	jmpq   800420482e <check_va2pa+0x278>
    pde = (pde_t *) KADDR(PTE_ADDR(pdpe[PDPE(va)]));
  80042046a1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042046a5:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042046a9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042046ae:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042046b5:	00 
  80042046b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042046ba:	48 01 d0             	add    %rdx,%rax
  80042046bd:	48 8b 00             	mov    (%rax),%rax
  80042046c0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042046c6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042046ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042046ce:	48 c1 e8 0c          	shr    $0xc,%rax
  80042046d2:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042046d5:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042046d8:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042046df:	00 00 00 
  80042046e2:	48 8b 00             	mov    (%rax),%rax
  80042046e5:	48 39 c2             	cmp    %rax,%rdx
  80042046e8:	72 32                	jb     800420471c <check_va2pa+0x166>
  80042046ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042046ee:	48 89 c1             	mov    %rax,%rcx
  80042046f1:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  80042046f8:	00 00 00 
  80042046fb:	be f0 03 00 00       	mov    $0x3f0,%esi
  8004204700:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204707:	00 00 00 
  800420470a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420470f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204716:	00 00 00 
  8004204719:	41 ff d0             	callq  *%r8
  800420471c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004204723:	00 00 00 
  8004204726:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420472a:	48 01 d0             	add    %rdx,%rax
  800420472d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    // cprintf(" %x %x " , pde, *pde);
    pde = &pde[PDX(va)];
  8004204731:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004204735:	48 c1 e8 15          	shr    $0x15,%rax
  8004204739:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420473e:	48 c1 e0 03          	shl    $0x3,%rax
  8004204742:	48 01 45 d0          	add    %rax,-0x30(%rbp)
    if (!(*pde & PTE_P))
  8004204746:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420474a:	48 8b 00             	mov    (%rax),%rax
  800420474d:	83 e0 01             	and    $0x1,%eax
  8004204750:	48 85 c0             	test   %rax,%rax
  8004204753:	75 0c                	jne    8004204761 <check_va2pa+0x1ab>
        return ~0;
  8004204755:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  800420475c:	e9 cd 00 00 00       	jmpq   800420482e <check_va2pa+0x278>
    pte = (pte_t*) KADDR(PTE_ADDR(*pde));
  8004204761:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204765:	48 8b 00             	mov    (%rax),%rax
  8004204768:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420476e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004204772:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004204776:	48 c1 e8 0c          	shr    $0xc,%rax
  800420477a:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420477d:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004204780:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004204787:	00 00 00 
  800420478a:	48 8b 00             	mov    (%rax),%rax
  800420478d:	48 39 c2             	cmp    %rax,%rdx
  8004204790:	72 32                	jb     80042047c4 <check_va2pa+0x20e>
  8004204792:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004204796:	48 89 c1             	mov    %rax,%rcx
  8004204799:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  80042047a0:	00 00 00 
  80042047a3:	be f5 03 00 00       	mov    $0x3f5,%esi
  80042047a8:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042047af:	00 00 00 
  80042047b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047b7:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042047be:	00 00 00 
  80042047c1:	41 ff d0             	callq  *%r8
  80042047c4:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042047cb:	00 00 00 
  80042047ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042047d2:	48 01 d0             	add    %rdx,%rax
  80042047d5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    // cprintf(" %x %x " , pte, *pte);
    if (!(pte[PTX(va)] & PTE_P))
  80042047d9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042047dd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042047e1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042047e6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042047ed:	00 
  80042047ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042047f2:	48 01 d0             	add    %rdx,%rax
  80042047f5:	48 8b 00             	mov    (%rax),%rax
  80042047f8:	83 e0 01             	and    $0x1,%eax
  80042047fb:	48 85 c0             	test   %rax,%rax
  80042047fe:	75 09                	jne    8004204809 <check_va2pa+0x253>
        return ~0;
  8004204800:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004204807:	eb 25                	jmp    800420482e <check_va2pa+0x278>
    // cprintf(" %x %x\n" , PTX(va),  PTE_ADDR(pte[PTX(va)]));
    return PTE_ADDR(pte[PTX(va)]);
  8004204809:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420480d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004204811:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204816:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420481d:	00 
  800420481e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204822:	48 01 d0             	add    %rdx,%rax
  8004204825:	48 8b 00             	mov    (%rax),%rax
  8004204828:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
}
  800420482e:	c9                   	leaveq 
  800420482f:	c3                   	retq   

0000008004204830 <page_check>:


// check page_insert, page_remove, &c
static void
page_check(void)
{
  8004204830:	55                   	push   %rbp
  8004204831:	48 89 e5             	mov    %rsp,%rbp
  8004204834:	53                   	push   %rbx
  8004204835:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
    pte_t *ptep, *ptep1;
    pdpe_t *pdpe;
    pde_t *pde;
    void *va;
    int i;
    pp0 = pp1 = pp2 = pp3 = pp4 = pp5 =0;
  800420483c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004204843:	00 
  8004204844:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204848:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420484c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004204850:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204854:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204858:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420485c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004204860:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004204864:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004204868:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    assert(pp0 = page_alloc(0));
  800420486c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204871:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004204878:	00 00 00 
  800420487b:	ff d0                	callq  *%rax
  800420487d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004204881:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004204886:	75 35                	jne    80042048bd <page_check+0x8d>
  8004204888:	48 b9 f7 21 21 04 80 	movabs $0x80042121f7,%rcx
  800420488f:	00 00 00 
  8004204892:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204899:	00 00 00 
  800420489c:	be 0a 04 00 00       	mov    $0x40a,%esi
  80042048a1:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042048a8:	00 00 00 
  80042048ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048b0:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042048b7:	00 00 00 
  80042048ba:	41 ff d0             	callq  *%r8
    assert(pp1 = page_alloc(0));
  80042048bd:	bf 00 00 00 00       	mov    $0x0,%edi
  80042048c2:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  80042048c9:	00 00 00 
  80042048cc:	ff d0                	callq  *%rax
  80042048ce:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042048d2:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042048d7:	75 35                	jne    800420490e <page_check+0xde>
  80042048d9:	48 b9 0b 22 21 04 80 	movabs $0x800421220b,%rcx
  80042048e0:	00 00 00 
  80042048e3:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042048ea:	00 00 00 
  80042048ed:	be 0b 04 00 00       	mov    $0x40b,%esi
  80042048f2:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042048f9:	00 00 00 
  80042048fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204901:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204908:	00 00 00 
  800420490b:	41 ff d0             	callq  *%r8
    assert(pp2 = page_alloc(0));
  800420490e:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204913:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  800420491a:	00 00 00 
  800420491d:	ff d0                	callq  *%rax
  800420491f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004204923:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004204928:	75 35                	jne    800420495f <page_check+0x12f>
  800420492a:	48 b9 1f 22 21 04 80 	movabs $0x800421221f,%rcx
  8004204931:	00 00 00 
  8004204934:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420493b:	00 00 00 
  800420493e:	be 0c 04 00 00       	mov    $0x40c,%esi
  8004204943:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420494a:	00 00 00 
  800420494d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204952:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204959:	00 00 00 
  800420495c:	41 ff d0             	callq  *%r8
    assert(pp3 = page_alloc(0));
  800420495f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204964:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  800420496b:	00 00 00 
  800420496e:	ff d0                	callq  *%rax
  8004204970:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204974:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204979:	75 35                	jne    80042049b0 <page_check+0x180>
  800420497b:	48 b9 33 22 21 04 80 	movabs $0x8004212233,%rcx
  8004204982:	00 00 00 
  8004204985:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420498c:	00 00 00 
  800420498f:	be 0d 04 00 00       	mov    $0x40d,%esi
  8004204994:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420499b:	00 00 00 
  800420499e:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049a3:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042049aa:	00 00 00 
  80042049ad:	41 ff d0             	callq  *%r8
    assert(pp4 = page_alloc(0));
  80042049b0:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049b5:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  80042049bc:	00 00 00 
  80042049bf:	ff d0                	callq  *%rax
  80042049c1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042049c5:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042049ca:	75 35                	jne    8004204a01 <page_check+0x1d1>
  80042049cc:	48 b9 47 22 21 04 80 	movabs $0x8004212247,%rcx
  80042049d3:	00 00 00 
  80042049d6:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042049dd:	00 00 00 
  80042049e0:	be 0e 04 00 00       	mov    $0x40e,%esi
  80042049e5:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042049ec:	00 00 00 
  80042049ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049f4:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042049fb:	00 00 00 
  80042049fe:	41 ff d0             	callq  *%r8
    assert(pp5 = page_alloc(0));
  8004204a01:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a06:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004204a0d:	00 00 00 
  8004204a10:	ff d0                	callq  *%rax
  8004204a12:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a16:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a1b:	75 35                	jne    8004204a52 <page_check+0x222>
  8004204a1d:	48 b9 5b 22 21 04 80 	movabs $0x800421225b,%rcx
  8004204a24:	00 00 00 
  8004204a27:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204a2e:	00 00 00 
  8004204a31:	be 0f 04 00 00       	mov    $0x40f,%esi
  8004204a36:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204a3d:	00 00 00 
  8004204a40:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a45:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204a4c:	00 00 00 
  8004204a4f:	41 ff d0             	callq  *%r8

    assert(pp0);
  8004204a52:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004204a57:	75 35                	jne    8004204a8e <page_check+0x25e>
  8004204a59:	48 b9 99 1f 21 04 80 	movabs $0x8004211f99,%rcx
  8004204a60:	00 00 00 
  8004204a63:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204a6a:	00 00 00 
  8004204a6d:	be 11 04 00 00       	mov    $0x411,%esi
  8004204a72:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204a79:	00 00 00 
  8004204a7c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a81:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204a88:	00 00 00 
  8004204a8b:	41 ff d0             	callq  *%r8
    assert(pp1 && pp1 != pp0);
  8004204a8e:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004204a93:	74 0a                	je     8004204a9f <page_check+0x26f>
  8004204a95:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004204a99:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004204a9d:	75 35                	jne    8004204ad4 <page_check+0x2a4>
  8004204a9f:	48 b9 9d 1f 21 04 80 	movabs $0x8004211f9d,%rcx
  8004204aa6:	00 00 00 
  8004204aa9:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204ab0:	00 00 00 
  8004204ab3:	be 12 04 00 00       	mov    $0x412,%esi
  8004204ab8:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204abf:	00 00 00 
  8004204ac2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ac7:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204ace:	00 00 00 
  8004204ad1:	41 ff d0             	callq  *%r8
    assert(pp2 && pp2 != pp1 && pp2 != pp0);
  8004204ad4:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004204ad9:	74 14                	je     8004204aef <page_check+0x2bf>
  8004204adb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004204adf:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004204ae3:	74 0a                	je     8004204aef <page_check+0x2bf>
  8004204ae5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004204ae9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004204aed:	75 35                	jne    8004204b24 <page_check+0x2f4>
  8004204aef:	48 b9 b0 1f 21 04 80 	movabs $0x8004211fb0,%rcx
  8004204af6:	00 00 00 
  8004204af9:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204b00:	00 00 00 
  8004204b03:	be 13 04 00 00       	mov    $0x413,%esi
  8004204b08:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204b0f:	00 00 00 
  8004204b12:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b17:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204b1e:	00 00 00 
  8004204b21:	41 ff d0             	callq  *%r8
    assert(pp3 && pp3 != pp2 && pp3 != pp1 && pp3 != pp0);
  8004204b24:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204b29:	74 1e                	je     8004204b49 <page_check+0x319>
  8004204b2b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204b2f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004204b33:	74 14                	je     8004204b49 <page_check+0x319>
  8004204b35:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204b39:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004204b3d:	74 0a                	je     8004204b49 <page_check+0x319>
  8004204b3f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204b43:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004204b47:	75 35                	jne    8004204b7e <page_check+0x34e>
  8004204b49:	48 b9 70 22 21 04 80 	movabs $0x8004212270,%rcx
  8004204b50:	00 00 00 
  8004204b53:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204b5a:	00 00 00 
  8004204b5d:	be 14 04 00 00       	mov    $0x414,%esi
  8004204b62:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204b69:	00 00 00 
  8004204b6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b71:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204b78:	00 00 00 
  8004204b7b:	41 ff d0             	callq  *%r8
    assert(pp4 && pp4 != pp3 && pp4 != pp2 && pp4 != pp1 && pp4 != pp0);
  8004204b7e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004204b83:	74 28                	je     8004204bad <page_check+0x37d>
  8004204b85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004204b89:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204b8d:	74 1e                	je     8004204bad <page_check+0x37d>
  8004204b8f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004204b93:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004204b97:	74 14                	je     8004204bad <page_check+0x37d>
  8004204b99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004204b9d:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004204ba1:	74 0a                	je     8004204bad <page_check+0x37d>
  8004204ba3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004204ba7:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004204bab:	75 35                	jne    8004204be2 <page_check+0x3b2>
  8004204bad:	48 b9 a0 22 21 04 80 	movabs $0x80042122a0,%rcx
  8004204bb4:	00 00 00 
  8004204bb7:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204bbe:	00 00 00 
  8004204bc1:	be 15 04 00 00       	mov    $0x415,%esi
  8004204bc6:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204bcd:	00 00 00 
  8004204bd0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bd5:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204bdc:	00 00 00 
  8004204bdf:	41 ff d0             	callq  *%r8
    assert(pp5 && pp5 != pp4 && pp5 != pp3 && pp5 != pp2 && pp5 != pp1 && pp5 != pp0);
  8004204be2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204be7:	74 32                	je     8004204c1b <page_check+0x3eb>
  8004204be9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bed:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204bf1:	74 28                	je     8004204c1b <page_check+0x3eb>
  8004204bf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bf7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204bfb:	74 1e                	je     8004204c1b <page_check+0x3eb>
  8004204bfd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204c01:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004204c05:	74 14                	je     8004204c1b <page_check+0x3eb>
  8004204c07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204c0b:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004204c0f:	74 0a                	je     8004204c1b <page_check+0x3eb>
  8004204c11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204c15:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004204c19:	75 35                	jne    8004204c50 <page_check+0x420>
  8004204c1b:	48 b9 e0 22 21 04 80 	movabs $0x80042122e0,%rcx
  8004204c22:	00 00 00 
  8004204c25:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204c2c:	00 00 00 
  8004204c2f:	be 16 04 00 00       	mov    $0x416,%esi
  8004204c34:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204c3b:	00 00 00 
  8004204c3e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c43:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204c4a:	00 00 00 
  8004204c4d:	41 ff d0             	callq  *%r8

    // temporarily steal the rest of the free pages
    fl = page_free_list;
  8004204c50:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004204c57:	00 00 00 
  8004204c5a:	48 8b 00             	mov    (%rax),%rax
  8004204c5d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    page_free_list = NULL;
  8004204c61:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004204c68:	00 00 00 
  8004204c6b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

    // should be no free memory
    assert(!page_alloc(0));
  8004204c72:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204c77:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004204c7e:	00 00 00 
  8004204c81:	ff d0                	callq  *%rax
  8004204c83:	48 85 c0             	test   %rax,%rax
  8004204c86:	74 35                	je     8004204cbd <page_check+0x48d>
  8004204c88:	48 b9 27 20 21 04 80 	movabs $0x8004212027,%rcx
  8004204c8f:	00 00 00 
  8004204c92:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204c99:	00 00 00 
  8004204c9c:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204ca1:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204ca8:	00 00 00 
  8004204cab:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cb0:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204cb7:	00 00 00 
  8004204cba:	41 ff d0             	callq  *%r8

    // there is no page allocated at address 0
    assert(page_lookup(boot_pml4e, (void *) 0x0, &ptep) == NULL);
  8004204cbd:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204cc4:	00 00 00 
  8004204cc7:	48 8b 00             	mov    (%rax),%rax
  8004204cca:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  8004204cd1:	be 00 00 00 00       	mov    $0x0,%esi
  8004204cd6:	48 89 c7             	mov    %rax,%rdi
  8004204cd9:	48 b8 42 2d 20 04 80 	movabs $0x8004202d42,%rax
  8004204ce0:	00 00 00 
  8004204ce3:	ff d0                	callq  *%rax
  8004204ce5:	48 85 c0             	test   %rax,%rax
  8004204ce8:	74 35                	je     8004204d1f <page_check+0x4ef>
  8004204cea:	48 b9 30 23 21 04 80 	movabs $0x8004212330,%rcx
  8004204cf1:	00 00 00 
  8004204cf4:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204cfb:	00 00 00 
  8004204cfe:	be 20 04 00 00       	mov    $0x420,%esi
  8004204d03:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204d0a:	00 00 00 
  8004204d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d12:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204d19:	00 00 00 
  8004204d1c:	41 ff d0             	callq  *%r8

    // there is no free memory, so we can't allocate a page table
    assert(page_insert(boot_pml4e, pp1, 0x0, 0) < 0);
  8004204d1f:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204d26:	00 00 00 
  8004204d29:	48 8b 00             	mov    (%rax),%rax
  8004204d2c:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004204d30:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004204d35:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204d3a:	48 89 c7             	mov    %rax,%rdi
  8004204d3d:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  8004204d44:	00 00 00 
  8004204d47:	ff d0                	callq  *%rax
  8004204d49:	85 c0                	test   %eax,%eax
  8004204d4b:	78 35                	js     8004204d82 <page_check+0x552>
  8004204d4d:	48 b9 68 23 21 04 80 	movabs $0x8004212368,%rcx
  8004204d54:	00 00 00 
  8004204d57:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204d5e:	00 00 00 
  8004204d61:	be 23 04 00 00       	mov    $0x423,%esi
  8004204d66:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204d6d:	00 00 00 
  8004204d70:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d75:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204d7c:	00 00 00 
  8004204d7f:	41 ff d0             	callq  *%r8

    // free pp0 and try again: pp0 should be used for page table
    page_free(pp0);
  8004204d82:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204d86:	48 89 c7             	mov    %rax,%rdi
  8004204d89:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004204d90:	00 00 00 
  8004204d93:	ff d0                	callq  *%rax
    assert(page_insert(boot_pml4e, pp1, 0x0, 0) < 0);
  8004204d95:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204d9c:	00 00 00 
  8004204d9f:	48 8b 00             	mov    (%rax),%rax
  8004204da2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004204da6:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004204dab:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204db0:	48 89 c7             	mov    %rax,%rdi
  8004204db3:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  8004204dba:	00 00 00 
  8004204dbd:	ff d0                	callq  *%rax
  8004204dbf:	85 c0                	test   %eax,%eax
  8004204dc1:	78 35                	js     8004204df8 <page_check+0x5c8>
  8004204dc3:	48 b9 68 23 21 04 80 	movabs $0x8004212368,%rcx
  8004204dca:	00 00 00 
  8004204dcd:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204dd4:	00 00 00 
  8004204dd7:	be 27 04 00 00       	mov    $0x427,%esi
  8004204ddc:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204de3:	00 00 00 
  8004204de6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204deb:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204df2:	00 00 00 
  8004204df5:	41 ff d0             	callq  *%r8
    page_free(pp2);
  8004204df8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004204dfc:	48 89 c7             	mov    %rax,%rdi
  8004204dff:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004204e06:	00 00 00 
  8004204e09:	ff d0                	callq  *%rax
    page_free(pp3);
  8004204e0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204e0f:	48 89 c7             	mov    %rax,%rdi
  8004204e12:	48 b8 be 26 20 04 80 	movabs $0x80042026be,%rax
  8004204e19:	00 00 00 
  8004204e1c:	ff d0                	callq  *%rax
    //cprintf("pp1 ref count = %d\n",pp1->pp_ref);
    //cprintf("pp0 ref count = %d\n",pp0->pp_ref);
    //cprintf("pp2 ref count = %d\n",pp2->pp_ref);
    assert(page_insert(boot_pml4e, pp1, 0x0, 0) == 0);
  8004204e1e:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204e25:	00 00 00 
  8004204e28:	48 8b 00             	mov    (%rax),%rax
  8004204e2b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004204e2f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004204e34:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204e39:	48 89 c7             	mov    %rax,%rdi
  8004204e3c:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  8004204e43:	00 00 00 
  8004204e46:	ff d0                	callq  *%rax
  8004204e48:	85 c0                	test   %eax,%eax
  8004204e4a:	74 35                	je     8004204e81 <page_check+0x651>
  8004204e4c:	48 b9 98 23 21 04 80 	movabs $0x8004212398,%rcx
  8004204e53:	00 00 00 
  8004204e56:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204e5d:	00 00 00 
  8004204e60:	be 2d 04 00 00       	mov    $0x42d,%esi
  8004204e65:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204e6c:	00 00 00 
  8004204e6f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e74:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204e7b:	00 00 00 
  8004204e7e:	41 ff d0             	callq  *%r8
    assert((PTE_ADDR(boot_pml4e[0]) == page2pa(pp0) || PTE_ADDR(boot_pml4e[0]) == page2pa(pp2) || PTE_ADDR(boot_pml4e[0]) == page2pa(pp3) ));
  8004204e81:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204e88:	00 00 00 
  8004204e8b:	48 8b 00             	mov    (%rax),%rax
  8004204e8e:	48 8b 00             	mov    (%rax),%rax
  8004204e91:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004204e97:	48 89 c3             	mov    %rax,%rbx
  8004204e9a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204e9e:	48 89 c7             	mov    %rax,%rdi
  8004204ea1:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004204ea8:	00 00 00 
  8004204eab:	ff d0                	callq  *%rax
  8004204ead:	48 39 c3             	cmp    %rax,%rbx
  8004204eb0:	0f 84 97 00 00 00    	je     8004204f4d <page_check+0x71d>
  8004204eb6:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204ebd:	00 00 00 
  8004204ec0:	48 8b 00             	mov    (%rax),%rax
  8004204ec3:	48 8b 00             	mov    (%rax),%rax
  8004204ec6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004204ecc:	48 89 c3             	mov    %rax,%rbx
  8004204ecf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004204ed3:	48 89 c7             	mov    %rax,%rdi
  8004204ed6:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004204edd:	00 00 00 
  8004204ee0:	ff d0                	callq  *%rax
  8004204ee2:	48 39 c3             	cmp    %rax,%rbx
  8004204ee5:	74 66                	je     8004204f4d <page_check+0x71d>
  8004204ee7:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204eee:	00 00 00 
  8004204ef1:	48 8b 00             	mov    (%rax),%rax
  8004204ef4:	48 8b 00             	mov    (%rax),%rax
  8004204ef7:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004204efd:	48 89 c3             	mov    %rax,%rbx
  8004204f00:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204f04:	48 89 c7             	mov    %rax,%rdi
  8004204f07:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004204f0e:	00 00 00 
  8004204f11:	ff d0                	callq  *%rax
  8004204f13:	48 39 c3             	cmp    %rax,%rbx
  8004204f16:	74 35                	je     8004204f4d <page_check+0x71d>
  8004204f18:	48 b9 c8 23 21 04 80 	movabs $0x80042123c8,%rcx
  8004204f1f:	00 00 00 
  8004204f22:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204f29:	00 00 00 
  8004204f2c:	be 2e 04 00 00       	mov    $0x42e,%esi
  8004204f31:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204f38:	00 00 00 
  8004204f3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f40:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204f47:	00 00 00 
  8004204f4a:	41 ff d0             	callq  *%r8
    assert(check_va2pa(boot_pml4e, 0x0) == page2pa(pp1));
  8004204f4d:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004204f54:	00 00 00 
  8004204f57:	48 8b 00             	mov    (%rax),%rax
  8004204f5a:	be 00 00 00 00       	mov    $0x0,%esi
  8004204f5f:	48 89 c7             	mov    %rax,%rdi
  8004204f62:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  8004204f69:	00 00 00 
  8004204f6c:	ff d0                	callq  *%rax
  8004204f6e:	48 89 c3             	mov    %rax,%rbx
  8004204f71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004204f75:	48 89 c7             	mov    %rax,%rdi
  8004204f78:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004204f7f:	00 00 00 
  8004204f82:	ff d0                	callq  *%rax
  8004204f84:	48 39 c3             	cmp    %rax,%rbx
  8004204f87:	74 35                	je     8004204fbe <page_check+0x78e>
  8004204f89:	48 b9 50 24 21 04 80 	movabs $0x8004212450,%rcx
  8004204f90:	00 00 00 
  8004204f93:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204f9a:	00 00 00 
  8004204f9d:	be 2f 04 00 00       	mov    $0x42f,%esi
  8004204fa2:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204fa9:	00 00 00 
  8004204fac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fb1:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204fb8:	00 00 00 
  8004204fbb:	41 ff d0             	callq  *%r8
    assert(pp1->pp_ref == 1);
  8004204fbe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004204fc2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004204fc6:	66 83 f8 01          	cmp    $0x1,%ax
  8004204fca:	74 35                	je     8004205001 <page_check+0x7d1>
  8004204fcc:	48 b9 7d 24 21 04 80 	movabs $0x800421247d,%rcx
  8004204fd3:	00 00 00 
  8004204fd6:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004204fdd:	00 00 00 
  8004204fe0:	be 30 04 00 00       	mov    $0x430,%esi
  8004204fe5:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004204fec:	00 00 00 
  8004204fef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ff4:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004204ffb:	00 00 00 
  8004204ffe:	41 ff d0             	callq  *%r8
    assert(pp0->pp_ref == 1);
  8004205001:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205005:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205009:	66 83 f8 01          	cmp    $0x1,%ax
  800420500d:	74 35                	je     8004205044 <page_check+0x814>
  800420500f:	48 b9 8e 24 21 04 80 	movabs $0x800421248e,%rcx
  8004205016:	00 00 00 
  8004205019:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205020:	00 00 00 
  8004205023:	be 31 04 00 00       	mov    $0x431,%esi
  8004205028:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420502f:	00 00 00 
  8004205032:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205037:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420503e:	00 00 00 
  8004205041:	41 ff d0             	callq  *%r8
    assert(pp2->pp_ref == 1);
  8004205044:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205048:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420504c:	66 83 f8 01          	cmp    $0x1,%ax
  8004205050:	74 35                	je     8004205087 <page_check+0x857>
  8004205052:	48 b9 9f 24 21 04 80 	movabs $0x800421249f,%rcx
  8004205059:	00 00 00 
  800420505c:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205063:	00 00 00 
  8004205066:	be 32 04 00 00       	mov    $0x432,%esi
  800420506b:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205072:	00 00 00 
  8004205075:	b8 00 00 00 00       	mov    $0x0,%eax
  800420507a:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205081:	00 00 00 
  8004205084:	41 ff d0             	callq  *%r8
    //should be able to map pp3 at PGSIZE because pp0 is already allocated for page table
    assert(page_insert(boot_pml4e, pp3, (void*) PGSIZE, 0) == 0);
  8004205087:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  800420508e:	00 00 00 
  8004205091:	48 8b 00             	mov    (%rax),%rax
  8004205094:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004205098:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420509d:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042050a2:	48 89 c7             	mov    %rax,%rdi
  80042050a5:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  80042050ac:	00 00 00 
  80042050af:	ff d0                	callq  *%rax
  80042050b1:	85 c0                	test   %eax,%eax
  80042050b3:	74 35                	je     80042050ea <page_check+0x8ba>
  80042050b5:	48 b9 b0 24 21 04 80 	movabs $0x80042124b0,%rcx
  80042050bc:	00 00 00 
  80042050bf:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042050c6:	00 00 00 
  80042050c9:	be 34 04 00 00       	mov    $0x434,%esi
  80042050ce:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042050d5:	00 00 00 
  80042050d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050dd:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042050e4:	00 00 00 
  80042050e7:	41 ff d0             	callq  *%r8
    assert(check_va2pa(boot_pml4e, PGSIZE) == page2pa(pp3));
  80042050ea:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042050f1:	00 00 00 
  80042050f4:	48 8b 00             	mov    (%rax),%rax
  80042050f7:	be 00 10 00 00       	mov    $0x1000,%esi
  80042050fc:	48 89 c7             	mov    %rax,%rdi
  80042050ff:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  8004205106:	00 00 00 
  8004205109:	ff d0                	callq  *%rax
  800420510b:	48 89 c3             	mov    %rax,%rbx
  800420510e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205112:	48 89 c7             	mov    %rax,%rdi
  8004205115:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  800420511c:	00 00 00 
  800420511f:	ff d0                	callq  *%rax
  8004205121:	48 39 c3             	cmp    %rax,%rbx
  8004205124:	74 35                	je     800420515b <page_check+0x92b>
  8004205126:	48 b9 e8 24 21 04 80 	movabs $0x80042124e8,%rcx
  800420512d:	00 00 00 
  8004205130:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205137:	00 00 00 
  800420513a:	be 35 04 00 00       	mov    $0x435,%esi
  800420513f:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205146:	00 00 00 
  8004205149:	b8 00 00 00 00       	mov    $0x0,%eax
  800420514e:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205155:	00 00 00 
  8004205158:	41 ff d0             	callq  *%r8
    assert(pp3->pp_ref == 2);
  800420515b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420515f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205163:	66 83 f8 02          	cmp    $0x2,%ax
  8004205167:	74 35                	je     800420519e <page_check+0x96e>
  8004205169:	48 b9 18 25 21 04 80 	movabs $0x8004212518,%rcx
  8004205170:	00 00 00 
  8004205173:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420517a:	00 00 00 
  800420517d:	be 36 04 00 00       	mov    $0x436,%esi
  8004205182:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205189:	00 00 00 
  800420518c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205191:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205198:	00 00 00 
  800420519b:	41 ff d0             	callq  *%r8

    // should be no free memory
    assert(!page_alloc(0));
  800420519e:	bf 00 00 00 00       	mov    $0x0,%edi
  80042051a3:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  80042051aa:	00 00 00 
  80042051ad:	ff d0                	callq  *%rax
  80042051af:	48 85 c0             	test   %rax,%rax
  80042051b2:	74 35                	je     80042051e9 <page_check+0x9b9>
  80042051b4:	48 b9 27 20 21 04 80 	movabs $0x8004212027,%rcx
  80042051bb:	00 00 00 
  80042051be:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042051c5:	00 00 00 
  80042051c8:	be 39 04 00 00       	mov    $0x439,%esi
  80042051cd:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042051d4:	00 00 00 
  80042051d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051dc:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042051e3:	00 00 00 
  80042051e6:	41 ff d0             	callq  *%r8

    // should be able to map pp3 at PGSIZE because it's already there
    assert(page_insert(boot_pml4e, pp3, (void*) PGSIZE, 0) == 0);
  80042051e9:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042051f0:	00 00 00 
  80042051f3:	48 8b 00             	mov    (%rax),%rax
  80042051f6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042051fa:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042051ff:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004205204:	48 89 c7             	mov    %rax,%rdi
  8004205207:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  800420520e:	00 00 00 
  8004205211:	ff d0                	callq  *%rax
  8004205213:	85 c0                	test   %eax,%eax
  8004205215:	74 35                	je     800420524c <page_check+0xa1c>
  8004205217:	48 b9 b0 24 21 04 80 	movabs $0x80042124b0,%rcx
  800420521e:	00 00 00 
  8004205221:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205228:	00 00 00 
  800420522b:	be 3c 04 00 00       	mov    $0x43c,%esi
  8004205230:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205237:	00 00 00 
  800420523a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420523f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205246:	00 00 00 
  8004205249:	41 ff d0             	callq  *%r8


    assert(check_va2pa(boot_pml4e, PGSIZE) == page2pa(pp3));
  800420524c:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205253:	00 00 00 
  8004205256:	48 8b 00             	mov    (%rax),%rax
  8004205259:	be 00 10 00 00       	mov    $0x1000,%esi
  800420525e:	48 89 c7             	mov    %rax,%rdi
  8004205261:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  8004205268:	00 00 00 
  800420526b:	ff d0                	callq  *%rax
  800420526d:	48 89 c3             	mov    %rax,%rbx
  8004205270:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205274:	48 89 c7             	mov    %rax,%rdi
  8004205277:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  800420527e:	00 00 00 
  8004205281:	ff d0                	callq  *%rax
  8004205283:	48 39 c3             	cmp    %rax,%rbx
  8004205286:	74 35                	je     80042052bd <page_check+0xa8d>
  8004205288:	48 b9 e8 24 21 04 80 	movabs $0x80042124e8,%rcx
  800420528f:	00 00 00 
  8004205292:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205299:	00 00 00 
  800420529c:	be 3f 04 00 00       	mov    $0x43f,%esi
  80042052a1:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042052a8:	00 00 00 
  80042052ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042052b0:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042052b7:	00 00 00 
  80042052ba:	41 ff d0             	callq  *%r8
    assert(pp3->pp_ref == 2);
  80042052bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042052c1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042052c5:	66 83 f8 02          	cmp    $0x2,%ax
  80042052c9:	74 35                	je     8004205300 <page_check+0xad0>
  80042052cb:	48 b9 18 25 21 04 80 	movabs $0x8004212518,%rcx
  80042052d2:	00 00 00 
  80042052d5:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042052dc:	00 00 00 
  80042052df:	be 40 04 00 00       	mov    $0x440,%esi
  80042052e4:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042052eb:	00 00 00 
  80042052ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042052f3:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042052fa:	00 00 00 
  80042052fd:	41 ff d0             	callq  *%r8

    // pp3 should NOT be on the free list
    // could happen in ref counts are handled sloppily in page_insert
    assert(!page_alloc(0));
  8004205300:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205305:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  800420530c:	00 00 00 
  800420530f:	ff d0                	callq  *%rax
  8004205311:	48 85 c0             	test   %rax,%rax
  8004205314:	74 35                	je     800420534b <page_check+0xb1b>
  8004205316:	48 b9 27 20 21 04 80 	movabs $0x8004212027,%rcx
  800420531d:	00 00 00 
  8004205320:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205327:	00 00 00 
  800420532a:	be 44 04 00 00       	mov    $0x444,%esi
  800420532f:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205336:	00 00 00 
  8004205339:	b8 00 00 00 00       	mov    $0x0,%eax
  800420533e:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205345:	00 00 00 
  8004205348:	41 ff d0             	callq  *%r8
    // check that pgdir_walk returns a pointer to the pte
    pdpe = KADDR(PTE_ADDR(boot_pml4e[PML4(PGSIZE)]));
  800420534b:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205352:	00 00 00 
  8004205355:	48 8b 00             	mov    (%rax),%rax
  8004205358:	48 8b 00             	mov    (%rax),%rax
  800420535b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205361:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004205365:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205369:	48 c1 e8 0c          	shr    $0xc,%rax
  800420536d:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004205370:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004205373:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  800420537a:	00 00 00 
  800420537d:	48 8b 00             	mov    (%rax),%rax
  8004205380:	48 39 c2             	cmp    %rax,%rdx
  8004205383:	72 32                	jb     80042053b7 <page_check+0xb87>
  8004205385:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205389:	48 89 c1             	mov    %rax,%rcx
  800420538c:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004205393:	00 00 00 
  8004205396:	be 46 04 00 00       	mov    $0x446,%esi
  800420539b:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042053a2:	00 00 00 
  80042053a5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053aa:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042053b1:	00 00 00 
  80042053b4:	41 ff d0             	callq  *%r8
  80042053b7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042053be:	00 00 00 
  80042053c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042053c5:	48 01 d0             	add    %rdx,%rax
  80042053c8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    pde = KADDR(PTE_ADDR(pdpe[PDPE(PGSIZE)]));
  80042053cc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042053d0:	48 8b 00             	mov    (%rax),%rax
  80042053d3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042053d9:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042053dd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042053e1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042053e5:	89 45 8c             	mov    %eax,-0x74(%rbp)
  80042053e8:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042053eb:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042053f2:	00 00 00 
  80042053f5:	48 8b 00             	mov    (%rax),%rax
  80042053f8:	48 39 c2             	cmp    %rax,%rdx
  80042053fb:	72 32                	jb     800420542f <page_check+0xbff>
  80042053fd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004205401:	48 89 c1             	mov    %rax,%rcx
  8004205404:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  800420540b:	00 00 00 
  800420540e:	be 47 04 00 00       	mov    $0x447,%esi
  8004205413:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420541a:	00 00 00 
  800420541d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205422:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205429:	00 00 00 
  800420542c:	41 ff d0             	callq  *%r8
  800420542f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205436:	00 00 00 
  8004205439:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420543d:	48 01 d0             	add    %rdx,%rax
  8004205440:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    ptep = KADDR(PTE_ADDR(pde[PDX(PGSIZE)]));
  8004205444:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004205448:	48 8b 00             	mov    (%rax),%rax
  800420544b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205451:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004205458:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420545f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205463:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004205469:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  800420546f:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004205476:	00 00 00 
  8004205479:	48 8b 00             	mov    (%rax),%rax
  800420547c:	48 39 c2             	cmp    %rax,%rdx
  800420547f:	72 35                	jb     80042054b6 <page_check+0xc86>
  8004205481:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205488:	48 89 c1             	mov    %rax,%rcx
  800420548b:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004205492:	00 00 00 
  8004205495:	be 48 04 00 00       	mov    $0x448,%esi
  800420549a:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042054a1:	00 00 00 
  80042054a4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054a9:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042054b0:	00 00 00 
  80042054b3:	41 ff d0             	callq  *%r8
  80042054b6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042054bd:	00 00 00 
  80042054c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042054c7:	48 01 d0             	add    %rdx,%rax
  80042054ca:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    assert(pml4e_walk(boot_pml4e, (void*)PGSIZE, 0) == ptep+PTX(PGSIZE));
  80042054d1:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042054d8:	00 00 00 
  80042054db:	48 8b 00             	mov    (%rax),%rax
  80042054de:	ba 00 00 00 00       	mov    $0x0,%edx
  80042054e3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042054e8:	48 89 c7             	mov    %rax,%rdi
  80042054eb:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  80042054f2:	00 00 00 
  80042054f5:	ff d0                	callq  *%rax
  80042054f7:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  80042054fe:	48 83 c2 08          	add    $0x8,%rdx
  8004205502:	48 39 d0             	cmp    %rdx,%rax
  8004205505:	74 35                	je     800420553c <page_check+0xd0c>
  8004205507:	48 b9 30 25 21 04 80 	movabs $0x8004212530,%rcx
  800420550e:	00 00 00 
  8004205511:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205518:	00 00 00 
  800420551b:	be 49 04 00 00       	mov    $0x449,%esi
  8004205520:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205527:	00 00 00 
  800420552a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420552f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205536:	00 00 00 
  8004205539:	41 ff d0             	callq  *%r8

    // should be able to change permissions too.
    assert(page_insert(boot_pml4e, pp3, (void*) PGSIZE, PTE_U) == 0);
  800420553c:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205543:	00 00 00 
  8004205546:	48 8b 00             	mov    (%rax),%rax
  8004205549:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420554d:	b9 04 00 00 00       	mov    $0x4,%ecx
  8004205552:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004205557:	48 89 c7             	mov    %rax,%rdi
  800420555a:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  8004205561:	00 00 00 
  8004205564:	ff d0                	callq  *%rax
  8004205566:	85 c0                	test   %eax,%eax
  8004205568:	74 35                	je     800420559f <page_check+0xd6f>
  800420556a:	48 b9 70 25 21 04 80 	movabs $0x8004212570,%rcx
  8004205571:	00 00 00 
  8004205574:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420557b:	00 00 00 
  800420557e:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004205583:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420558a:	00 00 00 
  800420558d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205592:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205599:	00 00 00 
  800420559c:	41 ff d0             	callq  *%r8
    assert(check_va2pa(boot_pml4e, PGSIZE) == page2pa(pp3));
  800420559f:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042055a6:	00 00 00 
  80042055a9:	48 8b 00             	mov    (%rax),%rax
  80042055ac:	be 00 10 00 00       	mov    $0x1000,%esi
  80042055b1:	48 89 c7             	mov    %rax,%rdi
  80042055b4:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  80042055bb:	00 00 00 
  80042055be:	ff d0                	callq  *%rax
  80042055c0:	48 89 c3             	mov    %rax,%rbx
  80042055c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042055c7:	48 89 c7             	mov    %rax,%rdi
  80042055ca:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  80042055d1:	00 00 00 
  80042055d4:	ff d0                	callq  *%rax
  80042055d6:	48 39 c3             	cmp    %rax,%rbx
  80042055d9:	74 35                	je     8004205610 <page_check+0xde0>
  80042055db:	48 b9 e8 24 21 04 80 	movabs $0x80042124e8,%rcx
  80042055e2:	00 00 00 
  80042055e5:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042055ec:	00 00 00 
  80042055ef:	be 4d 04 00 00       	mov    $0x44d,%esi
  80042055f4:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042055fb:	00 00 00 
  80042055fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205603:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420560a:	00 00 00 
  800420560d:	41 ff d0             	callq  *%r8
    assert(pp3->pp_ref == 2);
  8004205610:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205614:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205618:	66 83 f8 02          	cmp    $0x2,%ax
  800420561c:	74 35                	je     8004205653 <page_check+0xe23>
  800420561e:	48 b9 18 25 21 04 80 	movabs $0x8004212518,%rcx
  8004205625:	00 00 00 
  8004205628:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420562f:	00 00 00 
  8004205632:	be 4e 04 00 00       	mov    $0x44e,%esi
  8004205637:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420563e:	00 00 00 
  8004205641:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205646:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420564d:	00 00 00 
  8004205650:	41 ff d0             	callq  *%r8
    assert(*pml4e_walk(boot_pml4e, (void*) PGSIZE, 0) & PTE_U);
  8004205653:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  800420565a:	00 00 00 
  800420565d:	48 8b 00             	mov    (%rax),%rax
  8004205660:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205665:	be 00 10 00 00       	mov    $0x1000,%esi
  800420566a:	48 89 c7             	mov    %rax,%rdi
  800420566d:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  8004205674:	00 00 00 
  8004205677:	ff d0                	callq  *%rax
  8004205679:	48 8b 00             	mov    (%rax),%rax
  800420567c:	83 e0 04             	and    $0x4,%eax
  800420567f:	48 85 c0             	test   %rax,%rax
  8004205682:	75 35                	jne    80042056b9 <page_check+0xe89>
  8004205684:	48 b9 b0 25 21 04 80 	movabs $0x80042125b0,%rcx
  800420568b:	00 00 00 
  800420568e:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205695:	00 00 00 
  8004205698:	be 4f 04 00 00       	mov    $0x44f,%esi
  800420569d:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042056a4:	00 00 00 
  80042056a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056ac:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042056b3:	00 00 00 
  80042056b6:	41 ff d0             	callq  *%r8
    assert(boot_pml4e[0] & PTE_U);
  80042056b9:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042056c0:	00 00 00 
  80042056c3:	48 8b 00             	mov    (%rax),%rax
  80042056c6:	48 8b 00             	mov    (%rax),%rax
  80042056c9:	83 e0 04             	and    $0x4,%eax
  80042056cc:	48 85 c0             	test   %rax,%rax
  80042056cf:	75 35                	jne    8004205706 <page_check+0xed6>
  80042056d1:	48 b9 e3 25 21 04 80 	movabs $0x80042125e3,%rcx
  80042056d8:	00 00 00 
  80042056db:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042056e2:	00 00 00 
  80042056e5:	be 50 04 00 00       	mov    $0x450,%esi
  80042056ea:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042056f1:	00 00 00 
  80042056f4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056f9:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205700:	00 00 00 
  8004205703:	41 ff d0             	callq  *%r8


    // should not be able to map at PTSIZE because need free page for page table
    assert(page_insert(boot_pml4e, pp0, (void*) PTSIZE, 0) < 0);
  8004205706:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  800420570d:	00 00 00 
  8004205710:	48 8b 00             	mov    (%rax),%rax
  8004205713:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004205717:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420571c:	ba 00 00 20 00       	mov    $0x200000,%edx
  8004205721:	48 89 c7             	mov    %rax,%rdi
  8004205724:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  800420572b:	00 00 00 
  800420572e:	ff d0                	callq  *%rax
  8004205730:	85 c0                	test   %eax,%eax
  8004205732:	78 35                	js     8004205769 <page_check+0xf39>
  8004205734:	48 b9 00 26 21 04 80 	movabs $0x8004212600,%rcx
  800420573b:	00 00 00 
  800420573e:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205745:	00 00 00 
  8004205748:	be 54 04 00 00       	mov    $0x454,%esi
  800420574d:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205754:	00 00 00 
  8004205757:	b8 00 00 00 00       	mov    $0x0,%eax
  800420575c:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205763:	00 00 00 
  8004205766:	41 ff d0             	callq  *%r8

    // insert pp1 at PGSIZE (replacing pp3)
    assert(page_insert(boot_pml4e, pp1, (void*) PGSIZE, 0) == 0);
  8004205769:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205770:	00 00 00 
  8004205773:	48 8b 00             	mov    (%rax),%rax
  8004205776:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420577a:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420577f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004205784:	48 89 c7             	mov    %rax,%rdi
  8004205787:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  800420578e:	00 00 00 
  8004205791:	ff d0                	callq  *%rax
  8004205793:	85 c0                	test   %eax,%eax
  8004205795:	74 35                	je     80042057cc <page_check+0xf9c>
  8004205797:	48 b9 38 26 21 04 80 	movabs $0x8004212638,%rcx
  800420579e:	00 00 00 
  80042057a1:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042057a8:	00 00 00 
  80042057ab:	be 57 04 00 00       	mov    $0x457,%esi
  80042057b0:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042057b7:	00 00 00 
  80042057ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057bf:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042057c6:	00 00 00 
  80042057c9:	41 ff d0             	callq  *%r8
    assert(!(*pml4e_walk(boot_pml4e, (void*) PGSIZE, 0) & PTE_U));
  80042057cc:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042057d3:	00 00 00 
  80042057d6:	48 8b 00             	mov    (%rax),%rax
  80042057d9:	ba 00 00 00 00       	mov    $0x0,%edx
  80042057de:	be 00 10 00 00       	mov    $0x1000,%esi
  80042057e3:	48 89 c7             	mov    %rax,%rdi
  80042057e6:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  80042057ed:	00 00 00 
  80042057f0:	ff d0                	callq  *%rax
  80042057f2:	48 8b 00             	mov    (%rax),%rax
  80042057f5:	83 e0 04             	and    $0x4,%eax
  80042057f8:	48 85 c0             	test   %rax,%rax
  80042057fb:	74 35                	je     8004205832 <page_check+0x1002>
  80042057fd:	48 b9 70 26 21 04 80 	movabs $0x8004212670,%rcx
  8004205804:	00 00 00 
  8004205807:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420580e:	00 00 00 
  8004205811:	be 58 04 00 00       	mov    $0x458,%esi
  8004205816:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420581d:	00 00 00 
  8004205820:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205825:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420582c:	00 00 00 
  800420582f:	41 ff d0             	callq  *%r8

    // should have pp1 at both 0 and PGSIZE
    assert(check_va2pa(boot_pml4e, 0) == page2pa(pp1));
  8004205832:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205839:	00 00 00 
  800420583c:	48 8b 00             	mov    (%rax),%rax
  800420583f:	be 00 00 00 00       	mov    $0x0,%esi
  8004205844:	48 89 c7             	mov    %rax,%rdi
  8004205847:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  800420584e:	00 00 00 
  8004205851:	ff d0                	callq  *%rax
  8004205853:	48 89 c3             	mov    %rax,%rbx
  8004205856:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420585a:	48 89 c7             	mov    %rax,%rdi
  800420585d:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004205864:	00 00 00 
  8004205867:	ff d0                	callq  *%rax
  8004205869:	48 39 c3             	cmp    %rax,%rbx
  800420586c:	74 35                	je     80042058a3 <page_check+0x1073>
  800420586e:	48 b9 a8 26 21 04 80 	movabs $0x80042126a8,%rcx
  8004205875:	00 00 00 
  8004205878:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420587f:	00 00 00 
  8004205882:	be 5b 04 00 00       	mov    $0x45b,%esi
  8004205887:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420588e:	00 00 00 
  8004205891:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205896:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420589d:	00 00 00 
  80042058a0:	41 ff d0             	callq  *%r8
    assert(check_va2pa(boot_pml4e, PGSIZE) == page2pa(pp1));
  80042058a3:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042058aa:	00 00 00 
  80042058ad:	48 8b 00             	mov    (%rax),%rax
  80042058b0:	be 00 10 00 00       	mov    $0x1000,%esi
  80042058b5:	48 89 c7             	mov    %rax,%rdi
  80042058b8:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  80042058bf:	00 00 00 
  80042058c2:	ff d0                	callq  *%rax
  80042058c4:	48 89 c3             	mov    %rax,%rbx
  80042058c7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042058cb:	48 89 c7             	mov    %rax,%rdi
  80042058ce:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  80042058d5:	00 00 00 
  80042058d8:	ff d0                	callq  *%rax
  80042058da:	48 39 c3             	cmp    %rax,%rbx
  80042058dd:	74 35                	je     8004205914 <page_check+0x10e4>
  80042058df:	48 b9 d8 26 21 04 80 	movabs $0x80042126d8,%rcx
  80042058e6:	00 00 00 
  80042058e9:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042058f0:	00 00 00 
  80042058f3:	be 5c 04 00 00       	mov    $0x45c,%esi
  80042058f8:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042058ff:	00 00 00 
  8004205902:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205907:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420590e:	00 00 00 
  8004205911:	41 ff d0             	callq  *%r8
    // ... and ref counts should reflect this
    assert(pp1->pp_ref == 2);
  8004205914:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205918:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420591c:	66 83 f8 02          	cmp    $0x2,%ax
  8004205920:	74 35                	je     8004205957 <page_check+0x1127>
  8004205922:	48 b9 08 27 21 04 80 	movabs $0x8004212708,%rcx
  8004205929:	00 00 00 
  800420592c:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205933:	00 00 00 
  8004205936:	be 5e 04 00 00       	mov    $0x45e,%esi
  800420593b:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205942:	00 00 00 
  8004205945:	b8 00 00 00 00       	mov    $0x0,%eax
  800420594a:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205951:	00 00 00 
  8004205954:	41 ff d0             	callq  *%r8
    assert(pp3->pp_ref == 1);
  8004205957:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420595b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420595f:	66 83 f8 01          	cmp    $0x1,%ax
  8004205963:	74 35                	je     800420599a <page_check+0x116a>
  8004205965:	48 b9 19 27 21 04 80 	movabs $0x8004212719,%rcx
  800420596c:	00 00 00 
  800420596f:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205976:	00 00 00 
  8004205979:	be 5f 04 00 00       	mov    $0x45f,%esi
  800420597e:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205985:	00 00 00 
  8004205988:	b8 00 00 00 00       	mov    $0x0,%eax
  800420598d:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205994:	00 00 00 
  8004205997:	41 ff d0             	callq  *%r8


    // unmapping pp1 at 0 should keep pp1 at PGSIZE
    page_remove(boot_pml4e, 0x0);
  800420599a:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042059a1:	00 00 00 
  80042059a4:	48 8b 00             	mov    (%rax),%rax
  80042059a7:	be 00 00 00 00       	mov    $0x0,%esi
  80042059ac:	48 89 c7             	mov    %rax,%rdi
  80042059af:	48 b8 b9 2d 20 04 80 	movabs $0x8004202db9,%rax
  80042059b6:	00 00 00 
  80042059b9:	ff d0                	callq  *%rax
    assert(check_va2pa(boot_pml4e, 0x0) == ~0);
  80042059bb:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042059c2:	00 00 00 
  80042059c5:	48 8b 00             	mov    (%rax),%rax
  80042059c8:	be 00 00 00 00       	mov    $0x0,%esi
  80042059cd:	48 89 c7             	mov    %rax,%rdi
  80042059d0:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  80042059d7:	00 00 00 
  80042059da:	ff d0                	callq  *%rax
  80042059dc:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  80042059e0:	74 35                	je     8004205a17 <page_check+0x11e7>
  80042059e2:	48 b9 30 27 21 04 80 	movabs $0x8004212730,%rcx
  80042059e9:	00 00 00 
  80042059ec:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042059f3:	00 00 00 
  80042059f6:	be 64 04 00 00       	mov    $0x464,%esi
  80042059fb:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205a02:	00 00 00 
  8004205a05:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a0a:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205a11:	00 00 00 
  8004205a14:	41 ff d0             	callq  *%r8
    assert(check_va2pa(boot_pml4e, PGSIZE) == page2pa(pp1));
  8004205a17:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205a1e:	00 00 00 
  8004205a21:	48 8b 00             	mov    (%rax),%rax
  8004205a24:	be 00 10 00 00       	mov    $0x1000,%esi
  8004205a29:	48 89 c7             	mov    %rax,%rdi
  8004205a2c:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  8004205a33:	00 00 00 
  8004205a36:	ff d0                	callq  *%rax
  8004205a38:	48 89 c3             	mov    %rax,%rbx
  8004205a3b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205a3f:	48 89 c7             	mov    %rax,%rdi
  8004205a42:	48 b8 77 13 20 04 80 	movabs $0x8004201377,%rax
  8004205a49:	00 00 00 
  8004205a4c:	ff d0                	callq  *%rax
  8004205a4e:	48 39 c3             	cmp    %rax,%rbx
  8004205a51:	74 35                	je     8004205a88 <page_check+0x1258>
  8004205a53:	48 b9 d8 26 21 04 80 	movabs $0x80042126d8,%rcx
  8004205a5a:	00 00 00 
  8004205a5d:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205a64:	00 00 00 
  8004205a67:	be 65 04 00 00       	mov    $0x465,%esi
  8004205a6c:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205a73:	00 00 00 
  8004205a76:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a7b:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205a82:	00 00 00 
  8004205a85:	41 ff d0             	callq  *%r8
    assert(pp1->pp_ref == 1);
  8004205a88:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205a8c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205a90:	66 83 f8 01          	cmp    $0x1,%ax
  8004205a94:	74 35                	je     8004205acb <page_check+0x129b>
  8004205a96:	48 b9 7d 24 21 04 80 	movabs $0x800421247d,%rcx
  8004205a9d:	00 00 00 
  8004205aa0:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205aa7:	00 00 00 
  8004205aaa:	be 66 04 00 00       	mov    $0x466,%esi
  8004205aaf:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205ab6:	00 00 00 
  8004205ab9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205abe:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205ac5:	00 00 00 
  8004205ac8:	41 ff d0             	callq  *%r8
    assert(pp3->pp_ref == 1);
  8004205acb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205acf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205ad3:	66 83 f8 01          	cmp    $0x1,%ax
  8004205ad7:	74 35                	je     8004205b0e <page_check+0x12de>
  8004205ad9:	48 b9 19 27 21 04 80 	movabs $0x8004212719,%rcx
  8004205ae0:	00 00 00 
  8004205ae3:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205aea:	00 00 00 
  8004205aed:	be 67 04 00 00       	mov    $0x467,%esi
  8004205af2:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205af9:	00 00 00 
  8004205afc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b01:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205b08:	00 00 00 
  8004205b0b:	41 ff d0             	callq  *%r8

    // Test re-inserting pp1 at PGSIZE.
    // Thanks to Varun Agrawal for suggesting this test case.
    assert(page_insert(boot_pml4e, pp1, (void*) PGSIZE, 0) == 0);
  8004205b0e:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205b15:	00 00 00 
  8004205b18:	48 8b 00             	mov    (%rax),%rax
  8004205b1b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205b1f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205b24:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004205b29:	48 89 c7             	mov    %rax,%rdi
  8004205b2c:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  8004205b33:	00 00 00 
  8004205b36:	ff d0                	callq  *%rax
  8004205b38:	85 c0                	test   %eax,%eax
  8004205b3a:	74 35                	je     8004205b71 <page_check+0x1341>
  8004205b3c:	48 b9 38 26 21 04 80 	movabs $0x8004212638,%rcx
  8004205b43:	00 00 00 
  8004205b46:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205b4d:	00 00 00 
  8004205b50:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004205b55:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205b5c:	00 00 00 
  8004205b5f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b64:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205b6b:	00 00 00 
  8004205b6e:	41 ff d0             	callq  *%r8
    assert(pp1->pp_ref);
  8004205b71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205b75:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205b79:	66 85 c0             	test   %ax,%ax
  8004205b7c:	75 35                	jne    8004205bb3 <page_check+0x1383>
  8004205b7e:	48 b9 53 27 21 04 80 	movabs $0x8004212753,%rcx
  8004205b85:	00 00 00 
  8004205b88:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205b8f:	00 00 00 
  8004205b92:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004205b97:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205b9e:	00 00 00 
  8004205ba1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ba6:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205bad:	00 00 00 
  8004205bb0:	41 ff d0             	callq  *%r8
    assert(pp1->pp_link == NULL);
  8004205bb3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205bb7:	48 8b 00             	mov    (%rax),%rax
  8004205bba:	48 85 c0             	test   %rax,%rax
  8004205bbd:	74 35                	je     8004205bf4 <page_check+0x13c4>
  8004205bbf:	48 b9 5f 27 21 04 80 	movabs $0x800421275f,%rcx
  8004205bc6:	00 00 00 
  8004205bc9:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205bd0:	00 00 00 
  8004205bd3:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004205bd8:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205bdf:	00 00 00 
  8004205be2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205be7:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205bee:	00 00 00 
  8004205bf1:	41 ff d0             	callq  *%r8

    // unmapping pp1 at PGSIZE should free it
    page_remove(boot_pml4e, (void*) PGSIZE);
  8004205bf4:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205bfb:	00 00 00 
  8004205bfe:	48 8b 00             	mov    (%rax),%rax
  8004205c01:	be 00 10 00 00       	mov    $0x1000,%esi
  8004205c06:	48 89 c7             	mov    %rax,%rdi
  8004205c09:	48 b8 b9 2d 20 04 80 	movabs $0x8004202db9,%rax
  8004205c10:	00 00 00 
  8004205c13:	ff d0                	callq  *%rax
    assert(check_va2pa(boot_pml4e, 0x0) == ~0);
  8004205c15:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205c1c:	00 00 00 
  8004205c1f:	48 8b 00             	mov    (%rax),%rax
  8004205c22:	be 00 00 00 00       	mov    $0x0,%esi
  8004205c27:	48 89 c7             	mov    %rax,%rdi
  8004205c2a:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  8004205c31:	00 00 00 
  8004205c34:	ff d0                	callq  *%rax
  8004205c36:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004205c3a:	74 35                	je     8004205c71 <page_check+0x1441>
  8004205c3c:	48 b9 30 27 21 04 80 	movabs $0x8004212730,%rcx
  8004205c43:	00 00 00 
  8004205c46:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205c4d:	00 00 00 
  8004205c50:	be 71 04 00 00       	mov    $0x471,%esi
  8004205c55:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205c5c:	00 00 00 
  8004205c5f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c64:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205c6b:	00 00 00 
  8004205c6e:	41 ff d0             	callq  *%r8
    assert(check_va2pa(boot_pml4e, PGSIZE) == ~0);
  8004205c71:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205c78:	00 00 00 
  8004205c7b:	48 8b 00             	mov    (%rax),%rax
  8004205c7e:	be 00 10 00 00       	mov    $0x1000,%esi
  8004205c83:	48 89 c7             	mov    %rax,%rdi
  8004205c86:	48 b8 b6 45 20 04 80 	movabs $0x80042045b6,%rax
  8004205c8d:	00 00 00 
  8004205c90:	ff d0                	callq  *%rax
  8004205c92:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004205c96:	74 35                	je     8004205ccd <page_check+0x149d>
  8004205c98:	48 b9 78 27 21 04 80 	movabs $0x8004212778,%rcx
  8004205c9f:	00 00 00 
  8004205ca2:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205ca9:	00 00 00 
  8004205cac:	be 72 04 00 00       	mov    $0x472,%esi
  8004205cb1:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205cb8:	00 00 00 
  8004205cbb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cc0:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205cc7:	00 00 00 
  8004205cca:	41 ff d0             	callq  *%r8
    assert(pp1->pp_ref == 0);
  8004205ccd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205cd1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205cd5:	66 85 c0             	test   %ax,%ax
  8004205cd8:	74 35                	je     8004205d0f <page_check+0x14df>
  8004205cda:	48 b9 9e 27 21 04 80 	movabs $0x800421279e,%rcx
  8004205ce1:	00 00 00 
  8004205ce4:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205ceb:	00 00 00 
  8004205cee:	be 73 04 00 00       	mov    $0x473,%esi
  8004205cf3:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205cfa:	00 00 00 
  8004205cfd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d02:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205d09:	00 00 00 
  8004205d0c:	41 ff d0             	callq  *%r8
    assert(pp3->pp_ref == 1);
  8004205d0f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205d13:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205d17:	66 83 f8 01          	cmp    $0x1,%ax
  8004205d1b:	74 35                	je     8004205d52 <page_check+0x1522>
  8004205d1d:	48 b9 19 27 21 04 80 	movabs $0x8004212719,%rcx
  8004205d24:	00 00 00 
  8004205d27:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205d2e:	00 00 00 
  8004205d31:	be 74 04 00 00       	mov    $0x474,%esi
  8004205d36:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205d3d:	00 00 00 
  8004205d40:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d45:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205d4c:	00 00 00 
  8004205d4f:	41 ff d0             	callq  *%r8
  page_remove(boot_pgdir, 0x0);
  assert(pp2->pp_ref == 0);
#endif

    // forcibly take pp3 back
    struct PageInfo *pp_l1 = pa2page(PTE_ADDR(boot_pml4e[0]));
  8004205d52:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205d59:	00 00 00 
  8004205d5c:	48 8b 00             	mov    (%rax),%rax
  8004205d5f:	48 8b 00             	mov    (%rax),%rax
  8004205d62:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205d68:	48 89 c7             	mov    %rax,%rdi
  8004205d6b:	48 b8 9c 13 20 04 80 	movabs $0x800420139c,%rax
  8004205d72:	00 00 00 
  8004205d75:	ff d0                	callq  *%rax
  8004205d77:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    boot_pml4e[0] = 0;
  8004205d7e:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205d85:	00 00 00 
  8004205d88:	48 8b 00             	mov    (%rax),%rax
  8004205d8b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    assert(pp3->pp_ref == 1);
  8004205d92:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205d96:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004205d9a:	66 83 f8 01          	cmp    $0x1,%ax
  8004205d9e:	74 35                	je     8004205dd5 <page_check+0x15a5>
  8004205da0:	48 b9 19 27 21 04 80 	movabs $0x8004212719,%rcx
  8004205da7:	00 00 00 
  8004205daa:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004205db1:	00 00 00 
  8004205db4:	be 8a 04 00 00       	mov    $0x48a,%esi
  8004205db9:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205dc0:	00 00 00 
  8004205dc3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dc8:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205dcf:	00 00 00 
  8004205dd2:	41 ff d0             	callq  *%r8
    page_decref(pp_l1);
  8004205dd5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004205ddc:	48 89 c7             	mov    %rax,%rdi
  8004205ddf:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  8004205de6:	00 00 00 
  8004205de9:	ff d0                	callq  *%rax
    // check pointer arithmetic in pml4e_walk
    if (pp_l1 != pp3) page_decref(pp3);
  8004205deb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004205df2:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205df6:	74 13                	je     8004205e0b <page_check+0x15db>
  8004205df8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dfc:	48 89 c7             	mov    %rax,%rdi
  8004205dff:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  8004205e06:	00 00 00 
  8004205e09:	ff d0                	callq  *%rax
    if (pp_l1 != pp2) page_decref(pp2);
  8004205e0b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004205e12:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e16:	74 13                	je     8004205e2b <page_check+0x15fb>
  8004205e18:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205e1c:	48 89 c7             	mov    %rax,%rdi
  8004205e1f:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  8004205e26:	00 00 00 
  8004205e29:	ff d0                	callq  *%rax
    if (pp_l1 != pp0) page_decref(pp0);
  8004205e2b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004205e32:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e36:	74 13                	je     8004205e4b <page_check+0x161b>
  8004205e38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205e3c:	48 89 c7             	mov    %rax,%rdi
  8004205e3f:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  8004205e46:	00 00 00 
  8004205e49:	ff d0                	callq  *%rax
    va = (void*)(PGSIZE * 100);
  8004205e4b:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  8004205e52:	00 40 06 00 
    ptep = pml4e_walk(boot_pml4e, va, 1);
  8004205e56:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205e5d:	00 00 00 
  8004205e60:	48 8b 00             	mov    (%rax),%rax
  8004205e63:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004205e6a:	ba 01 00 00 00       	mov    $0x1,%edx
  8004205e6f:	48 89 ce             	mov    %rcx,%rsi
  8004205e72:	48 89 c7             	mov    %rax,%rdi
  8004205e75:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  8004205e7c:	00 00 00 
  8004205e7f:	ff d0                	callq  *%rax
  8004205e81:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    pdpe = KADDR(PTE_ADDR(boot_pml4e[PML4(va)]));
  8004205e88:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004205e8f:	00 00 00 
  8004205e92:	48 8b 00             	mov    (%rax),%rax
  8004205e95:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004205e9c:	48 c1 ea 27          	shr    $0x27,%rdx
  8004205ea0:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004205ea6:	48 c1 e2 03          	shl    $0x3,%rdx
  8004205eaa:	48 01 d0             	add    %rdx,%rax
  8004205ead:	48 8b 00             	mov    (%rax),%rax
  8004205eb0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205eb6:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004205ebd:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004205ec4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205ec8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004205ece:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  8004205ed4:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004205edb:	00 00 00 
  8004205ede:	48 8b 00             	mov    (%rax),%rax
  8004205ee1:	48 39 c2             	cmp    %rax,%rdx
  8004205ee4:	72 35                	jb     8004205f1b <page_check+0x16eb>
  8004205ee6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004205eed:	48 89 c1             	mov    %rax,%rcx
  8004205ef0:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004205ef7:	00 00 00 
  8004205efa:	be 92 04 00 00       	mov    $0x492,%esi
  8004205eff:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205f06:	00 00 00 
  8004205f09:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f0e:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205f15:	00 00 00 
  8004205f18:	41 ff d0             	callq  *%r8
  8004205f1b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205f22:	00 00 00 
  8004205f25:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004205f2c:	48 01 d0             	add    %rdx,%rax
  8004205f2f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    pde  = KADDR(PTE_ADDR(pdpe[PDPE(va)]));
  8004205f33:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004205f3a:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205f3e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205f43:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205f4a:	00 
  8004205f4b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004205f4f:	48 01 d0             	add    %rdx,%rax
  8004205f52:	48 8b 00             	mov    (%rax),%rax
  8004205f55:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205f5b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004205f62:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004205f69:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205f6d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  8004205f73:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004205f79:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004205f80:	00 00 00 
  8004205f83:	48 8b 00             	mov    (%rax),%rax
  8004205f86:	48 39 c2             	cmp    %rax,%rdx
  8004205f89:	72 35                	jb     8004205fc0 <page_check+0x1790>
  8004205f8b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004205f92:	48 89 c1             	mov    %rax,%rcx
  8004205f95:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004205f9c:	00 00 00 
  8004205f9f:	be 93 04 00 00       	mov    $0x493,%esi
  8004205fa4:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004205fab:	00 00 00 
  8004205fae:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fb3:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004205fba:	00 00 00 
  8004205fbd:	41 ff d0             	callq  *%r8
  8004205fc0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205fc7:	00 00 00 
  8004205fca:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004205fd1:	48 01 d0             	add    %rdx,%rax
  8004205fd4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    ptep1 = KADDR(PTE_ADDR(pde[PDX(va)]));
  8004205fd8:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004205fdf:	48 c1 e8 15          	shr    $0x15,%rax
  8004205fe3:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205fe8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205fef:	00 
  8004205ff0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004205ff4:	48 01 d0             	add    %rdx,%rax
  8004205ff7:	48 8b 00             	mov    (%rax),%rax
  8004205ffa:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206000:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004206007:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800420600e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206012:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  8004206018:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  800420601e:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004206025:	00 00 00 
  8004206028:	48 8b 00             	mov    (%rax),%rax
  800420602b:	48 39 c2             	cmp    %rax,%rdx
  800420602e:	72 35                	jb     8004206065 <page_check+0x1835>
  8004206030:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004206037:	48 89 c1             	mov    %rax,%rcx
  800420603a:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004206041:	00 00 00 
  8004206044:	be 94 04 00 00       	mov    $0x494,%esi
  8004206049:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004206050:	00 00 00 
  8004206053:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206058:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420605f:	00 00 00 
  8004206062:	41 ff d0             	callq  *%r8
  8004206065:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420606c:	00 00 00 
  800420606f:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004206076:	48 01 d0             	add    %rdx,%rax
  8004206079:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    assert(ptep == ptep1 + PTX(va));
  8004206080:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004206087:	48 c1 e8 0c          	shr    $0xc,%rax
  800420608b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004206090:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004206097:	00 
  8004206098:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420609f:	48 01 c2             	add    %rax,%rdx
  80042060a2:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042060a9:	48 39 c2             	cmp    %rax,%rdx
  80042060ac:	74 35                	je     80042060e3 <page_check+0x18b3>
  80042060ae:	48 b9 af 27 21 04 80 	movabs $0x80042127af,%rcx
  80042060b5:	00 00 00 
  80042060b8:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042060bf:	00 00 00 
  80042060c2:	be 95 04 00 00       	mov    $0x495,%esi
  80042060c7:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042060ce:	00 00 00 
  80042060d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042060d6:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042060dd:	00 00 00 
  80042060e0:	41 ff d0             	callq  *%r8

    // check that new page tables get cleared
    memset(page2kva(pp4), 0xFF, PGSIZE);
  80042060e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042060e7:	48 89 c7             	mov    %rax,%rdi
  80042060ea:	48 b8 0d 14 20 04 80 	movabs $0x800420140d,%rax
  80042060f1:	00 00 00 
  80042060f4:	ff d0                	callq  *%rax
  80042060f6:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042060fb:	be ff 00 00 00       	mov    $0xff,%esi
  8004206100:	48 89 c7             	mov    %rax,%rdi
  8004206103:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420610a:	00 00 00 
  800420610d:	ff d0                	callq  *%rax
    pml4e_walk(boot_pml4e, 0x0, 1);
  800420610f:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004206116:	00 00 00 
  8004206119:	48 8b 00             	mov    (%rax),%rax
  800420611c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004206121:	be 00 00 00 00       	mov    $0x0,%esi
  8004206126:	48 89 c7             	mov    %rax,%rdi
  8004206129:	48 b8 75 27 20 04 80 	movabs $0x8004202775,%rax
  8004206130:	00 00 00 
  8004206133:	ff d0                	callq  *%rax
    pdpe = KADDR(PTE_ADDR(boot_pml4e[0]));
  8004206135:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  800420613c:	00 00 00 
  800420613f:	48 8b 00             	mov    (%rax),%rax
  8004206142:	48 8b 00             	mov    (%rax),%rax
  8004206145:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420614b:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004206152:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004206159:	48 c1 e8 0c          	shr    $0xc,%rax
  800420615d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  8004206163:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004206169:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004206170:	00 00 00 
  8004206173:	48 8b 00             	mov    (%rax),%rax
  8004206176:	48 39 c2             	cmp    %rax,%rdx
  8004206179:	72 35                	jb     80042061b0 <page_check+0x1980>
  800420617b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004206182:	48 89 c1             	mov    %rax,%rcx
  8004206185:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  800420618c:	00 00 00 
  800420618f:	be 9a 04 00 00       	mov    $0x49a,%esi
  8004206194:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420619b:	00 00 00 
  800420619e:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061a3:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042061aa:	00 00 00 
  80042061ad:	41 ff d0             	callq  *%r8
  80042061b0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042061b7:	00 00 00 
  80042061ba:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042061c1:	48 01 d0             	add    %rdx,%rax
  80042061c4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    pde  = KADDR(PTE_ADDR(pdpe[0]));
  80042061c8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042061cc:	48 8b 00             	mov    (%rax),%rax
  80042061cf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042061d5:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042061dc:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042061e3:	48 c1 e8 0c          	shr    $0xc,%rax
  80042061e7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042061ed:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  80042061f3:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042061fa:	00 00 00 
  80042061fd:	48 8b 00             	mov    (%rax),%rax
  8004206200:	48 39 c2             	cmp    %rax,%rdx
  8004206203:	72 35                	jb     800420623a <page_check+0x1a0a>
  8004206205:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800420620c:	48 89 c1             	mov    %rax,%rcx
  800420620f:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  8004206216:	00 00 00 
  8004206219:	be 9b 04 00 00       	mov    $0x49b,%esi
  800420621e:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004206225:	00 00 00 
  8004206228:	b8 00 00 00 00       	mov    $0x0,%eax
  800420622d:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004206234:	00 00 00 
  8004206237:	41 ff d0             	callq  *%r8
  800420623a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206241:	00 00 00 
  8004206244:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800420624b:	48 01 d0             	add    %rdx,%rax
  800420624e:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    ptep  = KADDR(PTE_ADDR(pde[0]));
  8004206252:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004206256:	48 8b 00             	mov    (%rax),%rax
  8004206259:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420625f:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004206266:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420626d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206271:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  8004206277:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  800420627d:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004206284:	00 00 00 
  8004206287:	48 8b 00             	mov    (%rax),%rax
  800420628a:	48 39 c2             	cmp    %rax,%rdx
  800420628d:	72 35                	jb     80042062c4 <page_check+0x1a94>
  800420628f:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004206296:	48 89 c1             	mov    %rax,%rcx
  8004206299:	48 ba 48 1b 21 04 80 	movabs $0x8004211b48,%rdx
  80042062a0:	00 00 00 
  80042062a3:	be 9c 04 00 00       	mov    $0x49c,%esi
  80042062a8:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042062af:	00 00 00 
  80042062b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062b7:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042062be:	00 00 00 
  80042062c1:	41 ff d0             	callq  *%r8
  80042062c4:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042062cb:	00 00 00 
  80042062ce:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042062d5:	48 01 d0             	add    %rdx,%rax
  80042062d8:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    for(i=0; i<NPTENTRIES; i++)
  80042062df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042062e6:	eb 58                	jmp    8004206340 <page_check+0x1b10>
        assert((ptep[i] & PTE_P) == 0);
  80042062e8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042062ef:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042062f2:	48 63 d2             	movslq %edx,%rdx
  80042062f5:	48 c1 e2 03          	shl    $0x3,%rdx
  80042062f9:	48 01 d0             	add    %rdx,%rax
  80042062fc:	48 8b 00             	mov    (%rax),%rax
  80042062ff:	83 e0 01             	and    $0x1,%eax
  8004206302:	48 85 c0             	test   %rax,%rax
  8004206305:	74 35                	je     800420633c <page_check+0x1b0c>
  8004206307:	48 b9 c7 27 21 04 80 	movabs $0x80042127c7,%rcx
  800420630e:	00 00 00 
  8004206311:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004206318:	00 00 00 
  800420631b:	be 9e 04 00 00       	mov    $0x49e,%esi
  8004206320:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004206327:	00 00 00 
  800420632a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420632f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004206336:	00 00 00 
  8004206339:	41 ff d0             	callq  *%r8
    memset(page2kva(pp4), 0xFF, PGSIZE);
    pml4e_walk(boot_pml4e, 0x0, 1);
    pdpe = KADDR(PTE_ADDR(boot_pml4e[0]));
    pde  = KADDR(PTE_ADDR(pdpe[0]));
    ptep  = KADDR(PTE_ADDR(pde[0]));
    for(i=0; i<NPTENTRIES; i++)
  800420633c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004206340:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  8004206347:	7e 9f                	jle    80042062e8 <page_check+0x1ab8>
        assert((ptep[i] & PTE_P) == 0);
    boot_pml4e[0] = 0;
  8004206349:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  8004206350:	00 00 00 
  8004206353:	48 8b 00             	mov    (%rax),%rax
  8004206356:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

    // give free list back
    page_free_list = fl;
  800420635d:	48 b8 78 c1 2b 04 80 	movabs $0x80042bc178,%rax
  8004206364:	00 00 00 
  8004206367:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420636b:	48 89 10             	mov    %rdx,(%rax)

    // free the pages we took
    page_decref(pp0);
  800420636e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206372:	48 89 c7             	mov    %rax,%rdi
  8004206375:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  800420637c:	00 00 00 
  800420637f:	ff d0                	callq  *%rax
    page_decref(pp2);
  8004206381:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206385:	48 89 c7             	mov    %rax,%rdi
  8004206388:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  800420638f:	00 00 00 
  8004206392:	ff d0                	callq  *%rax
    page_decref(pp3);
  8004206394:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206398:	48 89 c7             	mov    %rax,%rdi
  800420639b:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  80042063a2:	00 00 00 
  80042063a5:	ff d0                	callq  *%rax

    // Triple check that we got the ref counts right
    assert(pp0->pp_ref == 0);
  80042063a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042063ab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063af:	66 85 c0             	test   %ax,%ax
  80042063b2:	74 35                	je     80042063e9 <page_check+0x1bb9>
  80042063b4:	48 b9 de 27 21 04 80 	movabs $0x80042127de,%rcx
  80042063bb:	00 00 00 
  80042063be:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042063c5:	00 00 00 
  80042063c8:	be aa 04 00 00       	mov    $0x4aa,%esi
  80042063cd:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042063d4:	00 00 00 
  80042063d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063dc:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042063e3:	00 00 00 
  80042063e6:	41 ff d0             	callq  *%r8
    assert(pp1->pp_ref == 0);
  80042063e9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042063ed:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063f1:	66 85 c0             	test   %ax,%ax
  80042063f4:	74 35                	je     800420642b <page_check+0x1bfb>
  80042063f6:	48 b9 9e 27 21 04 80 	movabs $0x800421279e,%rcx
  80042063fd:	00 00 00 
  8004206400:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004206407:	00 00 00 
  800420640a:	be ab 04 00 00       	mov    $0x4ab,%esi
  800420640f:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004206416:	00 00 00 
  8004206419:	b8 00 00 00 00       	mov    $0x0,%eax
  800420641e:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004206425:	00 00 00 
  8004206428:	41 ff d0             	callq  *%r8
    assert(pp2->pp_ref == 0);
  800420642b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420642f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206433:	66 85 c0             	test   %ax,%ax
  8004206436:	74 35                	je     800420646d <page_check+0x1c3d>
  8004206438:	48 b9 ef 27 21 04 80 	movabs $0x80042127ef,%rcx
  800420643f:	00 00 00 
  8004206442:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  8004206449:	00 00 00 
  800420644c:	be ac 04 00 00       	mov    $0x4ac,%esi
  8004206451:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  8004206458:	00 00 00 
  800420645b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206460:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004206467:	00 00 00 
  800420646a:	41 ff d0             	callq  *%r8
    assert(pp3->pp_ref == 0);
  800420646d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206471:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206475:	66 85 c0             	test   %ax,%ax
  8004206478:	74 35                	je     80042064af <page_check+0x1c7f>
  800420647a:	48 b9 00 28 21 04 80 	movabs $0x8004212800,%rcx
  8004206481:	00 00 00 
  8004206484:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420648b:	00 00 00 
  800420648e:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004206493:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420649a:	00 00 00 
  800420649d:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064a2:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042064a9:	00 00 00 
  80042064ac:	41 ff d0             	callq  *%r8
    assert(pp4->pp_ref == 0);
  80042064af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042064b3:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042064b7:	66 85 c0             	test   %ax,%ax
  80042064ba:	74 35                	je     80042064f1 <page_check+0x1cc1>
  80042064bc:	48 b9 11 28 21 04 80 	movabs $0x8004212811,%rcx
  80042064c3:	00 00 00 
  80042064c6:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  80042064cd:	00 00 00 
  80042064d0:	be ae 04 00 00       	mov    $0x4ae,%esi
  80042064d5:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  80042064dc:	00 00 00 
  80042064df:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064e4:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042064eb:	00 00 00 
  80042064ee:	41 ff d0             	callq  *%r8
    assert(pp5->pp_ref == 0);
  80042064f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042064f5:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042064f9:	66 85 c0             	test   %ax,%ax
  80042064fc:	74 35                	je     8004206533 <page_check+0x1d03>
  80042064fe:	48 b9 22 28 21 04 80 	movabs $0x8004212822,%rcx
  8004206505:	00 00 00 
  8004206508:	48 ba c1 1b 21 04 80 	movabs $0x8004211bc1,%rdx
  800420650f:	00 00 00 
  8004206512:	be af 04 00 00       	mov    $0x4af,%esi
  8004206517:	48 bf d6 1b 21 04 80 	movabs $0x8004211bd6,%rdi
  800420651e:	00 00 00 
  8004206521:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206526:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420652d:	00 00 00 
  8004206530:	41 ff d0             	callq  *%r8

    cprintf("check_page() succeeded!\n");
  8004206533:	48 bf 33 28 21 04 80 	movabs $0x8004212833,%rdi
  800420653a:	00 00 00 
  800420653d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206542:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004206549:	00 00 00 
  800420654c:	ff d2                	callq  *%rdx
}
  800420654e:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004206555:	5b                   	pop    %rbx
  8004206556:	5d                   	pop    %rbp
  8004206557:	c3                   	retq   

0000008004206558 <page2ppn>:
int	user_mem_check(struct Env *env, const void *va, size_t len, int perm);
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline ppn_t
page2ppn(struct PageInfo *pp)
{
  8004206558:	55                   	push   %rbp
  8004206559:	48 89 e5             	mov    %rsp,%rbp
  800420655c:	48 83 ec 08          	sub    $0x8,%rsp
  8004206560:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return pp - pages;
  8004206564:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004206568:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  800420656f:	00 00 00 
  8004206572:	48 8b 00             	mov    (%rax),%rax
  8004206575:	48 29 c2             	sub    %rax,%rdx
  8004206578:	48 89 d0             	mov    %rdx,%rax
  800420657b:	48 c1 f8 04          	sar    $0x4,%rax
}
  800420657f:	c9                   	leaveq 
  8004206580:	c3                   	retq   

0000008004206581 <page2pa>:

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
  8004206581:	55                   	push   %rbp
  8004206582:	48 89 e5             	mov    %rsp,%rbp
  8004206585:	48 83 ec 08          	sub    $0x8,%rsp
  8004206589:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return page2ppn(pp) << PGSHIFT;
  800420658d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206591:	48 89 c7             	mov    %rax,%rdi
  8004206594:	48 b8 58 65 20 04 80 	movabs $0x8004206558,%rax
  800420659b:	00 00 00 
  800420659e:	ff d0                	callq  *%rax
  80042065a0:	48 c1 e0 0c          	shl    $0xc,%rax
}
  80042065a4:	c9                   	leaveq 
  80042065a5:	c3                   	retq   

00000080042065a6 <pa2page>:

static inline struct PageInfo*
pa2page(physaddr_t pa)
{
  80042065a6:	55                   	push   %rbp
  80042065a7:	48 89 e5             	mov    %rsp,%rbp
  80042065aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042065ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (PPN(pa) >= npages)
  80042065b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042065b6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042065ba:	48 89 c2             	mov    %rax,%rdx
  80042065bd:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042065c4:	00 00 00 
  80042065c7:	48 8b 00             	mov    (%rax),%rax
  80042065ca:	48 39 c2             	cmp    %rax,%rdx
  80042065cd:	72 2a                	jb     80042065f9 <pa2page+0x53>
		panic("pa2page called with invalid pa");
  80042065cf:	48 ba 50 28 21 04 80 	movabs $0x8004212850,%rdx
  80042065d6:	00 00 00 
  80042065d9:	be 52 00 00 00       	mov    $0x52,%esi
  80042065de:	48 bf 6f 28 21 04 80 	movabs $0x800421286f,%rdi
  80042065e5:	00 00 00 
  80042065e8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065ed:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  80042065f4:	00 00 00 
  80042065f7:	ff d1                	callq  *%rcx
	return &pages[PPN(pa)];
  80042065f9:	48 b8 70 d6 2b 04 80 	movabs $0x80042bd670,%rax
  8004206600:	00 00 00 
  8004206603:	48 8b 00             	mov    (%rax),%rax
  8004206606:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420660a:	48 c1 ea 0c          	shr    $0xc,%rdx
  800420660e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004206612:	48 01 d0             	add    %rdx,%rax
}
  8004206615:	c9                   	leaveq 
  8004206616:	c3                   	retq   

0000008004206617 <page2kva>:

static inline void*
page2kva(struct PageInfo *pp)
{
  8004206617:	55                   	push   %rbp
  8004206618:	48 89 e5             	mov    %rsp,%rbp
  800420661b:	48 83 ec 20          	sub    $0x20,%rsp
  800420661f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return KADDR(page2pa(pp));
  8004206623:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004206627:	48 89 c7             	mov    %rax,%rdi
  800420662a:	48 b8 81 65 20 04 80 	movabs $0x8004206581,%rax
  8004206631:	00 00 00 
  8004206634:	ff d0                	callq  *%rax
  8004206636:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420663a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420663e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206642:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004206645:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004206648:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  800420664f:	00 00 00 
  8004206652:	48 8b 00             	mov    (%rax),%rax
  8004206655:	48 39 c2             	cmp    %rax,%rdx
  8004206658:	72 32                	jb     800420668c <page2kva+0x75>
  800420665a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420665e:	48 89 c1             	mov    %rax,%rcx
  8004206661:	48 ba 80 28 21 04 80 	movabs $0x8004212880,%rdx
  8004206668:	00 00 00 
  800420666b:	be 59 00 00 00       	mov    $0x59,%esi
  8004206670:	48 bf 6f 28 21 04 80 	movabs $0x800421286f,%rdi
  8004206677:	00 00 00 
  800420667a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420667f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004206686:	00 00 00 
  8004206689:	41 ff d0             	callq  *%r8
  800420668c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206693:	00 00 00 
  8004206696:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420669a:	48 01 d0             	add    %rdx,%rax
}
  800420669d:	c9                   	leaveq 
  800420669e:	c3                   	retq   

000000800420669f <envid2env>:
//   On success, sets *env_store to the environment.
//   On error, sets *env_store to NULL.
//
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  800420669f:	55                   	push   %rbp
  80042066a0:	48 89 e5             	mov    %rsp,%rbp
  80042066a3:	48 83 ec 20          	sub    $0x20,%rsp
  80042066a7:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042066aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042066ae:	89 d0                	mov    %edx,%eax
  80042066b0:	88 45 e8             	mov    %al,-0x18(%rbp)
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
  80042066b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  80042066b7:	75 1e                	jne    80042066d7 <envid2env+0x38>
		*env_store = curenv;
  80042066b9:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  80042066c0:	00 00 00 
  80042066c3:	48 8b 10             	mov    (%rax),%rdx
  80042066c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042066ca:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  80042066cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066d2:	e9 ba 00 00 00       	jmpq   8004206791 <envid2env+0xf2>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
  80042066d7:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  80042066de:	00 00 00 
  80042066e1:	48 8b 10             	mov    (%rax),%rdx
  80042066e4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042066e7:	48 98                	cltq   
  80042066e9:	25 ff 03 00 00       	and    $0x3ff,%eax
  80042066ee:	48 c1 e0 03          	shl    $0x3,%rax
  80042066f2:	48 89 c1             	mov    %rax,%rcx
  80042066f5:	48 c1 e1 05          	shl    $0x5,%rcx
  80042066f9:	48 29 c1             	sub    %rax,%rcx
  80042066fc:	48 89 c8             	mov    %rcx,%rax
  80042066ff:	48 01 d0             	add    %rdx,%rax
  8004206702:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004206706:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420670a:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004206710:	85 c0                	test   %eax,%eax
  8004206712:	74 0f                	je     8004206723 <envid2env+0x84>
  8004206714:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206718:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420671e:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004206721:	74 12                	je     8004206735 <envid2env+0x96>
		*env_store = 0;
  8004206723:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206727:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  800420672e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004206733:	eb 5c                	jmp    8004206791 <envid2env+0xf2>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004206735:	80 7d e8 00          	cmpb   $0x0,-0x18(%rbp)
  8004206739:	74 46                	je     8004206781 <envid2env+0xe2>
  800420673b:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004206742:	00 00 00 
  8004206745:	48 8b 00             	mov    (%rax),%rax
  8004206748:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800420674c:	74 33                	je     8004206781 <envid2env+0xe2>
  800420674e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206752:	8b 90 cc 00 00 00    	mov    0xcc(%rax),%edx
  8004206758:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  800420675f:	00 00 00 
  8004206762:	48 8b 00             	mov    (%rax),%rax
  8004206765:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420676b:	39 c2                	cmp    %eax,%edx
  800420676d:	74 12                	je     8004206781 <envid2env+0xe2>
		*env_store = 0;
  800420676f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206773:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  800420677a:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  800420677f:	eb 10                	jmp    8004206791 <envid2env+0xf2>
	}

	*env_store = e;
  8004206781:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206785:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004206789:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  800420678c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004206791:	c9                   	leaveq 
  8004206792:	c3                   	retq   

0000008004206793 <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  8004206793:	55                   	push   %rbp
  8004206794:	48 89 e5             	mov    %rsp,%rbp
  8004206797:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
		

	env_free_list = &envs[0];
  800420679b:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  80042067a2:	00 00 00 
  80042067a5:	48 8b 10             	mov    (%rax),%rdx
  80042067a8:	48 b8 a0 c1 2b 04 80 	movabs $0x80042bc1a0,%rax
  80042067af:	00 00 00 
  80042067b2:	48 89 10             	mov    %rdx,(%rax)
	struct Env *last = NULL;
  80042067b5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042067bc:	00 
	int i;
	for(i=0; i< NENV; i++){
  80042067bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042067c4:	e9 08 01 00 00       	jmpq   80042068d1 <env_init+0x13e>
		envs[i].env_id = 0;
  80042067c9:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  80042067d0:	00 00 00 
  80042067d3:	48 8b 10             	mov    (%rax),%rdx
  80042067d6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042067d9:	48 98                	cltq   
  80042067db:	48 c1 e0 03          	shl    $0x3,%rax
  80042067df:	48 89 c1             	mov    %rax,%rcx
  80042067e2:	48 c1 e1 05          	shl    $0x5,%rcx
  80042067e6:	48 29 c1             	sub    %rax,%rcx
  80042067e9:	48 89 c8             	mov    %rcx,%rax
  80042067ec:	48 01 d0             	add    %rdx,%rax
  80042067ef:	c7 80 c8 00 00 00 00 	movl   $0x0,0xc8(%rax)
  80042067f6:	00 00 00 
		envs[i].env_status = ENV_FREE;
  80042067f9:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  8004206800:	00 00 00 
  8004206803:	48 8b 10             	mov    (%rax),%rdx
  8004206806:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004206809:	48 98                	cltq   
  800420680b:	48 c1 e0 03          	shl    $0x3,%rax
  800420680f:	48 89 c1             	mov    %rax,%rcx
  8004206812:	48 c1 e1 05          	shl    $0x5,%rcx
  8004206816:	48 29 c1             	sub    %rax,%rcx
  8004206819:	48 89 c8             	mov    %rcx,%rax
  800420681c:	48 01 d0             	add    %rdx,%rax
  800420681f:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004206826:	00 00 00 
		envs[i].env_link = NULL;
  8004206829:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  8004206830:	00 00 00 
  8004206833:	48 8b 10             	mov    (%rax),%rdx
  8004206836:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004206839:	48 98                	cltq   
  800420683b:	48 c1 e0 03          	shl    $0x3,%rax
  800420683f:	48 89 c1             	mov    %rax,%rcx
  8004206842:	48 c1 e1 05          	shl    $0x5,%rcx
  8004206846:	48 29 c1             	sub    %rax,%rcx
  8004206849:	48 89 c8             	mov    %rcx,%rax
  800420684c:	48 01 d0             	add    %rdx,%rax
  800420684f:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004206856:	00 00 00 00 
		if(last == NULL){
  800420685a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420685f:	75 2c                	jne    800420688d <env_init+0xfa>
			last = &envs[i];
  8004206861:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  8004206868:	00 00 00 
  800420686b:	48 8b 10             	mov    (%rax),%rdx
  800420686e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004206871:	48 98                	cltq   
  8004206873:	48 c1 e0 03          	shl    $0x3,%rax
  8004206877:	48 89 c1             	mov    %rax,%rcx
  800420687a:	48 c1 e1 05          	shl    $0x5,%rcx
  800420687e:	48 29 c1             	sub    %rax,%rcx
  8004206881:	48 89 c8             	mov    %rcx,%rax
  8004206884:	48 01 d0             	add    %rdx,%rax
  8004206887:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420688b:	eb 40                	jmp    80042068cd <env_init+0x13a>
		} else {
			last->env_link = &envs[i];
  800420688d:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  8004206894:	00 00 00 
  8004206897:	48 8b 10             	mov    (%rax),%rdx
  800420689a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420689d:	48 98                	cltq   
  800420689f:	48 c1 e0 03          	shl    $0x3,%rax
  80042068a3:	48 89 c1             	mov    %rax,%rcx
  80042068a6:	48 c1 e1 05          	shl    $0x5,%rcx
  80042068aa:	48 29 c1             	sub    %rax,%rcx
  80042068ad:	48 89 c8             	mov    %rcx,%rax
  80042068b0:	48 01 c2             	add    %rax,%rdx
  80042068b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042068b7:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
			last = last->env_link;
  80042068be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042068c2:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
  80042068c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		

	env_free_list = &envs[0];
	struct Env *last = NULL;
	int i;
	for(i=0; i< NENV; i++){
  80042068cd:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042068d1:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%rbp)
  80042068d8:	0f 8e eb fe ff ff    	jle    80042067c9 <env_init+0x36>
	}



	// Per-CPU part of the initialization
	env_init_percpu();
  80042068de:	48 b8 ec 68 20 04 80 	movabs $0x80042068ec,%rax
  80042068e5:	00 00 00 
  80042068e8:	ff d0                	callq  *%rax
}
  80042068ea:	c9                   	leaveq 
  80042068eb:	c3                   	retq   

00000080042068ec <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  80042068ec:	55                   	push   %rbp
  80042068ed:	48 89 e5             	mov    %rsp,%rbp
  80042068f0:	53                   	push   %rbx
  80042068f1:	48 83 ec 10          	sub    $0x10,%rsp
  80042068f5:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  80042068fc:	00 00 00 
  80042068ff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004206903:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004206907:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  800420690a:	b8 23 00 00 00       	mov    $0x23,%eax
  800420690f:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  8004206911:	b8 23 00 00 00       	mov    $0x23,%eax
  8004206916:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  8004206918:	b8 10 00 00 00       	mov    $0x10,%eax
  800420691d:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  800420691f:	b8 10 00 00 00       	mov    $0x10,%eax
  8004206924:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  8004206926:	b8 10 00 00 00       	mov    $0x10,%eax
  800420692b:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  800420692d:	b8 08 00 00 00       	mov    $0x8,%eax
  8004206932:	89 c3                	mov    %eax,%ebx
  8004206934:	53                   	push   %rbx
  8004206935:	48 b8 42 69 20 04 80 	movabs $0x8004206942,%rax
  800420693c:	00 00 00 
  800420693f:	50                   	push   %rax
  8004206940:	48 cb                	lretq  
  8004206942:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  8004206948:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  800420694c:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  800420694f:	48 83 c4 10          	add    $0x10,%rsp
  8004206953:	5b                   	pop    %rbx
  8004206954:	5d                   	pop    %rbp
  8004206955:	c3                   	retq   

0000008004206956 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  8004206956:	55                   	push   %rbp
  8004206957:	48 89 e5             	mov    %rsp,%rbp
  800420695a:	48 83 ec 20          	sub    $0x20,%rsp
  800420695e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  8004206962:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004206969:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  800420696a:	bf 01 00 00 00       	mov    $0x1,%edi
  800420696f:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004206976:	00 00 00 
  8004206979:	ff d0                	callq  *%rax
  800420697b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420697f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004206984:	75 0a                	jne    8004206990 <env_setup_vm+0x3a>
		return -E_NO_MEM;
  8004206986:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420698b:	e9 98 00 00 00       	jmpq   8004206a28 <env_setup_vm+0xd2>

	// LAB 3: Your code here.
	


	e->env_pml4e = page2kva(p);
  8004206990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206994:	48 89 c7             	mov    %rax,%rdi
  8004206997:	48 b8 17 66 20 04 80 	movabs $0x8004206617,%rax
  800420699e:	00 00 00 
  80042069a1:	ff d0                	callq  *%rax
  80042069a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042069a7:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3 = page2pa(p);
  80042069ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042069b2:	48 89 c7             	mov    %rax,%rdi
  80042069b5:	48 b8 81 65 20 04 80 	movabs $0x8004206581,%rax
  80042069bc:	00 00 00 
  80042069bf:	ff d0                	callq  *%rax
  80042069c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042069c5:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)
	p->pp_ref++;
  80042069cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042069d0:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042069d4:	8d 50 01             	lea    0x1(%rax),%edx
  80042069d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042069db:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e[1] = boot_pml4e[1];
  80042069df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042069e3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042069ea:	48 8d 50 08          	lea    0x8(%rax),%rdx
  80042069ee:	48 b8 60 d6 2b 04 80 	movabs $0x80042bd660,%rax
  80042069f5:	00 00 00 
  80042069f8:	48 8b 00             	mov    (%rax),%rax
  80042069fb:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042069ff:	48 89 02             	mov    %rax,(%rdx)



	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  8004206a02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004206a06:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004206a0d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004206a11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004206a15:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004206a1c:	48 83 c8 05          	or     $0x5,%rax
  8004206a20:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004206a23:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004206a28:	c9                   	leaveq 
  8004206a29:	c3                   	retq   

0000008004206a2a <env_alloc>:
//	-E_NO_FREE_ENV if all NENVS environments are allocated
//	-E_NO_MEM on memory exhaustion
//
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004206a2a:	55                   	push   %rbp
  8004206a2b:	48 89 e5             	mov    %rsp,%rbp
  8004206a2e:	53                   	push   %rbx
  8004206a2f:	48 83 ec 38          	sub    $0x38,%rsp
  8004206a33:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004206a37:	89 75 c4             	mov    %esi,-0x3c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  8004206a3a:	48 b8 a0 c1 2b 04 80 	movabs $0x80042bc1a0,%rax
  8004206a41:	00 00 00 
  8004206a44:	48 8b 00             	mov    (%rax),%rax
  8004206a47:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004206a4b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004206a50:	75 0a                	jne    8004206a5c <env_alloc+0x32>
		return -E_NO_FREE_ENV;
  8004206a52:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  8004206a57:	e9 93 01 00 00       	jmpq   8004206bef <env_alloc+0x1c5>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  8004206a5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206a60:	48 89 c7             	mov    %rax,%rdi
  8004206a63:	48 b8 56 69 20 04 80 	movabs $0x8004206956,%rax
  8004206a6a:	00 00 00 
  8004206a6d:	ff d0                	callq  *%rax
  8004206a6f:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004206a72:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004206a76:	79 08                	jns    8004206a80 <env_alloc+0x56>
		return r;
  8004206a78:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004206a7b:	e9 6f 01 00 00       	jmpq   8004206bef <env_alloc+0x1c5>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  8004206a80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206a84:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004206a8a:	05 00 10 00 00       	add    $0x1000,%eax
  8004206a8f:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  8004206a94:	89 45 ec             	mov    %eax,-0x14(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  8004206a97:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004206a9b:	7f 07                	jg     8004206aa4 <env_alloc+0x7a>
		generation = 1 << ENVGENSHIFT;
  8004206a9d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)
	e->env_id = generation | (e - envs);
  8004206aa4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004206aa8:	48 b8 90 c1 2b 04 80 	movabs $0x80042bc190,%rax
  8004206aaf:	00 00 00 
  8004206ab2:	48 8b 00             	mov    (%rax),%rax
  8004206ab5:	48 29 c2             	sub    %rax,%rdx
  8004206ab8:	48 89 d0             	mov    %rdx,%rax
  8004206abb:	48 c1 f8 03          	sar    $0x3,%rax
  8004206abf:	48 89 c2             	mov    %rax,%rdx
  8004206ac2:	48 b8 df 7b ef bd f7 	movabs $0xef7bdef7bdef7bdf,%rax
  8004206ac9:	de 7b ef 
  8004206acc:	48 0f af c2          	imul   %rdx,%rax
  8004206ad0:	0b 45 ec             	or     -0x14(%rbp),%eax
  8004206ad3:	89 c2                	mov    %eax,%edx
  8004206ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206ad9:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004206adf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206ae3:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004206ae6:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  8004206aec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206af0:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004206af7:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004206afa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206afe:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004206b05:	00 00 00 
	e->env_runs = 0;
  8004206b08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b0c:	c7 80 d8 00 00 00 00 	movl   $0x0,0xd8(%rax)
  8004206b13:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  8004206b16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b1a:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004206b1f:	be 00 00 00 00       	mov    $0x0,%esi
  8004206b24:	48 89 c7             	mov    %rax,%rdi
  8004206b27:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  8004206b2e:	00 00 00 
  8004206b31:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004206b33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b37:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004206b3e:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004206b40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b44:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004206b4a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b4e:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004206b55:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004206b57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b5b:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004206b60:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004206b67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b6b:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004206b72:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// commit the allocation
	env_free_list = e->env_link;
  8004206b74:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b78:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004206b7f:	48 b8 a0 c1 2b 04 80 	movabs $0x80042bc1a0,%rax
  8004206b86:	00 00 00 
  8004206b89:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004206b8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206b90:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004206b94:	48 89 10             	mov    %rdx,(%rax)

	cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  8004206b97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206b9b:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004206ba1:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004206ba8:	00 00 00 
  8004206bab:	48 8b 00             	mov    (%rax),%rax
  8004206bae:	48 85 c0             	test   %rax,%rax
  8004206bb1:	74 15                	je     8004206bc8 <env_alloc+0x19e>
  8004206bb3:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004206bba:	00 00 00 
  8004206bbd:	48 8b 00             	mov    (%rax),%rax
  8004206bc0:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004206bc6:	eb 05                	jmp    8004206bcd <env_alloc+0x1a3>
  8004206bc8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206bcd:	89 c6                	mov    %eax,%esi
  8004206bcf:	48 bf a3 28 21 04 80 	movabs $0x80042128a3,%rdi
  8004206bd6:	00 00 00 
  8004206bd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206bde:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004206be5:	00 00 00 
  8004206be8:	ff d1                	callq  *%rcx
	return 0;
  8004206bea:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004206bef:	48 83 c4 38          	add    $0x38,%rsp
  8004206bf3:	5b                   	pop    %rbx
  8004206bf4:	5d                   	pop    %rbp
  8004206bf5:	c3                   	retq   

0000008004206bf6 <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004206bf6:	55                   	push   %rbp
  8004206bf7:	48 89 e5             	mov    %rsp,%rbp
  8004206bfa:	48 83 ec 60          	sub    $0x60,%rsp
  8004206bfe:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004206c02:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004206c06:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	// LAB 3: Your code here.




	void *start = ROUNDDOWN(va, PGSIZE);
  8004206c0a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004206c0e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004206c12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004206c16:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206c1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 	 void *end = ROUNDUP(va + len, PGSIZE);
  8004206c20:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004206c27:	00 
  8004206c28:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206c2c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004206c30:	48 01 d0             	add    %rdx,%rax
  8004206c33:	48 89 c2             	mov    %rax,%rdx
  8004206c36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004206c3a:	48 01 d0             	add    %rdx,%rax
  8004206c3d:	48 83 e8 01          	sub    $0x1,%rax
  8004206c41:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004206c45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206c49:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206c4e:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004206c52:	48 89 d0             	mov    %rdx,%rax
  8004206c55:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004206c59:	48 29 c2             	sub    %rax,%rdx
  8004206c5c:	48 89 d0             	mov    %rdx,%rax
  8004206c5f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  	for(; start < end; start += PGSIZE) {
  8004206c63:	e9 c3 00 00 00       	jmpq   8004206d2b <region_alloc+0x135>
      struct PageInfo *pp = page_alloc(0);
  8004206c68:	bf 00 00 00 00       	mov    $0x0,%edi
  8004206c6d:	48 b8 03 26 20 04 80 	movabs $0x8004202603,%rax
  8004206c74:	00 00 00 
  8004206c77:	ff d0                	callq  *%rax
  8004206c79:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      if (pp) {
  8004206c7d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004206c82:	74 7d                	je     8004206d01 <region_alloc+0x10b>
          pp->pp_ref++;
  8004206c84:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206c88:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206c8c:	8d 50 01             	lea    0x1(%rax),%edx
  8004206c8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206c93:	66 89 50 08          	mov    %dx,0x8(%rax)
          int ret = page_insert(e->env_pml4e, pp, start, PTE_W | PTE_U);
  8004206c97:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206c9b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004206ca2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004206ca6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206caa:	b9 06 00 00 00       	mov    $0x6,%ecx
  8004206caf:	48 89 c7             	mov    %rax,%rdi
  8004206cb2:	48 b8 8d 2c 20 04 80 	movabs $0x8004202c8d,%rax
  8004206cb9:	00 00 00 
  8004206cbc:	ff d0                	callq  *%rax
  8004206cbe:	89 45 cc             	mov    %eax,-0x34(%rbp)
          if (ret < 0) {
  8004206cc1:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004206cc5:	79 30                	jns    8004206cf7 <region_alloc+0x101>
              panic("region_alloc: %e \n", ret);
  8004206cc7:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004206cca:	89 c1                	mov    %eax,%ecx
  8004206ccc:	48 ba b8 28 21 04 80 	movabs $0x80042128b8,%rdx
  8004206cd3:	00 00 00 
  8004206cd6:	be 37 01 00 00       	mov    $0x137,%esi
  8004206cdb:	48 bf cb 28 21 04 80 	movabs $0x80042128cb,%rdi
  8004206ce2:	00 00 00 
  8004206ce5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206cea:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004206cf1:	00 00 00 
  8004206cf4:	41 ff d0             	callq  *%r8



	void *start = ROUNDDOWN(va, PGSIZE);
 	 void *end = ROUNDUP(va + len, PGSIZE);
  	for(; start < end; start += PGSIZE) {
  8004206cf7:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004206cfe:	00 
  8004206cff:	eb 2a                	jmp    8004206d2b <region_alloc+0x135>
          int ret = page_insert(e->env_pml4e, pp, start, PTE_W | PTE_U);
          if (ret < 0) {
              panic("region_alloc: %e \n", ret);
          }
      } else {
          panic("region_alloc: page allocation failed!! \n");
  8004206d01:	48 ba d8 28 21 04 80 	movabs $0x80042128d8,%rdx
  8004206d08:	00 00 00 
  8004206d0b:	be 3a 01 00 00       	mov    $0x13a,%esi
  8004206d10:	48 bf cb 28 21 04 80 	movabs $0x80042128cb,%rdi
  8004206d17:	00 00 00 
  8004206d1a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d1f:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  8004206d26:	00 00 00 
  8004206d29:	ff d1                	callq  *%rcx



	void *start = ROUNDDOWN(va, PGSIZE);
 	 void *end = ROUNDUP(va + len, PGSIZE);
  	for(; start < end; start += PGSIZE) {
  8004206d2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206d2f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004206d33:	0f 82 2f ff ff ff    	jb     8004206c68 <region_alloc+0x72>
	//
	// Hint: It is easier to use region_alloc if the caller can pass
	//   'va' and 'len' values that are not page-aligned.
	//   You should round va down, and round (va + len) up.
	//   (Watch out for corner-cases!)
}
  8004206d39:	c9                   	leaveq 
  8004206d3a:	c3                   	retq   

0000008004206d3b <load_icode>:
// load_icode panics if it encounters problems.
//  - How might load_icode fail?  What might be wrong with the given input?
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004206d3b:	55                   	push   %rbp
  8004206d3c:	48 89 e5             	mov    %rsp,%rbp
  8004206d3f:	48 83 ec 40          	sub    $0x40,%rsp
  8004206d43:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004206d47:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	// LAB 3: Your code here
	// Now map one page for the program's initial stack
	// at virtual address USTACKTOP - PGSIZE.

	// LAB 3: Your code here.
	e->elf = binary;
  8004206d4b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206d4f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004206d53:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)




	struct Proghdr *program_header, *end_program_header;
  	struct Elf *elf = (struct Elf *) binary;
  8004206d5a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d5e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

 	 program_header = (struct Proghdr *) (binary + elf->e_phoff);
  8004206d62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004206d66:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004206d6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d6e:	48 01 d0             	add    %rdx,%rax
  8004206d71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  	end_program_header = program_header + elf->e_phnum;
  8004206d75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004206d79:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004206d7d:	0f b7 c0             	movzwl %ax,%eax
  8004206d80:	48 c1 e0 03          	shl    $0x3,%rax
  8004206d84:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004206d8b:	00 
  8004206d8c:	48 29 c2             	sub    %rax,%rdx
  8004206d8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206d93:	48 01 d0             	add    %rdx,%rax
  8004206d96:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

  	lcr3(e->env_cr3); // Important!
  8004206d9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206d9e:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004206da5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004206da9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206dad:	0f 22 d8             	mov    %rax,%cr3

  	for (; program_header < end_program_header; program_header++) {
  8004206db0:	e9 a8 00 00 00       	jmpq   8004206e5d <load_icode+0x122>
    	  if (program_header->p_type == ELF_PROG_LOAD) {
  8004206db5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206db9:	8b 00                	mov    (%rax),%eax
  8004206dbb:	83 f8 01             	cmp    $0x1,%eax
  8004206dbe:	0f 85 94 00 00 00    	jne    8004206e58 <load_icode+0x11d>
          region_alloc(e, (void *) program_header->p_va, program_header->p_memsz);
  8004206dc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206dc8:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004206dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206dd0:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004206dd4:	48 89 c1             	mov    %rax,%rcx
  8004206dd7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206ddb:	48 89 ce             	mov    %rcx,%rsi
  8004206dde:	48 89 c7             	mov    %rax,%rdi
  8004206de1:	48 b8 f6 6b 20 04 80 	movabs $0x8004206bf6,%rax
  8004206de8:	00 00 00 
  8004206deb:	ff d0                	callq  *%rax
          memmove((void *) program_header->p_va, (void *)binary + program_header->p_offset, program_header->p_filesz);
  8004206ded:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206df1:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004206df5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206df9:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004206dfd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e01:	48 01 c1             	add    %rax,%rcx
  8004206e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206e08:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004206e0c:	48 89 ce             	mov    %rcx,%rsi
  8004206e0f:	48 89 c7             	mov    %rax,%rdi
  8004206e12:	48 b8 3f b5 20 04 80 	movabs $0x800420b53f,%rax
  8004206e19:	00 00 00 
  8004206e1c:	ff d0                	callq  *%rax
          memset((void *)program_header->p_va + program_header->p_filesz, 0, program_header->p_memsz - program_header->p_filesz);
  8004206e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206e22:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004206e26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206e2a:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004206e2e:	48 29 c2             	sub    %rax,%rdx
  8004206e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206e35:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004206e39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206e3d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004206e41:	48 01 c8             	add    %rcx,%rax
  8004206e44:	be 00 00 00 00       	mov    $0x0,%esi
  8004206e49:	48 89 c7             	mov    %rax,%rdi
  8004206e4c:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  8004206e53:	00 00 00 
  8004206e56:	ff d0                	callq  *%rax
 	 program_header = (struct Proghdr *) (binary + elf->e_phoff);
  	end_program_header = program_header + elf->e_phnum;

  	lcr3(e->env_cr3); // Important!

  	for (; program_header < end_program_header; program_header++) {
  8004206e58:	48 83 45 f8 38       	addq   $0x38,-0x8(%rbp)
  8004206e5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004206e61:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004206e65:	0f 82 4a ff ff ff    	jb     8004206db5 <load_icode+0x7a>
          memmove((void *) program_header->p_va, (void *)binary + program_header->p_offset, program_header->p_filesz);
          memset((void *)program_header->p_va + program_header->p_filesz, 0, program_header->p_memsz - program_header->p_filesz);
     	 }
  	}

 	 lcr3(boot_cr3);
  8004206e6b:	48 b8 58 d6 2b 04 80 	movabs $0x80042bd658,%rax
  8004206e72:	00 00 00 
  8004206e75:	48 8b 00             	mov    (%rax),%rax
  8004206e78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004206e7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004206e80:	0f 22 d8             	mov    %rax,%cr3

  	region_alloc(e, (void *)(USTACKTOP - PGSIZE), PGSIZE); 
  8004206e83:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206e87:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206e8c:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004206e91:	48 89 c7             	mov    %rax,%rdi
  8004206e94:	48 b8 f6 6b 20 04 80 	movabs $0x8004206bf6,%rax
  8004206e9b:	00 00 00 
  8004206e9e:	ff d0                	callq  *%rax
  	e->env_tf.tf_rip = elf->e_entry;
  8004206ea0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004206ea4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004206ea8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206eac:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
}
  8004206eb3:	c9                   	leaveq 
  8004206eb4:	c3                   	retq   

0000008004206eb5 <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004206eb5:	55                   	push   %rbp
  8004206eb6:	48 89 e5             	mov    %rsp,%rbp
  8004206eb9:	48 83 ec 20          	sub    $0x20,%rsp
  8004206ebd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004206ec1:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.



	struct Env *env;
	int ret = env_alloc(&env, 0);
  8004206ec4:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004206ec8:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ecd:	48 89 c7             	mov    %rax,%rdi
  8004206ed0:	48 b8 2a 6a 20 04 80 	movabs $0x8004206a2a,%rax
  8004206ed7:	00 00 00 
  8004206eda:	ff d0                	callq  *%rax
  8004206edc:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (ret < 0) {
  8004206edf:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004206ee3:	79 30                	jns    8004206f15 <env_create+0x60>
			panic("env_alloc: %e", ret);
  8004206ee5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004206ee8:	89 c1                	mov    %eax,%ecx
  8004206eea:	48 ba 01 29 21 04 80 	movabs $0x8004212901,%rdx
  8004206ef1:	00 00 00 
  8004206ef4:	be af 01 00 00       	mov    $0x1af,%esi
  8004206ef9:	48 bf cb 28 21 04 80 	movabs $0x80042128cb,%rdi
  8004206f00:	00 00 00 
  8004206f03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f08:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004206f0f:	00 00 00 
  8004206f12:	41 ff d0             	callq  *%r8
	}
	load_icode(env, binary);
  8004206f15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004206f19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004206f1d:	48 89 d6             	mov    %rdx,%rsi
  8004206f20:	48 89 c7             	mov    %rax,%rdi
  8004206f23:	48 b8 3b 6d 20 04 80 	movabs $0x8004206d3b,%rax
  8004206f2a:	00 00 00 
  8004206f2d:	ff d0                	callq  *%rax
	env->env_type = type;
  8004206f2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004206f33:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004206f36:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)
	return;
  8004206f3c:	90                   	nop

}
  8004206f3d:	c9                   	leaveq 
  8004206f3e:	c3                   	retq   

0000008004206f3f <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  8004206f3f:	55                   	push   %rbp
  8004206f40:	48 89 e5             	mov    %rsp,%rbp
  8004206f43:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004206f4a:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)


	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  8004206f51:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004206f58:	00 00 00 
  8004206f5b:	48 8b 00             	mov    (%rax),%rax
  8004206f5e:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
  8004206f65:	75 18                	jne    8004206f7f <env_free+0x40>
		lcr3(boot_cr3);
  8004206f67:	48 b8 58 d6 2b 04 80 	movabs $0x80042bd658,%rax
  8004206f6e:	00 00 00 
  8004206f71:	48 8b 00             	mov    (%rax),%rax
  8004206f74:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004206f78:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004206f7c:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  8004206f7f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206f86:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004206f8c:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004206f93:	00 00 00 
  8004206f96:	48 8b 00             	mov    (%rax),%rax
  8004206f99:	48 85 c0             	test   %rax,%rax
  8004206f9c:	74 15                	je     8004206fb3 <env_free+0x74>
  8004206f9e:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004206fa5:	00 00 00 
  8004206fa8:	48 8b 00             	mov    (%rax),%rax
  8004206fab:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004206fb1:	eb 05                	jmp    8004206fb8 <env_free+0x79>
  8004206fb3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fb8:	89 c6                	mov    %eax,%esi
  8004206fba:	48 bf 0f 29 21 04 80 	movabs $0x800421290f,%rdi
  8004206fc1:	00 00 00 
  8004206fc4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fc9:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004206fd0:	00 00 00 
  8004206fd3:	ff d1                	callq  *%rcx

	// Flush all mapped pages in the user portion of the address space
	if (e->env_pml4e[0] & PTE_P) {
  8004206fd5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206fdc:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004206fe3:	48 8b 00             	mov    (%rax),%rax
  8004206fe6:	83 e0 01             	and    $0x1,%eax
  8004206fe9:	48 85 c0             	test   %rax,%rax
  8004206fec:	0f 84 7a 03 00 00    	je     800420736c <env_free+0x42d>
		pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  8004206ff2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206ff9:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004207000:	48 8b 00             	mov    (%rax),%rax
  8004207003:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207009:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420700d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004207011:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207015:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004207018:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420701b:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  8004207022:	00 00 00 
  8004207025:	48 8b 00             	mov    (%rax),%rax
  8004207028:	48 39 c2             	cmp    %rax,%rdx
  800420702b:	72 32                	jb     800420705f <env_free+0x120>
  800420702d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004207031:	48 89 c1             	mov    %rax,%rcx
  8004207034:	48 ba 80 28 21 04 80 	movabs $0x8004212880,%rdx
  800420703b:	00 00 00 
  800420703e:	be d2 01 00 00       	mov    $0x1d2,%esi
  8004207043:	48 bf cb 28 21 04 80 	movabs $0x80042128cb,%rdi
  800420704a:	00 00 00 
  800420704d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207052:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004207059:	00 00 00 
  800420705c:	41 ff d0             	callq  *%r8
  800420705f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207066:	00 00 00 
  8004207069:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420706d:	48 01 d0             	add    %rdx,%rax
  8004207070:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		int pdeno_limit;
		uint64_t pdpe_index;
		// using 3 instead of NPDPENTRIES as we have only first three indices
		// set for 4GB of address space.
		for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004207074:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420707b:	00 
  800420707c:	e9 ab 02 00 00       	jmpq   800420732c <env_free+0x3ed>
			if(!(env_pdpe[pdpe_index] & PTE_P))
  8004207081:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207085:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420708c:	00 
  800420708d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207091:	48 01 d0             	add    %rdx,%rax
  8004207094:	48 8b 00             	mov    (%rax),%rax
  8004207097:	83 e0 01             	and    $0x1,%eax
  800420709a:	48 85 c0             	test   %rax,%rax
  800420709d:	75 05                	jne    80042070a4 <env_free+0x165>
				continue;
  800420709f:	e9 83 02 00 00       	jmpq   8004207327 <env_free+0x3e8>
			pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  80042070a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042070a8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042070af:	00 
  80042070b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042070b4:	48 01 d0             	add    %rdx,%rax
  80042070b7:	48 8b 00             	mov    (%rax),%rax
  80042070ba:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042070c0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042070c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070c8:	48 c1 e8 0c          	shr    $0xc,%rax
  80042070cc:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042070cf:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042070d2:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042070d9:	00 00 00 
  80042070dc:	48 8b 00             	mov    (%rax),%rax
  80042070df:	48 39 c2             	cmp    %rax,%rdx
  80042070e2:	72 32                	jb     8004207116 <env_free+0x1d7>
  80042070e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070e8:	48 89 c1             	mov    %rax,%rcx
  80042070eb:	48 ba 80 28 21 04 80 	movabs $0x8004212880,%rdx
  80042070f2:	00 00 00 
  80042070f5:	be da 01 00 00       	mov    $0x1da,%esi
  80042070fa:	48 bf cb 28 21 04 80 	movabs $0x80042128cb,%rdi
  8004207101:	00 00 00 
  8004207104:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207109:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004207110:	00 00 00 
  8004207113:	41 ff d0             	callq  *%r8
  8004207116:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420711d:	00 00 00 
  8004207120:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207124:	48 01 d0             	add    %rdx,%rax
  8004207127:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  800420712b:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004207130:	75 07                	jne    8004207139 <env_free+0x1fa>
  8004207132:	b8 04 00 00 00       	mov    $0x4,%eax
  8004207137:	eb 05                	jmp    800420713e <env_free+0x1ff>
  8004207139:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  800420713e:	89 45 b4             	mov    %eax,-0x4c(%rbp)
			static_assert(UTOP % PTSIZE == 0);
			for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004207141:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004207148:	00 
  8004207149:	e9 6e 01 00 00       	jmpq   80042072bc <env_free+0x37d>

				// only look at mapped page tables
				if (!(env_pgdir[pdeno] & PTE_P))
  800420714e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207152:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207159:	00 
  800420715a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420715e:	48 01 d0             	add    %rdx,%rax
  8004207161:	48 8b 00             	mov    (%rax),%rax
  8004207164:	83 e0 01             	and    $0x1,%eax
  8004207167:	48 85 c0             	test   %rax,%rax
  800420716a:	75 05                	jne    8004207171 <env_free+0x232>
					continue;
  800420716c:	e9 46 01 00 00       	jmpq   80042072b7 <env_free+0x378>
				// find the pa and va of the page table
				pa = PTE_ADDR(env_pgdir[pdeno]);
  8004207171:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207175:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420717c:	00 
  800420717d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207181:	48 01 d0             	add    %rdx,%rax
  8004207184:	48 8b 00             	mov    (%rax),%rax
  8004207187:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420718d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
				pt = (pte_t*) KADDR(pa);
  8004207191:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004207195:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004207199:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420719d:	48 c1 e8 0c          	shr    $0xc,%rax
  80042071a1:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042071a4:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042071a7:	48 b8 68 d6 2b 04 80 	movabs $0x80042bd668,%rax
  80042071ae:	00 00 00 
  80042071b1:	48 8b 00             	mov    (%rax),%rax
  80042071b4:	48 39 c2             	cmp    %rax,%rdx
  80042071b7:	72 32                	jb     80042071eb <env_free+0x2ac>
  80042071b9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042071bd:	48 89 c1             	mov    %rax,%rcx
  80042071c0:	48 ba 80 28 21 04 80 	movabs $0x8004212880,%rdx
  80042071c7:	00 00 00 
  80042071ca:	be e4 01 00 00       	mov    $0x1e4,%esi
  80042071cf:	48 bf cb 28 21 04 80 	movabs $0x80042128cb,%rdi
  80042071d6:	00 00 00 
  80042071d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071de:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042071e5:	00 00 00 
  80042071e8:	41 ff d0             	callq  *%r8
  80042071eb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071f2:	00 00 00 
  80042071f5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042071f9:	48 01 d0             	add    %rdx,%rax
  80042071fc:	48 89 45 90          	mov    %rax,-0x70(%rbp)

				// unmap all PTEs in this page table
				for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004207200:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004207207:	00 
  8004207208:	eb 67                	jmp    8004207271 <env_free+0x332>
					if (pt[pteno] & PTE_P){
  800420720a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420720e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207215:	00 
  8004207216:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420721a:	48 01 d0             	add    %rdx,%rax
  800420721d:	48 8b 00             	mov    (%rax),%rax
  8004207220:	83 e0 01             	and    $0x1,%eax
  8004207223:	48 85 c0             	test   %rax,%rax
  8004207226:	74 44                	je     800420726c <env_free+0x32d>
						page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  8004207228:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420722c:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004207230:	48 89 c2             	mov    %rax,%rdx
  8004207233:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207237:	48 c1 e0 15          	shl    $0x15,%rax
  800420723b:	48 09 c2             	or     %rax,%rdx
  800420723e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004207242:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207246:	48 09 d0             	or     %rdx,%rax
  8004207249:	48 89 c2             	mov    %rax,%rdx
  800420724c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004207253:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420725a:	48 89 d6             	mov    %rdx,%rsi
  800420725d:	48 89 c7             	mov    %rax,%rdi
  8004207260:	48 b8 b9 2d 20 04 80 	movabs $0x8004202db9,%rax
  8004207267:	00 00 00 
  800420726a:	ff d0                	callq  *%rax
				// find the pa and va of the page table
				pa = PTE_ADDR(env_pgdir[pdeno]);
				pt = (pte_t*) KADDR(pa);

				// unmap all PTEs in this page table
				for (pteno = 0; pteno < PTX(~0); pteno++) {
  800420726c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004207271:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004207278:	00 
  8004207279:	76 8f                	jbe    800420720a <env_free+0x2cb>
						page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
					}
				}

				// free the page table itself
				env_pgdir[pdeno] = 0;
  800420727b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420727f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207286:	00 
  8004207287:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420728b:	48 01 d0             	add    %rdx,%rax
  800420728e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
				page_decref(pa2page(pa));
  8004207295:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004207299:	48 89 c7             	mov    %rax,%rdi
  800420729c:	48 b8 a6 65 20 04 80 	movabs $0x80042065a6,%rax
  80042072a3:	00 00 00 
  80042072a6:	ff d0                	callq  *%rax
  80042072a8:	48 89 c7             	mov    %rax,%rdi
  80042072ab:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  80042072b2:	00 00 00 
  80042072b5:	ff d0                	callq  *%rax
			if(!(env_pdpe[pdpe_index] & PTE_P))
				continue;
			pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
			pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
			static_assert(UTOP % PTSIZE == 0);
			for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  80042072b7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042072bc:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042072bf:	48 98                	cltq   
  80042072c1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042072c5:	0f 87 83 fe ff ff    	ja     800420714e <env_free+0x20f>
				// free the page table itself
				env_pgdir[pdeno] = 0;
				page_decref(pa2page(pa));
			}
			// free the page directory
			pa = PTE_ADDR(env_pdpe[pdpe_index]);
  80042072cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042072cf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042072d6:	00 
  80042072d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042072db:	48 01 d0             	add    %rdx,%rax
  80042072de:	48 8b 00             	mov    (%rax),%rax
  80042072e1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042072e7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			env_pdpe[pdpe_index] = 0;
  80042072eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042072ef:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042072f6:	00 
  80042072f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042072fb:	48 01 d0             	add    %rdx,%rax
  80042072fe:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  8004207305:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004207309:	48 89 c7             	mov    %rax,%rdi
  800420730c:	48 b8 a6 65 20 04 80 	movabs $0x80042065a6,%rax
  8004207313:	00 00 00 
  8004207316:	ff d0                	callq  *%rax
  8004207318:	48 89 c7             	mov    %rax,%rdi
  800420731b:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  8004207322:	00 00 00 
  8004207325:	ff d0                	callq  *%rax
		pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
		int pdeno_limit;
		uint64_t pdpe_index;
		// using 3 instead of NPDPENTRIES as we have only first three indices
		// set for 4GB of address space.
		for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004207327:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420732c:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004207331:	0f 86 4a fd ff ff    	jbe    8004207081 <env_free+0x142>
			pa = PTE_ADDR(env_pdpe[pdpe_index]);
			env_pdpe[pdpe_index] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory pointer
		page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  8004207337:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420733e:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004207345:	48 8b 00             	mov    (%rax),%rax
  8004207348:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420734e:	48 89 c7             	mov    %rax,%rdi
  8004207351:	48 b8 a6 65 20 04 80 	movabs $0x80042065a6,%rax
  8004207358:	00 00 00 
  800420735b:	ff d0                	callq  *%rax
  800420735d:	48 89 c7             	mov    %rax,%rdi
  8004207360:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  8004207367:	00 00 00 
  800420736a:	ff d0                	callq  *%rax
	}
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  800420736c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004207373:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420737a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004207381:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004207388:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420738f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  8004207393:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420739a:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  80042073a1:	00 00 00 00 
	e->env_cr3 = 0;
  80042073a5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042073ac:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  80042073b3:	00 00 00 00 
	page_decref(pa2page(pa));
  80042073b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042073bb:	48 89 c7             	mov    %rax,%rdi
  80042073be:	48 b8 a6 65 20 04 80 	movabs $0x80042065a6,%rax
  80042073c5:	00 00 00 
  80042073c8:	ff d0                	callq  *%rax
  80042073ca:	48 89 c7             	mov    %rax,%rdi
  80042073cd:	48 b8 34 27 20 04 80 	movabs $0x8004202734,%rax
  80042073d4:	00 00 00 
  80042073d7:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  80042073d9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042073e0:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042073e7:	00 00 00 
	e->env_link = env_free_list;
  80042073ea:	48 b8 a0 c1 2b 04 80 	movabs $0x80042bc1a0,%rax
  80042073f1:	00 00 00 
  80042073f4:	48 8b 10             	mov    (%rax),%rdx
  80042073f7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042073fe:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  8004207405:	48 b8 a0 c1 2b 04 80 	movabs $0x80042bc1a0,%rax
  800420740c:	00 00 00 
  800420740f:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004207416:	48 89 10             	mov    %rdx,(%rax)
}
  8004207419:	c9                   	leaveq 
  800420741a:	c3                   	retq   

000000800420741b <env_destroy>:
//
// Frees environment e.
//
void
env_destroy(struct Env *e)
{
  800420741b:	55                   	push   %rbp
  800420741c:	48 89 e5             	mov    %rsp,%rbp
  800420741f:	48 83 ec 10          	sub    $0x10,%rsp
  8004207423:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

	env_free(e);
  8004207427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420742b:	48 89 c7             	mov    %rax,%rdi
  800420742e:	48 b8 3f 6f 20 04 80 	movabs $0x8004206f3f,%rax
  8004207435:	00 00 00 
  8004207438:	ff d0                	callq  *%rax
	cprintf("Destroyed the only environment - nothing more to do!\n");
  800420743a:	48 bf 28 29 21 04 80 	movabs $0x8004212928,%rdi
  8004207441:	00 00 00 
  8004207444:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207449:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004207450:	00 00 00 
  8004207453:	ff d2                	callq  *%rdx
	while (1)
		monitor(NULL);
  8004207455:	bf 00 00 00 00       	mov    $0x0,%edi
  800420745a:	48 b8 ad 12 20 04 80 	movabs $0x80042012ad,%rax
  8004207461:	00 00 00 
  8004207464:	ff d0                	callq  *%rax
  8004207466:	eb ed                	jmp    8004207455 <env_destroy+0x3a>

0000008004207468 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  8004207468:	55                   	push   %rbp
  8004207469:	48 89 e5             	mov    %rsp,%rbp
  800420746c:	48 83 ec 10          	sub    $0x10,%rsp
  8004207470:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__asm __volatile("movq %0,%%rsp\n"
  8004207474:	48 8b 65 f8          	mov    -0x8(%rbp),%rsp
  8004207478:	4c 8b 3c 24          	mov    (%rsp),%r15
  800420747c:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  8004207481:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004207486:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  800420748b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004207490:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004207495:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  800420749a:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  800420749f:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  80042074a4:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  80042074a9:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  80042074ae:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  80042074b3:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  80042074b8:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  80042074bd:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  80042074c2:	48 83 c4 78          	add    $0x78,%rsp
  80042074c6:	8e 04 24             	mov    (%rsp),%es
  80042074c9:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  80042074cd:	48 83 c4 10          	add    $0x10,%rsp
  80042074d1:	48 83 c4 10          	add    $0x10,%rsp
  80042074d5:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  80042074d7:	48 ba 5e 29 21 04 80 	movabs $0x800421295e,%rdx
  80042074de:	00 00 00 
  80042074e1:	be 25 02 00 00       	mov    $0x225,%esi
  80042074e6:	48 bf cb 28 21 04 80 	movabs $0x80042128cb,%rdi
  80042074ed:	00 00 00 
  80042074f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074f5:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  80042074fc:	00 00 00 
  80042074ff:	ff d1                	callq  *%rcx

0000008004207501 <env_run>:
//
// This function does not return.
//
void
env_run(struct Env *e)
{
  8004207501:	55                   	push   %rbp
  8004207502:	48 89 e5             	mov    %rsp,%rbp
  8004207505:	48 83 ec 20          	sub    $0x20,%rsp
  8004207509:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	




	if (curenv && curenv->env_status == ENV_RUNNING)
  800420750d:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004207514:	00 00 00 
  8004207517:	48 8b 00             	mov    (%rax),%rax
  800420751a:	48 85 c0             	test   %rax,%rax
  800420751d:	74 2f                	je     800420754e <env_run+0x4d>
  800420751f:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004207526:	00 00 00 
  8004207529:	48 8b 00             	mov    (%rax),%rax
  800420752c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207532:	83 f8 03             	cmp    $0x3,%eax
  8004207535:	75 17                	jne    800420754e <env_run+0x4d>
        curenv->env_status = ENV_RUNNABLE;
  8004207537:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  800420753e:	00 00 00 
  8004207541:	48 8b 00             	mov    (%rax),%rax
  8004207544:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420754b:	00 00 00 

 	 curenv = e;
  800420754e:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004207555:	00 00 00 
  8004207558:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420755c:	48 89 10             	mov    %rdx,(%rax)
 	 curenv->env_status = ENV_RUNNING;
  800420755f:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004207566:	00 00 00 
  8004207569:	48 8b 00             	mov    (%rax),%rax
  800420756c:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  8004207573:	00 00 00 
 	 curenv->env_runs++;
  8004207576:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  800420757d:	00 00 00 
  8004207580:	48 8b 00             	mov    (%rax),%rax
  8004207583:	8b 90 d8 00 00 00    	mov    0xd8(%rax),%edx
  8004207589:	83 c2 01             	add    $0x1,%edx
  800420758c:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

	//unlock_kernel();

 	  lcr3(curenv->env_cr3);
  8004207592:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004207599:	00 00 00 
  800420759c:	48 8b 00             	mov    (%rax),%rax
  800420759f:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042075a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042075aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042075ae:	0f 22 d8             	mov    %rax,%cr3
	  env_pop_tf(&(curenv->env_tf));
  80042075b1:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  80042075b8:	00 00 00 
  80042075bb:	48 8b 00             	mov    (%rax),%rax
  80042075be:	48 89 c7             	mov    %rax,%rdi
  80042075c1:	48 b8 68 74 20 04 80 	movabs $0x8004207468,%rax
  80042075c8:	00 00 00 
  80042075cb:	ff d0                	callq  *%rax

00000080042075cd <mc146818_read>:
#include <kern/kclock.h>


unsigned
mc146818_read(unsigned reg)
{
  80042075cd:	55                   	push   %rbp
  80042075ce:	48 89 e5             	mov    %rsp,%rbp
  80042075d1:	48 83 ec 14          	sub    $0x14,%rsp
  80042075d5:	89 7d ec             	mov    %edi,-0x14(%rbp)
	outb(IO_RTC, reg);
  80042075d8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042075db:	0f b6 c0             	movzbl %al,%eax
  80042075de:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  80042075e5:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042075e8:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042075ec:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042075ef:	ee                   	out    %al,(%dx)
  80042075f0:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042075f7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042075fa:	89 c2                	mov    %eax,%edx
  80042075fc:	ec                   	in     (%dx),%al
  80042075fd:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004207600:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
	return inb(IO_RTC+1);
  8004207604:	0f b6 c0             	movzbl %al,%eax
}
  8004207607:	c9                   	leaveq 
  8004207608:	c3                   	retq   

0000008004207609 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
  8004207609:	55                   	push   %rbp
  800420760a:	48 89 e5             	mov    %rsp,%rbp
  800420760d:	48 83 ec 18          	sub    $0x18,%rsp
  8004207611:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004207614:	89 75 e8             	mov    %esi,-0x18(%rbp)
	outb(IO_RTC, reg);
  8004207617:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420761a:	0f b6 c0             	movzbl %al,%eax
  800420761d:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004207624:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004207627:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420762b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420762e:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
  800420762f:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004207632:	0f b6 c0             	movzbl %al,%eax
  8004207635:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  800420763c:	88 45 f3             	mov    %al,-0xd(%rbp)
  800420763f:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004207643:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207646:	ee                   	out    %al,(%dx)
}
  8004207647:	c9                   	leaveq 
  8004207648:	c3                   	retq   

0000008004207649 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
  8004207649:	55                   	push   %rbp
  800420764a:	48 89 e5             	mov    %rsp,%rbp
  800420764d:	48 83 ec 10          	sub    $0x10,%rsp
  8004207651:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004207654:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	cputchar(ch);
  8004207658:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420765b:	89 c7                	mov    %eax,%edi
  800420765d:	48 b8 0b 0e 20 04 80 	movabs $0x8004200e0b,%rax
  8004207664:	00 00 00 
  8004207667:	ff d0                	callq  *%rax
	*cnt++;
  8004207669:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420766d:	48 83 c0 04          	add    $0x4,%rax
  8004207671:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}
  8004207675:	c9                   	leaveq 
  8004207676:	c3                   	retq   

0000008004207677 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
  8004207677:	55                   	push   %rbp
  8004207678:	48 89 e5             	mov    %rsp,%rbp
  800420767b:	48 83 ec 30          	sub    $0x30,%rsp
  800420767f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004207683:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int cnt = 0;
  8004207687:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	va_list aq;
	va_copy(aq,ap);
  800420768e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004207692:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004207696:	48 8b 0a             	mov    (%rdx),%rcx
  8004207699:	48 89 08             	mov    %rcx,(%rax)
  800420769c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042076a0:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042076a4:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042076a8:	48 89 50 10          	mov    %rdx,0x10(%rax)
	vprintfmt((void*)putch, &cnt, fmt, aq);
  80042076ac:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  80042076b0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042076b4:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  80042076b8:	48 89 c6             	mov    %rax,%rsi
  80042076bb:	48 bf 49 76 20 04 80 	movabs $0x8004207649,%rdi
  80042076c2:	00 00 00 
  80042076c5:	48 b8 b7 a8 20 04 80 	movabs $0x800420a8b7,%rax
  80042076cc:	00 00 00 
  80042076cf:	ff d0                	callq  *%rax
	va_end(aq);
	return cnt;
  80042076d1:	8b 45 fc             	mov    -0x4(%rbp),%eax

}
  80042076d4:	c9                   	leaveq 
  80042076d5:	c3                   	retq   

00000080042076d6 <cprintf>:

int
cprintf(const char *fmt, ...)
{
  80042076d6:	55                   	push   %rbp
  80042076d7:	48 89 e5             	mov    %rsp,%rbp
  80042076da:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  80042076e1:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  80042076e8:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  80042076ef:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042076f6:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042076fd:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004207704:	84 c0                	test   %al,%al
  8004207706:	74 20                	je     8004207728 <cprintf+0x52>
  8004207708:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420770c:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004207710:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004207714:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004207718:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420771c:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004207720:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004207724:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004207728:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
	va_list ap;
	int cnt;
	va_start(ap, fmt);
  800420772f:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004207736:	00 00 00 
  8004207739:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004207740:	00 00 00 
  8004207743:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004207747:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420774e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004207755:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
	va_list aq;
	va_copy(aq,ap);
  800420775c:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004207763:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420776a:	48 8b 0a             	mov    (%rdx),%rcx
  800420776d:	48 89 08             	mov    %rcx,(%rax)
  8004207770:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004207774:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004207778:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420777c:	48 89 50 10          	mov    %rdx,0x10(%rax)
	cnt = vcprintf(fmt, aq);
  8004207780:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004207787:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420778e:	48 89 d6             	mov    %rdx,%rsi
  8004207791:	48 89 c7             	mov    %rax,%rdi
  8004207794:	48 b8 77 76 20 04 80 	movabs $0x8004207677,%rax
  800420779b:	00 00 00 
  800420779e:	ff d0                	callq  *%rax
  80042077a0:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
	va_end(aq);

	return cnt;
  80042077a6:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
}
  80042077ac:	c9                   	leaveq 
  80042077ad:	c3                   	retq   

00000080042077ae <trapname>:
struct Gatedesc idt[256] = { { 0 } };
struct Pseudodesc idt_pd = {0,0};


static const char *trapname(int trapno)
{
  80042077ae:	55                   	push   %rbp
  80042077af:	48 89 e5             	mov    %rsp,%rbp
  80042077b2:	48 83 ec 04          	sub    $0x4,%rsp
  80042077b6:	89 7d fc             	mov    %edi,-0x4(%rbp)
		"Alignment Check",
		"Machine-Check",
		"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
  80042077b9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042077bc:	83 f8 13             	cmp    $0x13,%eax
  80042077bf:	77 16                	ja     80042077d7 <trapname+0x29>
		return excnames[trapno];
  80042077c1:	48 b8 c0 2d 21 04 80 	movabs $0x8004212dc0,%rax
  80042077c8:	00 00 00 
  80042077cb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042077ce:	48 63 d2             	movslq %edx,%rdx
  80042077d1:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042077d5:	eb 1c                	jmp    80042077f3 <trapname+0x45>
	if (trapno == T_SYSCALL)
  80042077d7:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  80042077db:	75 0c                	jne    80042077e9 <trapname+0x3b>
		return "System call";
  80042077dd:	48 b8 80 29 21 04 80 	movabs $0x8004212980,%rax
  80042077e4:	00 00 00 
  80042077e7:	eb 0a                	jmp    80042077f3 <trapname+0x45>
	return "(unknown trap)";
  80042077e9:	48 b8 8c 29 21 04 80 	movabs $0x800421298c,%rax
  80042077f0:	00 00 00 
}
  80042077f3:	c9                   	leaveq 
  80042077f4:	c3                   	retq   

00000080042077f5 <trap_init>:


void
trap_init(void)
{
  80042077f5:	55                   	push   %rbp
  80042077f6:	48 89 e5             	mov    %rsp,%rbp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	idt_pd.pd_lim = sizeof(idt)-1;
  80042077f9:	48 b8 c0 d1 2b 04 80 	movabs $0x80042bd1c0,%rax
  8004207800:	00 00 00 
  8004207803:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
	idt_pd.pd_base = (uint64_t)idt;
  8004207808:	48 ba c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rdx
  800420780f:	00 00 00 
  8004207812:	48 b8 c0 d1 2b 04 80 	movabs $0x80042bd1c0,%rax
  8004207819:	00 00 00 
  800420781c:	48 89 50 02          	mov    %rdx,0x2(%rax)

	SETGATE(idt[T_DIVIDE], 0, GD_KT, DIVIDE_F, 0);
  8004207820:	48 b8 68 97 20 04 80 	movabs $0x8004209768,%rax
  8004207827:	00 00 00 
  800420782a:	89 c2                	mov    %eax,%edx
  800420782c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207833:	00 00 00 
  8004207836:	66 89 10             	mov    %dx,(%rax)
  8004207839:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207840:	00 00 00 
  8004207843:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004207849:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207850:	00 00 00 
  8004207853:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004207857:	83 e2 f8             	and    $0xfffffff8,%edx
  800420785a:	88 50 04             	mov    %dl,0x4(%rax)
  800420785d:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207864:	00 00 00 
  8004207867:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  800420786b:	83 e2 07             	and    $0x7,%edx
  800420786e:	88 50 04             	mov    %dl,0x4(%rax)
  8004207871:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207878:	00 00 00 
  800420787b:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420787f:	83 e2 f0             	and    $0xfffffff0,%edx
  8004207882:	83 ca 0e             	or     $0xe,%edx
  8004207885:	88 50 05             	mov    %dl,0x5(%rax)
  8004207888:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420788f:	00 00 00 
  8004207892:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004207896:	83 e2 ef             	and    $0xffffffef,%edx
  8004207899:	88 50 05             	mov    %dl,0x5(%rax)
  800420789c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042078a3:	00 00 00 
  80042078a6:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042078aa:	83 e2 9f             	and    $0xffffff9f,%edx
  80042078ad:	88 50 05             	mov    %dl,0x5(%rax)
  80042078b0:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042078b7:	00 00 00 
  80042078ba:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  80042078be:	83 ca 80             	or     $0xffffff80,%edx
  80042078c1:	88 50 05             	mov    %dl,0x5(%rax)
  80042078c4:	48 b8 68 97 20 04 80 	movabs $0x8004209768,%rax
  80042078cb:	00 00 00 
  80042078ce:	48 c1 e8 10          	shr    $0x10,%rax
  80042078d2:	89 c2                	mov    %eax,%edx
  80042078d4:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042078db:	00 00 00 
  80042078de:	66 89 50 06          	mov    %dx,0x6(%rax)
  80042078e2:	48 b8 68 97 20 04 80 	movabs $0x8004209768,%rax
  80042078e9:	00 00 00 
  80042078ec:	48 c1 e8 20          	shr    $0x20,%rax
  80042078f0:	89 c2                	mov    %eax,%edx
  80042078f2:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042078f9:	00 00 00 
  80042078fc:	89 50 08             	mov    %edx,0x8(%rax)
  80042078ff:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207906:	00 00 00 
  8004207909:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
	SETGATE(idt[T_DEBUG], 0, GD_KT, DEBUG_F, 0);
  8004207910:	48 b8 6e 97 20 04 80 	movabs $0x800420976e,%rax
  8004207917:	00 00 00 
  800420791a:	89 c2                	mov    %eax,%edx
  800420791c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207923:	00 00 00 
  8004207926:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420792a:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207931:	00 00 00 
  8004207934:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420793a:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207941:	00 00 00 
  8004207944:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  8004207948:	83 e2 f8             	and    $0xfffffff8,%edx
  800420794b:	88 50 14             	mov    %dl,0x14(%rax)
  800420794e:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207955:	00 00 00 
  8004207958:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420795c:	83 e2 07             	and    $0x7,%edx
  800420795f:	88 50 14             	mov    %dl,0x14(%rax)
  8004207962:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207969:	00 00 00 
  800420796c:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004207970:	83 e2 f0             	and    $0xfffffff0,%edx
  8004207973:	83 ca 0e             	or     $0xe,%edx
  8004207976:	88 50 15             	mov    %dl,0x15(%rax)
  8004207979:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207980:	00 00 00 
  8004207983:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004207987:	83 e2 ef             	and    $0xffffffef,%edx
  800420798a:	88 50 15             	mov    %dl,0x15(%rax)
  800420798d:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207994:	00 00 00 
  8004207997:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420799b:	83 e2 9f             	and    $0xffffff9f,%edx
  800420799e:	88 50 15             	mov    %dl,0x15(%rax)
  80042079a1:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042079a8:	00 00 00 
  80042079ab:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  80042079af:	83 ca 80             	or     $0xffffff80,%edx
  80042079b2:	88 50 15             	mov    %dl,0x15(%rax)
  80042079b5:	48 b8 6e 97 20 04 80 	movabs $0x800420976e,%rax
  80042079bc:	00 00 00 
  80042079bf:	48 c1 e8 10          	shr    $0x10,%rax
  80042079c3:	89 c2                	mov    %eax,%edx
  80042079c5:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042079cc:	00 00 00 
  80042079cf:	66 89 50 16          	mov    %dx,0x16(%rax)
  80042079d3:	48 b8 6e 97 20 04 80 	movabs $0x800420976e,%rax
  80042079da:	00 00 00 
  80042079dd:	48 c1 e8 20          	shr    $0x20,%rax
  80042079e1:	89 c2                	mov    %eax,%edx
  80042079e3:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042079ea:	00 00 00 
  80042079ed:	89 50 18             	mov    %edx,0x18(%rax)
  80042079f0:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042079f7:	00 00 00 
  80042079fa:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
	SETGATE(idt[T_NMI], 0, GD_KT, NMI_F, 0);
  8004207a01:	48 b8 74 97 20 04 80 	movabs $0x8004209774,%rax
  8004207a08:	00 00 00 
  8004207a0b:	89 c2                	mov    %eax,%edx
  8004207a0d:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207a14:	00 00 00 
  8004207a17:	66 89 50 20          	mov    %dx,0x20(%rax)
  8004207a1b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207a22:	00 00 00 
  8004207a25:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  8004207a2b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207a32:	00 00 00 
  8004207a35:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004207a39:	83 e2 f8             	and    $0xfffffff8,%edx
  8004207a3c:	88 50 24             	mov    %dl,0x24(%rax)
  8004207a3f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207a46:	00 00 00 
  8004207a49:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004207a4d:	83 e2 07             	and    $0x7,%edx
  8004207a50:	88 50 24             	mov    %dl,0x24(%rax)
  8004207a53:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207a5a:	00 00 00 
  8004207a5d:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004207a61:	83 e2 f0             	and    $0xfffffff0,%edx
  8004207a64:	83 ca 0e             	or     $0xe,%edx
  8004207a67:	88 50 25             	mov    %dl,0x25(%rax)
  8004207a6a:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207a71:	00 00 00 
  8004207a74:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004207a78:	83 e2 ef             	and    $0xffffffef,%edx
  8004207a7b:	88 50 25             	mov    %dl,0x25(%rax)
  8004207a7e:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207a85:	00 00 00 
  8004207a88:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004207a8c:	83 e2 9f             	and    $0xffffff9f,%edx
  8004207a8f:	88 50 25             	mov    %dl,0x25(%rax)
  8004207a92:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207a99:	00 00 00 
  8004207a9c:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004207aa0:	83 ca 80             	or     $0xffffff80,%edx
  8004207aa3:	88 50 25             	mov    %dl,0x25(%rax)
  8004207aa6:	48 b8 74 97 20 04 80 	movabs $0x8004209774,%rax
  8004207aad:	00 00 00 
  8004207ab0:	48 c1 e8 10          	shr    $0x10,%rax
  8004207ab4:	89 c2                	mov    %eax,%edx
  8004207ab6:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207abd:	00 00 00 
  8004207ac0:	66 89 50 26          	mov    %dx,0x26(%rax)
  8004207ac4:	48 b8 74 97 20 04 80 	movabs $0x8004209774,%rax
  8004207acb:	00 00 00 
  8004207ace:	48 c1 e8 20          	shr    $0x20,%rax
  8004207ad2:	89 c2                	mov    %eax,%edx
  8004207ad4:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207adb:	00 00 00 
  8004207ade:	89 50 28             	mov    %edx,0x28(%rax)
  8004207ae1:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207ae8:	00 00 00 
  8004207aeb:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
	SETGATE(idt[T_BRKPT], 0, GD_KT, BRKPT_F, 3);
  8004207af2:	48 b8 7a 97 20 04 80 	movabs $0x800420977a,%rax
  8004207af9:	00 00 00 
  8004207afc:	89 c2                	mov    %eax,%edx
  8004207afe:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207b05:	00 00 00 
  8004207b08:	66 89 50 30          	mov    %dx,0x30(%rax)
  8004207b0c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207b13:	00 00 00 
  8004207b16:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  8004207b1c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207b23:	00 00 00 
  8004207b26:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004207b2a:	83 e2 f8             	and    $0xfffffff8,%edx
  8004207b2d:	88 50 34             	mov    %dl,0x34(%rax)
  8004207b30:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207b37:	00 00 00 
  8004207b3a:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004207b3e:	83 e2 07             	and    $0x7,%edx
  8004207b41:	88 50 34             	mov    %dl,0x34(%rax)
  8004207b44:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207b4b:	00 00 00 
  8004207b4e:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004207b52:	83 e2 f0             	and    $0xfffffff0,%edx
  8004207b55:	83 ca 0e             	or     $0xe,%edx
  8004207b58:	88 50 35             	mov    %dl,0x35(%rax)
  8004207b5b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207b62:	00 00 00 
  8004207b65:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004207b69:	83 e2 ef             	and    $0xffffffef,%edx
  8004207b6c:	88 50 35             	mov    %dl,0x35(%rax)
  8004207b6f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207b76:	00 00 00 
  8004207b79:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004207b7d:	83 ca 60             	or     $0x60,%edx
  8004207b80:	88 50 35             	mov    %dl,0x35(%rax)
  8004207b83:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207b8a:	00 00 00 
  8004207b8d:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004207b91:	83 ca 80             	or     $0xffffff80,%edx
  8004207b94:	88 50 35             	mov    %dl,0x35(%rax)
  8004207b97:	48 b8 7a 97 20 04 80 	movabs $0x800420977a,%rax
  8004207b9e:	00 00 00 
  8004207ba1:	48 c1 e8 10          	shr    $0x10,%rax
  8004207ba5:	89 c2                	mov    %eax,%edx
  8004207ba7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207bae:	00 00 00 
  8004207bb1:	66 89 50 36          	mov    %dx,0x36(%rax)
  8004207bb5:	48 b8 7a 97 20 04 80 	movabs $0x800420977a,%rax
  8004207bbc:	00 00 00 
  8004207bbf:	48 c1 e8 20          	shr    $0x20,%rax
  8004207bc3:	89 c2                	mov    %eax,%edx
  8004207bc5:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207bcc:	00 00 00 
  8004207bcf:	89 50 38             	mov    %edx,0x38(%rax)
  8004207bd2:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207bd9:	00 00 00 
  8004207bdc:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
	SETGATE(idt[T_OFLOW], 0, GD_KT, OFLOW_F, 0);
  8004207be3:	48 b8 80 97 20 04 80 	movabs $0x8004209780,%rax
  8004207bea:	00 00 00 
  8004207bed:	89 c2                	mov    %eax,%edx
  8004207bef:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207bf6:	00 00 00 
  8004207bf9:	66 89 50 40          	mov    %dx,0x40(%rax)
  8004207bfd:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207c04:	00 00 00 
  8004207c07:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  8004207c0d:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207c14:	00 00 00 
  8004207c17:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004207c1b:	83 e2 f8             	and    $0xfffffff8,%edx
  8004207c1e:	88 50 44             	mov    %dl,0x44(%rax)
  8004207c21:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207c28:	00 00 00 
  8004207c2b:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004207c2f:	83 e2 07             	and    $0x7,%edx
  8004207c32:	88 50 44             	mov    %dl,0x44(%rax)
  8004207c35:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207c3c:	00 00 00 
  8004207c3f:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004207c43:	83 e2 f0             	and    $0xfffffff0,%edx
  8004207c46:	83 ca 0e             	or     $0xe,%edx
  8004207c49:	88 50 45             	mov    %dl,0x45(%rax)
  8004207c4c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207c53:	00 00 00 
  8004207c56:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004207c5a:	83 e2 ef             	and    $0xffffffef,%edx
  8004207c5d:	88 50 45             	mov    %dl,0x45(%rax)
  8004207c60:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207c67:	00 00 00 
  8004207c6a:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004207c6e:	83 e2 9f             	and    $0xffffff9f,%edx
  8004207c71:	88 50 45             	mov    %dl,0x45(%rax)
  8004207c74:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207c7b:	00 00 00 
  8004207c7e:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004207c82:	83 ca 80             	or     $0xffffff80,%edx
  8004207c85:	88 50 45             	mov    %dl,0x45(%rax)
  8004207c88:	48 b8 80 97 20 04 80 	movabs $0x8004209780,%rax
  8004207c8f:	00 00 00 
  8004207c92:	48 c1 e8 10          	shr    $0x10,%rax
  8004207c96:	89 c2                	mov    %eax,%edx
  8004207c98:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207c9f:	00 00 00 
  8004207ca2:	66 89 50 46          	mov    %dx,0x46(%rax)
  8004207ca6:	48 b8 80 97 20 04 80 	movabs $0x8004209780,%rax
  8004207cad:	00 00 00 
  8004207cb0:	48 c1 e8 20          	shr    $0x20,%rax
  8004207cb4:	89 c2                	mov    %eax,%edx
  8004207cb6:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207cbd:	00 00 00 
  8004207cc0:	89 50 48             	mov    %edx,0x48(%rax)
  8004207cc3:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207cca:	00 00 00 
  8004207ccd:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
	SETGATE(idt[T_BOUND], 0, GD_KT, BOUND_F, 0);
  8004207cd4:	48 b8 86 97 20 04 80 	movabs $0x8004209786,%rax
  8004207cdb:	00 00 00 
  8004207cde:	89 c2                	mov    %eax,%edx
  8004207ce0:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207ce7:	00 00 00 
  8004207cea:	66 89 50 50          	mov    %dx,0x50(%rax)
  8004207cee:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207cf5:	00 00 00 
  8004207cf8:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  8004207cfe:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207d05:	00 00 00 
  8004207d08:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004207d0c:	83 e2 f8             	and    $0xfffffff8,%edx
  8004207d0f:	88 50 54             	mov    %dl,0x54(%rax)
  8004207d12:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207d19:	00 00 00 
  8004207d1c:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004207d20:	83 e2 07             	and    $0x7,%edx
  8004207d23:	88 50 54             	mov    %dl,0x54(%rax)
  8004207d26:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207d2d:	00 00 00 
  8004207d30:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004207d34:	83 e2 f0             	and    $0xfffffff0,%edx
  8004207d37:	83 ca 0e             	or     $0xe,%edx
  8004207d3a:	88 50 55             	mov    %dl,0x55(%rax)
  8004207d3d:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207d44:	00 00 00 
  8004207d47:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004207d4b:	83 e2 ef             	and    $0xffffffef,%edx
  8004207d4e:	88 50 55             	mov    %dl,0x55(%rax)
  8004207d51:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207d58:	00 00 00 
  8004207d5b:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004207d5f:	83 e2 9f             	and    $0xffffff9f,%edx
  8004207d62:	88 50 55             	mov    %dl,0x55(%rax)
  8004207d65:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207d6c:	00 00 00 
  8004207d6f:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004207d73:	83 ca 80             	or     $0xffffff80,%edx
  8004207d76:	88 50 55             	mov    %dl,0x55(%rax)
  8004207d79:	48 b8 86 97 20 04 80 	movabs $0x8004209786,%rax
  8004207d80:	00 00 00 
  8004207d83:	48 c1 e8 10          	shr    $0x10,%rax
  8004207d87:	89 c2                	mov    %eax,%edx
  8004207d89:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207d90:	00 00 00 
  8004207d93:	66 89 50 56          	mov    %dx,0x56(%rax)
  8004207d97:	48 b8 86 97 20 04 80 	movabs $0x8004209786,%rax
  8004207d9e:	00 00 00 
  8004207da1:	48 c1 e8 20          	shr    $0x20,%rax
  8004207da5:	89 c2                	mov    %eax,%edx
  8004207da7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207dae:	00 00 00 
  8004207db1:	89 50 58             	mov    %edx,0x58(%rax)
  8004207db4:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207dbb:	00 00 00 
  8004207dbe:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
	SETGATE(idt[T_ILLOP], 0, GD_KT, ILLOP_F, 0);
  8004207dc5:	48 b8 8c 97 20 04 80 	movabs $0x800420978c,%rax
  8004207dcc:	00 00 00 
  8004207dcf:	89 c2                	mov    %eax,%edx
  8004207dd1:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207dd8:	00 00 00 
  8004207ddb:	66 89 50 60          	mov    %dx,0x60(%rax)
  8004207ddf:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207de6:	00 00 00 
  8004207de9:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  8004207def:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207df6:	00 00 00 
  8004207df9:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004207dfd:	83 e2 f8             	and    $0xfffffff8,%edx
  8004207e00:	88 50 64             	mov    %dl,0x64(%rax)
  8004207e03:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207e0a:	00 00 00 
  8004207e0d:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004207e11:	83 e2 07             	and    $0x7,%edx
  8004207e14:	88 50 64             	mov    %dl,0x64(%rax)
  8004207e17:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207e1e:	00 00 00 
  8004207e21:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004207e25:	83 e2 f0             	and    $0xfffffff0,%edx
  8004207e28:	83 ca 0e             	or     $0xe,%edx
  8004207e2b:	88 50 65             	mov    %dl,0x65(%rax)
  8004207e2e:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207e35:	00 00 00 
  8004207e38:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004207e3c:	83 e2 ef             	and    $0xffffffef,%edx
  8004207e3f:	88 50 65             	mov    %dl,0x65(%rax)
  8004207e42:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207e49:	00 00 00 
  8004207e4c:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004207e50:	83 e2 9f             	and    $0xffffff9f,%edx
  8004207e53:	88 50 65             	mov    %dl,0x65(%rax)
  8004207e56:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207e5d:	00 00 00 
  8004207e60:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004207e64:	83 ca 80             	or     $0xffffff80,%edx
  8004207e67:	88 50 65             	mov    %dl,0x65(%rax)
  8004207e6a:	48 b8 8c 97 20 04 80 	movabs $0x800420978c,%rax
  8004207e71:	00 00 00 
  8004207e74:	48 c1 e8 10          	shr    $0x10,%rax
  8004207e78:	89 c2                	mov    %eax,%edx
  8004207e7a:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207e81:	00 00 00 
  8004207e84:	66 89 50 66          	mov    %dx,0x66(%rax)
  8004207e88:	48 b8 8c 97 20 04 80 	movabs $0x800420978c,%rax
  8004207e8f:	00 00 00 
  8004207e92:	48 c1 e8 20          	shr    $0x20,%rax
  8004207e96:	89 c2                	mov    %eax,%edx
  8004207e98:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207e9f:	00 00 00 
  8004207ea2:	89 50 68             	mov    %edx,0x68(%rax)
  8004207ea5:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207eac:	00 00 00 
  8004207eaf:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
	SETGATE(idt[T_DEVICE], 0, GD_KT, DEVICE_F, 0);
  8004207eb6:	48 b8 92 97 20 04 80 	movabs $0x8004209792,%rax
  8004207ebd:	00 00 00 
  8004207ec0:	89 c2                	mov    %eax,%edx
  8004207ec2:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207ec9:	00 00 00 
  8004207ecc:	66 89 50 70          	mov    %dx,0x70(%rax)
  8004207ed0:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207ed7:	00 00 00 
  8004207eda:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  8004207ee0:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207ee7:	00 00 00 
  8004207eea:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004207eee:	83 e2 f8             	and    $0xfffffff8,%edx
  8004207ef1:	88 50 74             	mov    %dl,0x74(%rax)
  8004207ef4:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207efb:	00 00 00 
  8004207efe:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004207f02:	83 e2 07             	and    $0x7,%edx
  8004207f05:	88 50 74             	mov    %dl,0x74(%rax)
  8004207f08:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207f0f:	00 00 00 
  8004207f12:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004207f16:	83 e2 f0             	and    $0xfffffff0,%edx
  8004207f19:	83 ca 0e             	or     $0xe,%edx
  8004207f1c:	88 50 75             	mov    %dl,0x75(%rax)
  8004207f1f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207f26:	00 00 00 
  8004207f29:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004207f2d:	83 e2 ef             	and    $0xffffffef,%edx
  8004207f30:	88 50 75             	mov    %dl,0x75(%rax)
  8004207f33:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207f3a:	00 00 00 
  8004207f3d:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004207f41:	83 e2 9f             	and    $0xffffff9f,%edx
  8004207f44:	88 50 75             	mov    %dl,0x75(%rax)
  8004207f47:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207f4e:	00 00 00 
  8004207f51:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004207f55:	83 ca 80             	or     $0xffffff80,%edx
  8004207f58:	88 50 75             	mov    %dl,0x75(%rax)
  8004207f5b:	48 b8 92 97 20 04 80 	movabs $0x8004209792,%rax
  8004207f62:	00 00 00 
  8004207f65:	48 c1 e8 10          	shr    $0x10,%rax
  8004207f69:	89 c2                	mov    %eax,%edx
  8004207f6b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207f72:	00 00 00 
  8004207f75:	66 89 50 76          	mov    %dx,0x76(%rax)
  8004207f79:	48 b8 92 97 20 04 80 	movabs $0x8004209792,%rax
  8004207f80:	00 00 00 
  8004207f83:	48 c1 e8 20          	shr    $0x20,%rax
  8004207f87:	89 c2                	mov    %eax,%edx
  8004207f89:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207f90:	00 00 00 
  8004207f93:	89 50 78             	mov    %edx,0x78(%rax)
  8004207f96:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207f9d:	00 00 00 
  8004207fa0:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
	SETGATE(idt[T_DBLFLT], 0, GD_KT, DBLFLT_F, 0);
  8004207fa7:	48 b8 98 97 20 04 80 	movabs $0x8004209798,%rax
  8004207fae:	00 00 00 
  8004207fb1:	89 c2                	mov    %eax,%edx
  8004207fb3:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207fba:	00 00 00 
  8004207fbd:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  8004207fc4:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207fcb:	00 00 00 
  8004207fce:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  8004207fd5:	08 00 
  8004207fd7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207fde:	00 00 00 
  8004207fe1:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  8004207fe8:	83 e2 f8             	and    $0xfffffff8,%edx
  8004207feb:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  8004207ff1:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004207ff8:	00 00 00 
  8004207ffb:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  8004208002:	83 e2 07             	and    $0x7,%edx
  8004208005:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420800b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208012:	00 00 00 
  8004208015:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420801c:	83 e2 f0             	and    $0xfffffff0,%edx
  800420801f:	83 ca 0e             	or     $0xe,%edx
  8004208022:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  8004208028:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420802f:	00 00 00 
  8004208032:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  8004208039:	83 e2 ef             	and    $0xffffffef,%edx
  800420803c:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  8004208042:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208049:	00 00 00 
  800420804c:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  8004208053:	83 e2 9f             	and    $0xffffff9f,%edx
  8004208056:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420805c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208063:	00 00 00 
  8004208066:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420806d:	83 ca 80             	or     $0xffffff80,%edx
  8004208070:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  8004208076:	48 b8 98 97 20 04 80 	movabs $0x8004209798,%rax
  800420807d:	00 00 00 
  8004208080:	48 c1 e8 10          	shr    $0x10,%rax
  8004208084:	89 c2                	mov    %eax,%edx
  8004208086:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420808d:	00 00 00 
  8004208090:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  8004208097:	48 b8 98 97 20 04 80 	movabs $0x8004209798,%rax
  800420809e:	00 00 00 
  80042080a1:	48 c1 e8 20          	shr    $0x20,%rax
  80042080a5:	89 c2                	mov    %eax,%edx
  80042080a7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042080ae:	00 00 00 
  80042080b1:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  80042080b7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042080be:	00 00 00 
  80042080c1:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  80042080c8:	00 00 00 
	SETGATE(idt[T_TSS], 0, GD_KT, TSS_F, 0);
  80042080cb:	48 b8 9c 97 20 04 80 	movabs $0x800420979c,%rax
  80042080d2:	00 00 00 
  80042080d5:	89 c2                	mov    %eax,%edx
  80042080d7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042080de:	00 00 00 
  80042080e1:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  80042080e8:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042080ef:	00 00 00 
  80042080f2:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  80042080f9:	08 00 
  80042080fb:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208102:	00 00 00 
  8004208105:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420810c:	83 e2 f8             	and    $0xfffffff8,%edx
  800420810f:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  8004208115:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420811c:	00 00 00 
  800420811f:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  8004208126:	83 e2 07             	and    $0x7,%edx
  8004208129:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420812f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208136:	00 00 00 
  8004208139:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  8004208140:	83 e2 f0             	and    $0xfffffff0,%edx
  8004208143:	83 ca 0e             	or     $0xe,%edx
  8004208146:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420814c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208153:	00 00 00 
  8004208156:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420815d:	83 e2 ef             	and    $0xffffffef,%edx
  8004208160:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  8004208166:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420816d:	00 00 00 
  8004208170:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  8004208177:	83 e2 9f             	and    $0xffffff9f,%edx
  800420817a:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  8004208180:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208187:	00 00 00 
  800420818a:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  8004208191:	83 ca 80             	or     $0xffffff80,%edx
  8004208194:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420819a:	48 b8 9c 97 20 04 80 	movabs $0x800420979c,%rax
  80042081a1:	00 00 00 
  80042081a4:	48 c1 e8 10          	shr    $0x10,%rax
  80042081a8:	89 c2                	mov    %eax,%edx
  80042081aa:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042081b1:	00 00 00 
  80042081b4:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  80042081bb:	48 b8 9c 97 20 04 80 	movabs $0x800420979c,%rax
  80042081c2:	00 00 00 
  80042081c5:	48 c1 e8 20          	shr    $0x20,%rax
  80042081c9:	89 c2                	mov    %eax,%edx
  80042081cb:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042081d2:	00 00 00 
  80042081d5:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  80042081db:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042081e2:	00 00 00 
  80042081e5:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  80042081ec:	00 00 00 
	SETGATE(idt[T_SEGNP], 0, GD_KT, SEGNP_F, 0);
  80042081ef:	48 b8 a0 97 20 04 80 	movabs $0x80042097a0,%rax
  80042081f6:	00 00 00 
  80042081f9:	89 c2                	mov    %eax,%edx
  80042081fb:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208202:	00 00 00 
  8004208205:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420820c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208213:	00 00 00 
  8004208216:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420821d:	08 00 
  800420821f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208226:	00 00 00 
  8004208229:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  8004208230:	83 e2 f8             	and    $0xfffffff8,%edx
  8004208233:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  8004208239:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208240:	00 00 00 
  8004208243:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420824a:	83 e2 07             	and    $0x7,%edx
  800420824d:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  8004208253:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420825a:	00 00 00 
  800420825d:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  8004208264:	83 e2 f0             	and    $0xfffffff0,%edx
  8004208267:	83 ca 0e             	or     $0xe,%edx
  800420826a:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  8004208270:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208277:	00 00 00 
  800420827a:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  8004208281:	83 e2 ef             	and    $0xffffffef,%edx
  8004208284:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420828a:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208291:	00 00 00 
  8004208294:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420829b:	83 e2 9f             	and    $0xffffff9f,%edx
  800420829e:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  80042082a4:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042082ab:	00 00 00 
  80042082ae:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  80042082b5:	83 ca 80             	or     $0xffffff80,%edx
  80042082b8:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  80042082be:	48 b8 a0 97 20 04 80 	movabs $0x80042097a0,%rax
  80042082c5:	00 00 00 
  80042082c8:	48 c1 e8 10          	shr    $0x10,%rax
  80042082cc:	89 c2                	mov    %eax,%edx
  80042082ce:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042082d5:	00 00 00 
  80042082d8:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  80042082df:	48 b8 a0 97 20 04 80 	movabs $0x80042097a0,%rax
  80042082e6:	00 00 00 
  80042082e9:	48 c1 e8 20          	shr    $0x20,%rax
  80042082ed:	89 c2                	mov    %eax,%edx
  80042082ef:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042082f6:	00 00 00 
  80042082f9:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  80042082ff:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208306:	00 00 00 
  8004208309:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  8004208310:	00 00 00 
	SETGATE(idt[T_STACK], 0, GD_KT, STACK_F, 0);
  8004208313:	48 b8 a4 97 20 04 80 	movabs $0x80042097a4,%rax
  800420831a:	00 00 00 
  800420831d:	89 c2                	mov    %eax,%edx
  800420831f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208326:	00 00 00 
  8004208329:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  8004208330:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208337:	00 00 00 
  800420833a:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  8004208341:	08 00 
  8004208343:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420834a:	00 00 00 
  800420834d:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  8004208354:	83 e2 f8             	and    $0xfffffff8,%edx
  8004208357:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420835d:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208364:	00 00 00 
  8004208367:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420836e:	83 e2 07             	and    $0x7,%edx
  8004208371:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  8004208377:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420837e:	00 00 00 
  8004208381:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  8004208388:	83 e2 f0             	and    $0xfffffff0,%edx
  800420838b:	83 ca 0e             	or     $0xe,%edx
  800420838e:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  8004208394:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420839b:	00 00 00 
  800420839e:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  80042083a5:	83 e2 ef             	and    $0xffffffef,%edx
  80042083a8:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  80042083ae:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042083b5:	00 00 00 
  80042083b8:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  80042083bf:	83 e2 9f             	and    $0xffffff9f,%edx
  80042083c2:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  80042083c8:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042083cf:	00 00 00 
  80042083d2:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  80042083d9:	83 ca 80             	or     $0xffffff80,%edx
  80042083dc:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  80042083e2:	48 b8 a4 97 20 04 80 	movabs $0x80042097a4,%rax
  80042083e9:	00 00 00 
  80042083ec:	48 c1 e8 10          	shr    $0x10,%rax
  80042083f0:	89 c2                	mov    %eax,%edx
  80042083f2:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042083f9:	00 00 00 
  80042083fc:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  8004208403:	48 b8 a4 97 20 04 80 	movabs $0x80042097a4,%rax
  800420840a:	00 00 00 
  800420840d:	48 c1 e8 20          	shr    $0x20,%rax
  8004208411:	89 c2                	mov    %eax,%edx
  8004208413:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420841a:	00 00 00 
  800420841d:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  8004208423:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420842a:	00 00 00 
  800420842d:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  8004208434:	00 00 00 
	SETGATE(idt[T_GPFLT], 0, GD_KT, GPFLT_F, 0);
  8004208437:	48 b8 a8 97 20 04 80 	movabs $0x80042097a8,%rax
  800420843e:	00 00 00 
  8004208441:	89 c2                	mov    %eax,%edx
  8004208443:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420844a:	00 00 00 
  800420844d:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  8004208454:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420845b:	00 00 00 
  800420845e:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  8004208465:	08 00 
  8004208467:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420846e:	00 00 00 
  8004208471:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  8004208478:	83 e2 f8             	and    $0xfffffff8,%edx
  800420847b:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  8004208481:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208488:	00 00 00 
  800420848b:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  8004208492:	83 e2 07             	and    $0x7,%edx
  8004208495:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420849b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042084a2:	00 00 00 
  80042084a5:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  80042084ac:	83 e2 f0             	and    $0xfffffff0,%edx
  80042084af:	83 ca 0e             	or     $0xe,%edx
  80042084b2:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  80042084b8:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042084bf:	00 00 00 
  80042084c2:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  80042084c9:	83 e2 ef             	and    $0xffffffef,%edx
  80042084cc:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  80042084d2:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042084d9:	00 00 00 
  80042084dc:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  80042084e3:	83 e2 9f             	and    $0xffffff9f,%edx
  80042084e6:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  80042084ec:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042084f3:	00 00 00 
  80042084f6:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  80042084fd:	83 ca 80             	or     $0xffffff80,%edx
  8004208500:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  8004208506:	48 b8 a8 97 20 04 80 	movabs $0x80042097a8,%rax
  800420850d:	00 00 00 
  8004208510:	48 c1 e8 10          	shr    $0x10,%rax
  8004208514:	89 c2                	mov    %eax,%edx
  8004208516:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420851d:	00 00 00 
  8004208520:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  8004208527:	48 b8 a8 97 20 04 80 	movabs $0x80042097a8,%rax
  800420852e:	00 00 00 
  8004208531:	48 c1 e8 20          	shr    $0x20,%rax
  8004208535:	89 c2                	mov    %eax,%edx
  8004208537:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420853e:	00 00 00 
  8004208541:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  8004208547:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420854e:	00 00 00 
  8004208551:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  8004208558:	00 00 00 
	SETGATE(idt[T_PGFLT], 0, GD_KT, PGFLT_F, 0);
  800420855b:	48 b8 ac 97 20 04 80 	movabs $0x80042097ac,%rax
  8004208562:	00 00 00 
  8004208565:	89 c2                	mov    %eax,%edx
  8004208567:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420856e:	00 00 00 
  8004208571:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  8004208578:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420857f:	00 00 00 
  8004208582:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  8004208589:	08 00 
  800420858b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208592:	00 00 00 
  8004208595:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420859c:	83 e2 f8             	and    $0xfffffff8,%edx
  800420859f:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  80042085a5:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042085ac:	00 00 00 
  80042085af:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  80042085b6:	83 e2 07             	and    $0x7,%edx
  80042085b9:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  80042085bf:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042085c6:	00 00 00 
  80042085c9:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  80042085d0:	83 e2 f0             	and    $0xfffffff0,%edx
  80042085d3:	83 ca 0e             	or     $0xe,%edx
  80042085d6:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  80042085dc:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042085e3:	00 00 00 
  80042085e6:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  80042085ed:	83 e2 ef             	and    $0xffffffef,%edx
  80042085f0:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  80042085f6:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042085fd:	00 00 00 
  8004208600:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  8004208607:	83 e2 9f             	and    $0xffffff9f,%edx
  800420860a:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  8004208610:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208617:	00 00 00 
  800420861a:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  8004208621:	83 ca 80             	or     $0xffffff80,%edx
  8004208624:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420862a:	48 b8 ac 97 20 04 80 	movabs $0x80042097ac,%rax
  8004208631:	00 00 00 
  8004208634:	48 c1 e8 10          	shr    $0x10,%rax
  8004208638:	89 c2                	mov    %eax,%edx
  800420863a:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208641:	00 00 00 
  8004208644:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420864b:	48 b8 ac 97 20 04 80 	movabs $0x80042097ac,%rax
  8004208652:	00 00 00 
  8004208655:	48 c1 e8 20          	shr    $0x20,%rax
  8004208659:	89 c2                	mov    %eax,%edx
  800420865b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208662:	00 00 00 
  8004208665:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420866b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208672:	00 00 00 
  8004208675:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420867c:	00 00 00 
	SETGATE(idt[T_FPERR], 0, GD_KT, FPERR_F, 0);
  800420867f:	48 b8 b0 97 20 04 80 	movabs $0x80042097b0,%rax
  8004208686:	00 00 00 
  8004208689:	89 c2                	mov    %eax,%edx
  800420868b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208692:	00 00 00 
  8004208695:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420869c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042086a3:	00 00 00 
  80042086a6:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  80042086ad:	08 00 
  80042086af:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042086b6:	00 00 00 
  80042086b9:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  80042086c0:	83 e2 f8             	and    $0xfffffff8,%edx
  80042086c3:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  80042086c9:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042086d0:	00 00 00 
  80042086d3:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  80042086da:	83 e2 07             	and    $0x7,%edx
  80042086dd:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  80042086e3:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042086ea:	00 00 00 
  80042086ed:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  80042086f4:	83 e2 f0             	and    $0xfffffff0,%edx
  80042086f7:	83 ca 0e             	or     $0xe,%edx
  80042086fa:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  8004208700:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208707:	00 00 00 
  800420870a:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  8004208711:	83 e2 ef             	and    $0xffffffef,%edx
  8004208714:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420871a:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208721:	00 00 00 
  8004208724:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420872b:	83 e2 9f             	and    $0xffffff9f,%edx
  800420872e:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  8004208734:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420873b:	00 00 00 
  800420873e:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  8004208745:	83 ca 80             	or     $0xffffff80,%edx
  8004208748:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420874e:	48 b8 b0 97 20 04 80 	movabs $0x80042097b0,%rax
  8004208755:	00 00 00 
  8004208758:	48 c1 e8 10          	shr    $0x10,%rax
  800420875c:	89 c2                	mov    %eax,%edx
  800420875e:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208765:	00 00 00 
  8004208768:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420876f:	48 b8 b0 97 20 04 80 	movabs $0x80042097b0,%rax
  8004208776:	00 00 00 
  8004208779:	48 c1 e8 20          	shr    $0x20,%rax
  800420877d:	89 c2                	mov    %eax,%edx
  800420877f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208786:	00 00 00 
  8004208789:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420878f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208796:	00 00 00 
  8004208799:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  80042087a0:	00 00 00 
	SETGATE(idt[T_ALIGN], 0, GD_KT, ALIGN_F, 0);
  80042087a3:	48 b8 b6 97 20 04 80 	movabs $0x80042097b6,%rax
  80042087aa:	00 00 00 
  80042087ad:	89 c2                	mov    %eax,%edx
  80042087af:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042087b6:	00 00 00 
  80042087b9:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  80042087c0:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042087c7:	00 00 00 
  80042087ca:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  80042087d1:	08 00 
  80042087d3:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042087da:	00 00 00 
  80042087dd:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  80042087e4:	83 e2 f8             	and    $0xfffffff8,%edx
  80042087e7:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  80042087ed:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042087f4:	00 00 00 
  80042087f7:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  80042087fe:	83 e2 07             	and    $0x7,%edx
  8004208801:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  8004208807:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420880e:	00 00 00 
  8004208811:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  8004208818:	83 e2 f0             	and    $0xfffffff0,%edx
  800420881b:	83 ca 0e             	or     $0xe,%edx
  800420881e:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  8004208824:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420882b:	00 00 00 
  800420882e:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  8004208835:	83 e2 ef             	and    $0xffffffef,%edx
  8004208838:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420883e:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208845:	00 00 00 
  8004208848:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420884f:	83 e2 9f             	and    $0xffffff9f,%edx
  8004208852:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  8004208858:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420885f:	00 00 00 
  8004208862:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  8004208869:	83 ca 80             	or     $0xffffff80,%edx
  800420886c:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  8004208872:	48 b8 b6 97 20 04 80 	movabs $0x80042097b6,%rax
  8004208879:	00 00 00 
  800420887c:	48 c1 e8 10          	shr    $0x10,%rax
  8004208880:	89 c2                	mov    %eax,%edx
  8004208882:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208889:	00 00 00 
  800420888c:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  8004208893:	48 b8 b6 97 20 04 80 	movabs $0x80042097b6,%rax
  800420889a:	00 00 00 
  800420889d:	48 c1 e8 20          	shr    $0x20,%rax
  80042088a1:	89 c2                	mov    %eax,%edx
  80042088a3:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042088aa:	00 00 00 
  80042088ad:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  80042088b3:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042088ba:	00 00 00 
  80042088bd:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  80042088c4:	00 00 00 
	SETGATE(idt[T_MCHK], 0, GD_KT, MCHK_F, 0);
  80042088c7:	48 b8 ba 97 20 04 80 	movabs $0x80042097ba,%rax
  80042088ce:	00 00 00 
  80042088d1:	89 c2                	mov    %eax,%edx
  80042088d3:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042088da:	00 00 00 
  80042088dd:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  80042088e4:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042088eb:	00 00 00 
  80042088ee:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  80042088f5:	08 00 
  80042088f7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042088fe:	00 00 00 
  8004208901:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  8004208908:	83 e2 f8             	and    $0xfffffff8,%edx
  800420890b:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  8004208911:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208918:	00 00 00 
  800420891b:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  8004208922:	83 e2 07             	and    $0x7,%edx
  8004208925:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420892b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208932:	00 00 00 
  8004208935:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420893c:	83 e2 f0             	and    $0xfffffff0,%edx
  800420893f:	83 ca 0e             	or     $0xe,%edx
  8004208942:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  8004208948:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  800420894f:	00 00 00 
  8004208952:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  8004208959:	83 e2 ef             	and    $0xffffffef,%edx
  800420895c:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  8004208962:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208969:	00 00 00 
  800420896c:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  8004208973:	83 e2 9f             	and    $0xffffff9f,%edx
  8004208976:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420897c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208983:	00 00 00 
  8004208986:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420898d:	83 ca 80             	or     $0xffffff80,%edx
  8004208990:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  8004208996:	48 b8 ba 97 20 04 80 	movabs $0x80042097ba,%rax
  800420899d:	00 00 00 
  80042089a0:	48 c1 e8 10          	shr    $0x10,%rax
  80042089a4:	89 c2                	mov    %eax,%edx
  80042089a6:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042089ad:	00 00 00 
  80042089b0:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  80042089b7:	48 b8 ba 97 20 04 80 	movabs $0x80042097ba,%rax
  80042089be:	00 00 00 
  80042089c1:	48 c1 e8 20          	shr    $0x20,%rax
  80042089c5:	89 c2                	mov    %eax,%edx
  80042089c7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042089ce:	00 00 00 
  80042089d1:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  80042089d7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042089de:	00 00 00 
  80042089e1:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  80042089e8:	00 00 00 
	SETGATE(idt[T_SIMDERR], 0, GD_KT, SIMDERR_F, 0);
  80042089eb:	48 b8 c0 97 20 04 80 	movabs $0x80042097c0,%rax
  80042089f2:	00 00 00 
  80042089f5:	89 c2                	mov    %eax,%edx
  80042089f7:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  80042089fe:	00 00 00 
  8004208a01:	66 89 90 30 01 00 00 	mov    %dx,0x130(%rax)
  8004208a08:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208a0f:	00 00 00 
  8004208a12:	66 c7 80 32 01 00 00 	movw   $0x8,0x132(%rax)
  8004208a19:	08 00 
  8004208a1b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208a22:	00 00 00 
  8004208a25:	0f b6 90 34 01 00 00 	movzbl 0x134(%rax),%edx
  8004208a2c:	83 e2 f8             	and    $0xfffffff8,%edx
  8004208a2f:	88 90 34 01 00 00    	mov    %dl,0x134(%rax)
  8004208a35:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208a3c:	00 00 00 
  8004208a3f:	0f b6 90 34 01 00 00 	movzbl 0x134(%rax),%edx
  8004208a46:	83 e2 07             	and    $0x7,%edx
  8004208a49:	88 90 34 01 00 00    	mov    %dl,0x134(%rax)
  8004208a4f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208a56:	00 00 00 
  8004208a59:	0f b6 90 35 01 00 00 	movzbl 0x135(%rax),%edx
  8004208a60:	83 e2 f0             	and    $0xfffffff0,%edx
  8004208a63:	83 ca 0e             	or     $0xe,%edx
  8004208a66:	88 90 35 01 00 00    	mov    %dl,0x135(%rax)
  8004208a6c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208a73:	00 00 00 
  8004208a76:	0f b6 90 35 01 00 00 	movzbl 0x135(%rax),%edx
  8004208a7d:	83 e2 ef             	and    $0xffffffef,%edx
  8004208a80:	88 90 35 01 00 00    	mov    %dl,0x135(%rax)
  8004208a86:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208a8d:	00 00 00 
  8004208a90:	0f b6 90 35 01 00 00 	movzbl 0x135(%rax),%edx
  8004208a97:	83 e2 9f             	and    $0xffffff9f,%edx
  8004208a9a:	88 90 35 01 00 00    	mov    %dl,0x135(%rax)
  8004208aa0:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208aa7:	00 00 00 
  8004208aaa:	0f b6 90 35 01 00 00 	movzbl 0x135(%rax),%edx
  8004208ab1:	83 ca 80             	or     $0xffffff80,%edx
  8004208ab4:	88 90 35 01 00 00    	mov    %dl,0x135(%rax)
  8004208aba:	48 b8 c0 97 20 04 80 	movabs $0x80042097c0,%rax
  8004208ac1:	00 00 00 
  8004208ac4:	48 c1 e8 10          	shr    $0x10,%rax
  8004208ac8:	89 c2                	mov    %eax,%edx
  8004208aca:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208ad1:	00 00 00 
  8004208ad4:	66 89 90 36 01 00 00 	mov    %dx,0x136(%rax)
  8004208adb:	48 b8 c0 97 20 04 80 	movabs $0x80042097c0,%rax
  8004208ae2:	00 00 00 
  8004208ae5:	48 c1 e8 20          	shr    $0x20,%rax
  8004208ae9:	89 c2                	mov    %eax,%edx
  8004208aeb:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208af2:	00 00 00 
  8004208af5:	89 90 38 01 00 00    	mov    %edx,0x138(%rax)
  8004208afb:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208b02:	00 00 00 
  8004208b05:	c7 80 3c 01 00 00 00 	movl   $0x0,0x13c(%rax)
  8004208b0c:	00 00 00 
	SETGATE(idt[T_SYSCALL], 0, GD_KT, SYSCALL_F, 3);
  8004208b0f:	48 b8 c6 97 20 04 80 	movabs $0x80042097c6,%rax
  8004208b16:	00 00 00 
  8004208b19:	89 c2                	mov    %eax,%edx
  8004208b1b:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208b22:	00 00 00 
  8004208b25:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  8004208b2c:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208b33:	00 00 00 
  8004208b36:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  8004208b3d:	08 00 
  8004208b3f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208b46:	00 00 00 
  8004208b49:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  8004208b50:	83 e2 f8             	and    $0xfffffff8,%edx
  8004208b53:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  8004208b59:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208b60:	00 00 00 
  8004208b63:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  8004208b6a:	83 e2 07             	and    $0x7,%edx
  8004208b6d:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  8004208b73:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208b7a:	00 00 00 
  8004208b7d:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  8004208b84:	83 e2 f0             	and    $0xfffffff0,%edx
  8004208b87:	83 ca 0e             	or     $0xe,%edx
  8004208b8a:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  8004208b90:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208b97:	00 00 00 
  8004208b9a:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  8004208ba1:	83 e2 ef             	and    $0xffffffef,%edx
  8004208ba4:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  8004208baa:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208bb1:	00 00 00 
  8004208bb4:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  8004208bbb:	83 ca 60             	or     $0x60,%edx
  8004208bbe:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  8004208bc4:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208bcb:	00 00 00 
  8004208bce:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  8004208bd5:	83 ca 80             	or     $0xffffff80,%edx
  8004208bd8:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  8004208bde:	48 b8 c6 97 20 04 80 	movabs $0x80042097c6,%rax
  8004208be5:	00 00 00 
  8004208be8:	48 c1 e8 10          	shr    $0x10,%rax
  8004208bec:	89 c2                	mov    %eax,%edx
  8004208bee:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208bf5:	00 00 00 
  8004208bf8:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  8004208bff:	48 b8 c6 97 20 04 80 	movabs $0x80042097c6,%rax
  8004208c06:	00 00 00 
  8004208c09:	48 c1 e8 20          	shr    $0x20,%rax
  8004208c0d:	89 c2                	mov    %eax,%edx
  8004208c0f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208c16:	00 00 00 
  8004208c19:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  8004208c1f:	48 b8 c0 c1 2b 04 80 	movabs $0x80042bc1c0,%rax
  8004208c26:	00 00 00 
  8004208c29:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  8004208c30:	00 00 00 
	
	// Per-CPU setup
	trap_init_percpu();
  8004208c33:	48 b8 41 8c 20 04 80 	movabs $0x8004208c41,%rax
  8004208c3a:	00 00 00 
  8004208c3d:	ff d0                	callq  *%rax
}
  8004208c3f:	5d                   	pop    %rbp
  8004208c40:	c3                   	retq   

0000008004208c41 <trap_init_percpu>:

// Initialize and load the per-CPU TSS and IDT
void
trap_init_percpu(void)
{
  8004208c41:	55                   	push   %rbp
  8004208c42:	48 89 e5             	mov    %rsp,%rbp
  8004208c45:	48 83 ec 10          	sub    $0x10,%rsp

	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KSTACKTOP;
  8004208c49:	48 b8 80 d6 2b 04 80 	movabs $0x80042bd680,%rax
  8004208c50:	00 00 00 
  8004208c53:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  8004208c5a:	00 00 00 
  8004208c5d:	48 89 48 04          	mov    %rcx,0x4(%rax)

	// Initialize the TSS slot of the gdt.
	SETTSS((struct SystemSegdesc64 *)((gdt_pd>>16)+40),STS_T64A, (uint64_t) (&ts),sizeof(struct Taskstate), 0);
  8004208c61:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208c68:	00 00 00 
  8004208c6b:	48 8b 00             	mov    (%rax),%rax
  8004208c6e:	48 c1 f8 10          	sar    $0x10,%rax
  8004208c72:	48 83 c0 28          	add    $0x28,%rax
  8004208c76:	66 c7 00 68 00       	movw   $0x68,(%rax)
  8004208c7b:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208c82:	00 00 00 
  8004208c85:	48 8b 00             	mov    (%rax),%rax
  8004208c88:	48 c1 f8 10          	sar    $0x10,%rax
  8004208c8c:	48 83 c0 28          	add    $0x28,%rax
  8004208c90:	48 ba 80 d6 2b 04 80 	movabs $0x80042bd680,%rdx
  8004208c97:	00 00 00 
  8004208c9a:	66 89 50 02          	mov    %dx,0x2(%rax)
  8004208c9e:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208ca5:	00 00 00 
  8004208ca8:	48 8b 00             	mov    (%rax),%rax
  8004208cab:	48 c1 f8 10          	sar    $0x10,%rax
  8004208caf:	48 83 c0 28          	add    $0x28,%rax
  8004208cb3:	48 ba 80 d6 2b 04 80 	movabs $0x80042bd680,%rdx
  8004208cba:	00 00 00 
  8004208cbd:	48 c1 ea 10          	shr    $0x10,%rdx
  8004208cc1:	88 50 04             	mov    %dl,0x4(%rax)
  8004208cc4:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208ccb:	00 00 00 
  8004208cce:	48 8b 00             	mov    (%rax),%rax
  8004208cd1:	48 c1 f8 10          	sar    $0x10,%rax
  8004208cd5:	48 83 c0 28          	add    $0x28,%rax
  8004208cd9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004208cdd:	83 e2 f0             	and    $0xfffffff0,%edx
  8004208ce0:	83 ca 09             	or     $0x9,%edx
  8004208ce3:	88 50 05             	mov    %dl,0x5(%rax)
  8004208ce6:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208ced:	00 00 00 
  8004208cf0:	48 8b 00             	mov    (%rax),%rax
  8004208cf3:	48 c1 f8 10          	sar    $0x10,%rax
  8004208cf7:	48 83 c0 28          	add    $0x28,%rax
  8004208cfb:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004208cff:	83 e2 ef             	and    $0xffffffef,%edx
  8004208d02:	88 50 05             	mov    %dl,0x5(%rax)
  8004208d05:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208d0c:	00 00 00 
  8004208d0f:	48 8b 00             	mov    (%rax),%rax
  8004208d12:	48 c1 f8 10          	sar    $0x10,%rax
  8004208d16:	48 83 c0 28          	add    $0x28,%rax
  8004208d1a:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004208d1e:	83 e2 9f             	and    $0xffffff9f,%edx
  8004208d21:	88 50 05             	mov    %dl,0x5(%rax)
  8004208d24:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208d2b:	00 00 00 
  8004208d2e:	48 8b 00             	mov    (%rax),%rax
  8004208d31:	48 c1 f8 10          	sar    $0x10,%rax
  8004208d35:	48 83 c0 28          	add    $0x28,%rax
  8004208d39:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004208d3d:	83 ca 80             	or     $0xffffff80,%edx
  8004208d40:	88 50 05             	mov    %dl,0x5(%rax)
  8004208d43:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208d4a:	00 00 00 
  8004208d4d:	48 8b 00             	mov    (%rax),%rax
  8004208d50:	48 c1 f8 10          	sar    $0x10,%rax
  8004208d54:	48 83 c0 28          	add    $0x28,%rax
  8004208d58:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  8004208d5c:	83 e2 f0             	and    $0xfffffff0,%edx
  8004208d5f:	88 50 06             	mov    %dl,0x6(%rax)
  8004208d62:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208d69:	00 00 00 
  8004208d6c:	48 8b 00             	mov    (%rax),%rax
  8004208d6f:	48 c1 f8 10          	sar    $0x10,%rax
  8004208d73:	48 83 c0 28          	add    $0x28,%rax
  8004208d77:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  8004208d7b:	83 e2 ef             	and    $0xffffffef,%edx
  8004208d7e:	88 50 06             	mov    %dl,0x6(%rax)
  8004208d81:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208d88:	00 00 00 
  8004208d8b:	48 8b 00             	mov    (%rax),%rax
  8004208d8e:	48 c1 f8 10          	sar    $0x10,%rax
  8004208d92:	48 83 c0 28          	add    $0x28,%rax
  8004208d96:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  8004208d9a:	83 e2 9f             	and    $0xffffff9f,%edx
  8004208d9d:	88 50 06             	mov    %dl,0x6(%rax)
  8004208da0:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208da7:	00 00 00 
  8004208daa:	48 8b 00             	mov    (%rax),%rax
  8004208dad:	48 c1 f8 10          	sar    $0x10,%rax
  8004208db1:	48 83 c0 28          	add    $0x28,%rax
  8004208db5:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  8004208db9:	83 e2 7f             	and    $0x7f,%edx
  8004208dbc:	88 50 06             	mov    %dl,0x6(%rax)
  8004208dbf:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208dc6:	00 00 00 
  8004208dc9:	48 8b 00             	mov    (%rax),%rax
  8004208dcc:	48 c1 f8 10          	sar    $0x10,%rax
  8004208dd0:	48 83 c0 28          	add    $0x28,%rax
  8004208dd4:	48 ba 80 d6 2b 04 80 	movabs $0x80042bd680,%rdx
  8004208ddb:	00 00 00 
  8004208dde:	48 c1 ea 18          	shr    $0x18,%rdx
  8004208de2:	88 50 07             	mov    %dl,0x7(%rax)
  8004208de5:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208dec:	00 00 00 
  8004208def:	48 8b 00             	mov    (%rax),%rax
  8004208df2:	48 c1 f8 10          	sar    $0x10,%rax
  8004208df6:	48 83 c0 28          	add    $0x28,%rax
  8004208dfa:	48 ba 80 d6 2b 04 80 	movabs $0x80042bd680,%rdx
  8004208e01:	00 00 00 
  8004208e04:	48 c1 ea 20          	shr    $0x20,%rdx
  8004208e08:	89 50 08             	mov    %edx,0x8(%rax)
  8004208e0b:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208e12:	00 00 00 
  8004208e15:	48 8b 00             	mov    (%rax),%rax
  8004208e18:	48 c1 f8 10          	sar    $0x10,%rax
  8004208e1c:	48 83 c0 28          	add    $0x28,%rax
  8004208e20:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004208e24:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208e2b:	00 00 00 
  8004208e2e:	48 8b 00             	mov    (%rax),%rax
  8004208e31:	48 c1 f8 10          	sar    $0x10,%rax
  8004208e35:	48 83 c0 28          	add    $0x28,%rax
  8004208e39:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  8004208e3d:	48 b8 f8 65 22 04 80 	movabs $0x80042265f8,%rax
  8004208e44:	00 00 00 
  8004208e47:	48 8b 00             	mov    (%rax),%rax
  8004208e4a:	48 c1 f8 10          	sar    $0x10,%rax
  8004208e4e:	48 83 c0 28          	add    $0x28,%rax
  8004208e52:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  8004208e58:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  8004208e5e:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  8004208e62:	0f 00 d8             	ltr    %ax
  8004208e65:	48 b8 c0 d1 2b 04 80 	movabs $0x80042bd1c0,%rax
  8004208e6c:	00 00 00 
  8004208e6f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  8004208e73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208e77:	0f 01 18             	lidt   (%rax)
	// bottom three bits are special; we leave them 0)
	ltr(GD_TSS0);

	// Load the IDT
	lidt(&idt_pd);
}
  8004208e7a:	c9                   	leaveq 
  8004208e7b:	c3                   	retq   

0000008004208e7c <print_trapframe>:

void
print_trapframe(struct Trapframe *tf)
{
  8004208e7c:	55                   	push   %rbp
  8004208e7d:	48 89 e5             	mov    %rsp,%rbp
  8004208e80:	48 83 ec 20          	sub    $0x20,%rsp
  8004208e84:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	cprintf("TRAP frame at %p\n", tf);
  8004208e88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208e8c:	48 89 c6             	mov    %rax,%rsi
  8004208e8f:	48 bf 9b 29 21 04 80 	movabs $0x800421299b,%rdi
  8004208e96:	00 00 00 
  8004208e99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208e9e:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004208ea5:	00 00 00 
  8004208ea8:	ff d2                	callq  *%rdx
	print_regs(&tf->tf_regs);
  8004208eaa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208eae:	48 89 c7             	mov    %rax,%rdi
  8004208eb1:	48 b8 7f 91 20 04 80 	movabs $0x800420917f,%rax
  8004208eb8:	00 00 00 
  8004208ebb:	ff d0                	callq  *%rax
	cprintf("  es   0x----%04x\n", tf->tf_es);
  8004208ebd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208ec1:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  8004208ec5:	0f b7 c0             	movzwl %ax,%eax
  8004208ec8:	89 c6                	mov    %eax,%esi
  8004208eca:	48 bf ad 29 21 04 80 	movabs $0x80042129ad,%rdi
  8004208ed1:	00 00 00 
  8004208ed4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208ed9:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004208ee0:	00 00 00 
  8004208ee3:	ff d2                	callq  *%rdx
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
  8004208ee5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208ee9:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  8004208ef0:	0f b7 c0             	movzwl %ax,%eax
  8004208ef3:	89 c6                	mov    %eax,%esi
  8004208ef5:	48 bf c0 29 21 04 80 	movabs $0x80042129c0,%rdi
  8004208efc:	00 00 00 
  8004208eff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f04:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004208f0b:	00 00 00 
  8004208f0e:	ff d2                	callq  *%rdx
	cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
  8004208f10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208f14:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004208f1b:	89 c7                	mov    %eax,%edi
  8004208f1d:	48 b8 ae 77 20 04 80 	movabs $0x80042077ae,%rax
  8004208f24:	00 00 00 
  8004208f27:	ff d0                	callq  *%rax
  8004208f29:	48 89 c2             	mov    %rax,%rdx
  8004208f2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208f30:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004208f37:	48 89 c6             	mov    %rax,%rsi
  8004208f3a:	48 bf d3 29 21 04 80 	movabs $0x80042129d3,%rdi
  8004208f41:	00 00 00 
  8004208f44:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f49:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004208f50:	00 00 00 
  8004208f53:	ff d1                	callq  *%rcx
	// If this trap was a page fault that just happened
	// (so %cr2 is meaningful), print the faulting linear address.
	if (tf == last_tf && tf->tf_trapno == T_PGFLT)
  8004208f55:	48 b8 d0 d1 2b 04 80 	movabs $0x80042bd1d0,%rax
  8004208f5c:	00 00 00 
  8004208f5f:	48 8b 00             	mov    (%rax),%rax
  8004208f62:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004208f66:	75 3a                	jne    8004208fa2 <print_trapframe+0x126>
  8004208f68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208f6c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004208f73:	48 83 f8 0e          	cmp    $0xe,%rax
  8004208f77:	75 29                	jne    8004208fa2 <print_trapframe+0x126>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  8004208f79:	0f 20 d0             	mov    %cr2,%rax
  8004208f7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  8004208f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
		cprintf("  cr2  0x%08x\n", rcr2());
  8004208f84:	48 89 c6             	mov    %rax,%rsi
  8004208f87:	48 bf e5 29 21 04 80 	movabs $0x80042129e5,%rdi
  8004208f8e:	00 00 00 
  8004208f91:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f96:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004208f9d:	00 00 00 
  8004208fa0:	ff d2                	callq  *%rdx
	cprintf("  err  0x%08x", tf->tf_err);
  8004208fa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208fa6:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  8004208fad:	48 89 c6             	mov    %rax,%rsi
  8004208fb0:	48 bf f4 29 21 04 80 	movabs $0x80042129f4,%rdi
  8004208fb7:	00 00 00 
  8004208fba:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208fbf:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004208fc6:	00 00 00 
  8004208fc9:	ff d2                	callq  *%rdx
	// For page faults, print decoded fault error code:
	// U/K=fault occurred in user/kernel mode
	// W/R=a write/read caused the fault
	// PR=a protection violation caused the fault (NP=page not present).
	if (tf->tf_trapno == T_PGFLT)
  8004208fcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208fcf:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004208fd6:	48 83 f8 0e          	cmp    $0xe,%rax
  8004208fda:	0f 85 9c 00 00 00    	jne    800420907c <print_trapframe+0x200>
		cprintf(" [%s, %s, %s]\n",
			tf->tf_err & 4 ? "user" : "kernel",
			tf->tf_err & 2 ? "write" : "read",
			tf->tf_err & 1 ? "protection" : "not-present");
  8004208fe0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208fe4:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  8004208feb:	83 e0 01             	and    $0x1,%eax
	// For page faults, print decoded fault error code:
	// U/K=fault occurred in user/kernel mode
	// W/R=a write/read caused the fault
	// PR=a protection violation caused the fault (NP=page not present).
	if (tf->tf_trapno == T_PGFLT)
		cprintf(" [%s, %s, %s]\n",
  8004208fee:	48 85 c0             	test   %rax,%rax
  8004208ff1:	74 0c                	je     8004208fff <print_trapframe+0x183>
  8004208ff3:	48 b9 02 2a 21 04 80 	movabs $0x8004212a02,%rcx
  8004208ffa:	00 00 00 
  8004208ffd:	eb 0a                	jmp    8004209009 <print_trapframe+0x18d>
  8004208fff:	48 b9 0d 2a 21 04 80 	movabs $0x8004212a0d,%rcx
  8004209006:	00 00 00 
			tf->tf_err & 4 ? "user" : "kernel",
			tf->tf_err & 2 ? "write" : "read",
  8004209009:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420900d:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  8004209014:	83 e0 02             	and    $0x2,%eax
	// For page faults, print decoded fault error code:
	// U/K=fault occurred in user/kernel mode
	// W/R=a write/read caused the fault
	// PR=a protection violation caused the fault (NP=page not present).
	if (tf->tf_trapno == T_PGFLT)
		cprintf(" [%s, %s, %s]\n",
  8004209017:	48 85 c0             	test   %rax,%rax
  800420901a:	74 0c                	je     8004209028 <print_trapframe+0x1ac>
  800420901c:	48 ba 19 2a 21 04 80 	movabs $0x8004212a19,%rdx
  8004209023:	00 00 00 
  8004209026:	eb 0a                	jmp    8004209032 <print_trapframe+0x1b6>
  8004209028:	48 ba 1f 2a 21 04 80 	movabs $0x8004212a1f,%rdx
  800420902f:	00 00 00 
			tf->tf_err & 4 ? "user" : "kernel",
  8004209032:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209036:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420903d:	83 e0 04             	and    $0x4,%eax
	// For page faults, print decoded fault error code:
	// U/K=fault occurred in user/kernel mode
	// W/R=a write/read caused the fault
	// PR=a protection violation caused the fault (NP=page not present).
	if (tf->tf_trapno == T_PGFLT)
		cprintf(" [%s, %s, %s]\n",
  8004209040:	48 85 c0             	test   %rax,%rax
  8004209043:	74 0c                	je     8004209051 <print_trapframe+0x1d5>
  8004209045:	48 b8 24 2a 21 04 80 	movabs $0x8004212a24,%rax
  800420904c:	00 00 00 
  800420904f:	eb 0a                	jmp    800420905b <print_trapframe+0x1df>
  8004209051:	48 b8 29 2a 21 04 80 	movabs $0x8004212a29,%rax
  8004209058:	00 00 00 
  800420905b:	48 89 c6             	mov    %rax,%rsi
  800420905e:	48 bf 30 2a 21 04 80 	movabs $0x8004212a30,%rdi
  8004209065:	00 00 00 
  8004209068:	b8 00 00 00 00       	mov    $0x0,%eax
  800420906d:	49 b8 d6 76 20 04 80 	movabs $0x80042076d6,%r8
  8004209074:	00 00 00 
  8004209077:	41 ff d0             	callq  *%r8
  800420907a:	eb 1b                	jmp    8004209097 <print_trapframe+0x21b>
			tf->tf_err & 4 ? "user" : "kernel",
			tf->tf_err & 2 ? "write" : "read",
			tf->tf_err & 1 ? "protection" : "not-present");
	else
		cprintf("\n");
  800420907c:	48 bf 3f 2a 21 04 80 	movabs $0x8004212a3f,%rdi
  8004209083:	00 00 00 
  8004209086:	b8 00 00 00 00       	mov    $0x0,%eax
  800420908b:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209092:	00 00 00 
  8004209095:	ff d2                	callq  *%rdx
	cprintf("  rip  0x%08x\n", tf->tf_rip);
  8004209097:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420909b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  80042090a2:	48 89 c6             	mov    %rax,%rsi
  80042090a5:	48 bf 41 2a 21 04 80 	movabs $0x8004212a41,%rdi
  80042090ac:	00 00 00 
  80042090af:	b8 00 00 00 00       	mov    $0x0,%eax
  80042090b4:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042090bb:	00 00 00 
  80042090be:	ff d2                	callq  *%rdx
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
  80042090c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042090c4:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  80042090cb:	0f b7 c0             	movzwl %ax,%eax
  80042090ce:	89 c6                	mov    %eax,%esi
  80042090d0:	48 bf 50 2a 21 04 80 	movabs $0x8004212a50,%rdi
  80042090d7:	00 00 00 
  80042090da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042090df:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042090e6:	00 00 00 
  80042090e9:	ff d2                	callq  *%rdx
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
  80042090eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042090ef:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  80042090f6:	48 89 c6             	mov    %rax,%rsi
  80042090f9:	48 bf 63 2a 21 04 80 	movabs $0x8004212a63,%rdi
  8004209100:	00 00 00 
  8004209103:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209108:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  800420910f:	00 00 00 
  8004209112:	ff d2                	callq  *%rdx
	if ((tf->tf_cs & 3) != 0) {
  8004209114:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209118:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420911f:	0f b7 c0             	movzwl %ax,%eax
  8004209122:	83 e0 03             	and    $0x3,%eax
  8004209125:	85 c0                	test   %eax,%eax
  8004209127:	74 54                	je     800420917d <print_trapframe+0x301>
		cprintf("  rsp  0x%08x\n", tf->tf_rsp);
  8004209129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420912d:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  8004209134:	48 89 c6             	mov    %rax,%rsi
  8004209137:	48 bf 72 2a 21 04 80 	movabs $0x8004212a72,%rdi
  800420913e:	00 00 00 
  8004209141:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209146:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  800420914d:	00 00 00 
  8004209150:	ff d2                	callq  *%rdx
		cprintf("  ss   0x----%04x\n", tf->tf_ss);
  8004209152:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209156:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420915d:	0f b7 c0             	movzwl %ax,%eax
  8004209160:	89 c6                	mov    %eax,%esi
  8004209162:	48 bf 81 2a 21 04 80 	movabs $0x8004212a81,%rdi
  8004209169:	00 00 00 
  800420916c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209171:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209178:	00 00 00 
  800420917b:	ff d2                	callq  *%rdx
	}
}
  800420917d:	c9                   	leaveq 
  800420917e:	c3                   	retq   

000000800420917f <print_regs>:

void
print_regs(struct PushRegs *regs)
{
  800420917f:	55                   	push   %rbp
  8004209180:	48 89 e5             	mov    %rsp,%rbp
  8004209183:	48 83 ec 10          	sub    $0x10,%rsp
  8004209187:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	cprintf("  r15  0x%08x\n", regs->reg_r15);
  800420918b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420918f:	48 8b 00             	mov    (%rax),%rax
  8004209192:	48 89 c6             	mov    %rax,%rsi
  8004209195:	48 bf 94 2a 21 04 80 	movabs $0x8004212a94,%rdi
  800420919c:	00 00 00 
  800420919f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042091a4:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042091ab:	00 00 00 
  80042091ae:	ff d2                	callq  *%rdx
	cprintf("  r14  0x%08x\n", regs->reg_r14);
  80042091b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042091b4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042091b8:	48 89 c6             	mov    %rax,%rsi
  80042091bb:	48 bf a3 2a 21 04 80 	movabs $0x8004212aa3,%rdi
  80042091c2:	00 00 00 
  80042091c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042091ca:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042091d1:	00 00 00 
  80042091d4:	ff d2                	callq  *%rdx
	cprintf("  r13  0x%08x\n", regs->reg_r13);
  80042091d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042091da:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042091de:	48 89 c6             	mov    %rax,%rsi
  80042091e1:	48 bf b2 2a 21 04 80 	movabs $0x8004212ab2,%rdi
  80042091e8:	00 00 00 
  80042091eb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042091f0:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042091f7:	00 00 00 
  80042091fa:	ff d2                	callq  *%rdx
	cprintf("  r12  0x%08x\n", regs->reg_r12);
  80042091fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209200:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004209204:	48 89 c6             	mov    %rax,%rsi
  8004209207:	48 bf c1 2a 21 04 80 	movabs $0x8004212ac1,%rdi
  800420920e:	00 00 00 
  8004209211:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209216:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  800420921d:	00 00 00 
  8004209220:	ff d2                	callq  *%rdx
	cprintf("  r11  0x%08x\n", regs->reg_r11);
  8004209222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209226:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420922a:	48 89 c6             	mov    %rax,%rsi
  800420922d:	48 bf d0 2a 21 04 80 	movabs $0x8004212ad0,%rdi
  8004209234:	00 00 00 
  8004209237:	b8 00 00 00 00       	mov    $0x0,%eax
  800420923c:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209243:	00 00 00 
  8004209246:	ff d2                	callq  *%rdx
	cprintf("  r10  0x%08x\n", regs->reg_r10);
  8004209248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420924c:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004209250:	48 89 c6             	mov    %rax,%rsi
  8004209253:	48 bf df 2a 21 04 80 	movabs $0x8004212adf,%rdi
  800420925a:	00 00 00 
  800420925d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209262:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209269:	00 00 00 
  800420926c:	ff d2                	callq  *%rdx
	cprintf("  r9  0x%08x\n", regs->reg_r9);
  800420926e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209272:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004209276:	48 89 c6             	mov    %rax,%rsi
  8004209279:	48 bf ee 2a 21 04 80 	movabs $0x8004212aee,%rdi
  8004209280:	00 00 00 
  8004209283:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209288:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  800420928f:	00 00 00 
  8004209292:	ff d2                	callq  *%rdx
	cprintf("  r8  0x%08x\n", regs->reg_r8);
  8004209294:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209298:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420929c:	48 89 c6             	mov    %rax,%rsi
  800420929f:	48 bf fc 2a 21 04 80 	movabs $0x8004212afc,%rdi
  80042092a6:	00 00 00 
  80042092a9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092ae:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042092b5:	00 00 00 
  80042092b8:	ff d2                	callq  *%rdx
	cprintf("  rdi  0x%08x\n", regs->reg_rdi);
  80042092ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042092be:	48 8b 40 48          	mov    0x48(%rax),%rax
  80042092c2:	48 89 c6             	mov    %rax,%rsi
  80042092c5:	48 bf 0a 2b 21 04 80 	movabs $0x8004212b0a,%rdi
  80042092cc:	00 00 00 
  80042092cf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092d4:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042092db:	00 00 00 
  80042092de:	ff d2                	callq  *%rdx
	cprintf("  rsi  0x%08x\n", regs->reg_rsi);
  80042092e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042092e4:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042092e8:	48 89 c6             	mov    %rax,%rsi
  80042092eb:	48 bf 19 2b 21 04 80 	movabs $0x8004212b19,%rdi
  80042092f2:	00 00 00 
  80042092f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092fa:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209301:	00 00 00 
  8004209304:	ff d2                	callq  *%rdx
	cprintf("  rbp  0x%08x\n", regs->reg_rbp);
  8004209306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420930a:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420930e:	48 89 c6             	mov    %rax,%rsi
  8004209311:	48 bf 28 2b 21 04 80 	movabs $0x8004212b28,%rdi
  8004209318:	00 00 00 
  800420931b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209320:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209327:	00 00 00 
  800420932a:	ff d2                	callq  *%rdx
	cprintf("  rbx  0x%08x\n", regs->reg_rbx);
  800420932c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209330:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004209334:	48 89 c6             	mov    %rax,%rsi
  8004209337:	48 bf 37 2b 21 04 80 	movabs $0x8004212b37,%rdi
  800420933e:	00 00 00 
  8004209341:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209346:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  800420934d:	00 00 00 
  8004209350:	ff d2                	callq  *%rdx
	cprintf("  rdx  0x%08x\n", regs->reg_rdx);
  8004209352:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209356:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420935a:	48 89 c6             	mov    %rax,%rsi
  800420935d:	48 bf 46 2b 21 04 80 	movabs $0x8004212b46,%rdi
  8004209364:	00 00 00 
  8004209367:	b8 00 00 00 00       	mov    $0x0,%eax
  800420936c:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209373:	00 00 00 
  8004209376:	ff d2                	callq  *%rdx
	cprintf("  rcx  0x%08x\n", regs->reg_rcx);
  8004209378:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420937c:	48 8b 40 60          	mov    0x60(%rax),%rax
  8004209380:	48 89 c6             	mov    %rax,%rsi
  8004209383:	48 bf 55 2b 21 04 80 	movabs $0x8004212b55,%rdi
  800420938a:	00 00 00 
  800420938d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209392:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209399:	00 00 00 
  800420939c:	ff d2                	callq  *%rdx
	cprintf("  rax  0x%08x\n", regs->reg_rax);
  800420939e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042093a2:	48 8b 40 70          	mov    0x70(%rax),%rax
  80042093a6:	48 89 c6             	mov    %rax,%rsi
  80042093a9:	48 bf 64 2b 21 04 80 	movabs $0x8004212b64,%rdi
  80042093b0:	00 00 00 
  80042093b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042093b8:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  80042093bf:	00 00 00 
  80042093c2:	ff d2                	callq  *%rdx
}
  80042093c4:	c9                   	leaveq 
  80042093c5:	c3                   	retq   

00000080042093c6 <trap_dispatch>:

static void
trap_dispatch(struct Trapframe *tf)
{
  80042093c6:	55                   	push   %rbp
  80042093c7:	48 89 e5             	mov    %rsp,%rbp
  80042093ca:	48 83 ec 10          	sub    $0x10,%rsp
  80042093ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// Handle processor exceptions.
	// LAB 3: Your code here.



	if (tf->tf_trapno == T_PGFLT) {
  80042093d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042093d6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  80042093dd:	48 83 f8 0e          	cmp    $0xe,%rax
  80042093e1:	75 18                	jne    80042093fb <trap_dispatch+0x35>
		page_fault_handler(tf);
  80042093e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042093e7:	48 89 c7             	mov    %rax,%rdi
  80042093ea:	48 b8 9b 96 20 04 80 	movabs $0x800420969b,%rax
  80042093f1:	00 00 00 
  80042093f4:	ff d0                	callq  *%rax
		return;
  80042093f6:	e9 f7 00 00 00       	jmpq   80042094f2 <trap_dispatch+0x12c>
	}

	if (tf->tf_trapno == T_BRKPT) {
  80042093fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042093ff:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004209406:	48 83 f8 03          	cmp    $0x3,%rax
  800420940a:	75 18                	jne    8004209424 <trap_dispatch+0x5e>
		monitor(tf);
  800420940c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209410:	48 89 c7             	mov    %rax,%rdi
  8004209413:	48 b8 ad 12 20 04 80 	movabs $0x80042012ad,%rax
  800420941a:	00 00 00 
  800420941d:	ff d0                	callq  *%rax
		return;
  800420941f:	e9 ce 00 00 00       	jmpq   80042094f2 <trap_dispatch+0x12c>
	}

	if (tf->tf_trapno == T_SYSCALL) {
  8004209424:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209428:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420942f:	48 83 f8 30          	cmp    $0x30,%rax
  8004209433:	75 52                	jne    8004209487 <trap_dispatch+0xc1>
		tf->tf_regs.reg_rax = syscall(
  8004209435:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209439:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420943d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209441:	48 8b 78 48          	mov    0x48(%rax),%rdi
  8004209445:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209449:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420944d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209451:	48 8b 50 60          	mov    0x60(%rax),%rdx
  8004209455:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209459:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420945d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209461:	48 8b 40 70          	mov    0x70(%rax),%rax
  8004209465:	4d 89 c1             	mov    %r8,%r9
  8004209468:	49 89 f8             	mov    %rdi,%r8
  800420946b:	48 89 c7             	mov    %rax,%rdi
  800420946e:	48 b8 a2 99 20 04 80 	movabs $0x80042099a2,%rax
  8004209475:	00 00 00 
  8004209478:	ff d0                	callq  *%rax
  800420947a:	48 89 c2             	mov    %rax,%rdx
  800420947d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209481:	48 89 50 70          	mov    %rdx,0x70(%rax)
			tf->tf_regs.reg_rcx,
			tf->tf_regs.reg_rbx,
			tf->tf_regs.reg_rdi,
			tf->tf_regs.reg_rsi
			);
		return;
  8004209485:	eb 6b                	jmp    80042094f2 <trap_dispatch+0x12c>




	// Unexpected trap: The user process or the kernel has a bug.
	print_trapframe(tf);
  8004209487:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420948b:	48 89 c7             	mov    %rax,%rdi
  800420948e:	48 b8 7c 8e 20 04 80 	movabs $0x8004208e7c,%rax
  8004209495:	00 00 00 
  8004209498:	ff d0                	callq  *%rax
	if (tf->tf_cs == GD_KT)
  800420949a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420949e:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  80042094a5:	66 83 f8 08          	cmp    $0x8,%ax
  80042094a9:	75 2a                	jne    80042094d5 <trap_dispatch+0x10f>
		panic("unhandled trap in kernel");
  80042094ab:	48 ba 73 2b 21 04 80 	movabs $0x8004212b73,%rdx
  80042094b2:	00 00 00 
  80042094b5:	be ed 00 00 00       	mov    $0xed,%esi
  80042094ba:	48 bf 8c 2b 21 04 80 	movabs $0x8004212b8c,%rdi
  80042094c1:	00 00 00 
  80042094c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042094c9:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  80042094d0:	00 00 00 
  80042094d3:	ff d1                	callq  *%rcx
	else {
		env_destroy(curenv);
  80042094d5:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  80042094dc:	00 00 00 
  80042094df:	48 8b 00             	mov    (%rax),%rax
  80042094e2:	48 89 c7             	mov    %rax,%rdi
  80042094e5:	48 b8 1b 74 20 04 80 	movabs $0x800420741b,%rax
  80042094ec:	00 00 00 
  80042094ef:	ff d0                	callq  *%rax
		return;
  80042094f1:	90                   	nop
	}
}
  80042094f2:	c9                   	leaveq 
  80042094f3:	c3                   	retq   

00000080042094f4 <trap>:

void
trap(struct Trapframe *tf)
{
  80042094f4:	55                   	push   %rbp
  80042094f5:	48 89 e5             	mov    %rsp,%rbp
  80042094f8:	48 83 ec 20          	sub    $0x20,%rsp
  80042094fc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	//struct Trapframe *tf = &tf_;
	// The environment may have set DF and some versions
	// of GCC rely on DF being clear
	asm volatile("cld" ::: "cc");
  8004209500:	fc                   	cld    

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  8004209501:	9c                   	pushfq 
  8004209502:	58                   	pop    %rax
  8004209503:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  8004209507:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

	// Check that interrupts are disabled.  If this assertion
	// fails, DO NOT be tempted to fix it by inserting a "cli" in
	// the interrupt path.
	assert(!(read_eflags() & FL_IF));
  800420950b:	25 00 02 00 00       	and    $0x200,%eax
  8004209510:	48 85 c0             	test   %rax,%rax
  8004209513:	74 35                	je     800420954a <trap+0x56>
  8004209515:	48 b9 98 2b 21 04 80 	movabs $0x8004212b98,%rcx
  800420951c:	00 00 00 
  800420951f:	48 ba b1 2b 21 04 80 	movabs $0x8004212bb1,%rdx
  8004209526:	00 00 00 
  8004209529:	be ff 00 00 00       	mov    $0xff,%esi
  800420952e:	48 bf 8c 2b 21 04 80 	movabs $0x8004212b8c,%rdi
  8004209535:	00 00 00 
  8004209538:	b8 00 00 00 00       	mov    $0x0,%eax
  800420953d:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004209544:	00 00 00 
  8004209547:	41 ff d0             	callq  *%r8

	cprintf("Incoming TRAP frame at %p\n", tf);
  800420954a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420954e:	48 89 c6             	mov    %rax,%rsi
  8004209551:	48 bf c6 2b 21 04 80 	movabs $0x8004212bc6,%rdi
  8004209558:	00 00 00 
  800420955b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209560:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209567:	00 00 00 
  800420956a:	ff d2                	callq  *%rdx

	if ((tf->tf_cs & 3) == 3) {
  800420956c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209570:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  8004209577:	0f b7 c0             	movzwl %ax,%eax
  800420957a:	83 e0 03             	and    $0x3,%eax
  800420957d:	83 f8 03             	cmp    $0x3,%eax
  8004209580:	75 7a                	jne    80042095fc <trap+0x108>
		// Trapped from user mode.
		assert(curenv);
  8004209582:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209589:	00 00 00 
  800420958c:	48 8b 00             	mov    (%rax),%rax
  800420958f:	48 85 c0             	test   %rax,%rax
  8004209592:	75 35                	jne    80042095c9 <trap+0xd5>
  8004209594:	48 b9 e1 2b 21 04 80 	movabs $0x8004212be1,%rcx
  800420959b:	00 00 00 
  800420959e:	48 ba b1 2b 21 04 80 	movabs $0x8004212bb1,%rdx
  80042095a5:	00 00 00 
  80042095a8:	be 05 01 00 00       	mov    $0x105,%esi
  80042095ad:	48 bf 8c 2b 21 04 80 	movabs $0x8004212b8c,%rdi
  80042095b4:	00 00 00 
  80042095b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042095bc:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  80042095c3:	00 00 00 
  80042095c6:	41 ff d0             	callq  *%r8

		// Copy trap frame (which is currently on the stack)
		// into 'curenv->env_tf', so that running the environment
		// will restart at the trap point.
		curenv->env_tf = *tf;
  80042095c9:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  80042095d0:	00 00 00 
  80042095d3:	48 8b 10             	mov    (%rax),%rdx
  80042095d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042095da:	48 89 c6             	mov    %rax,%rsi
  80042095dd:	b8 18 00 00 00       	mov    $0x18,%eax
  80042095e2:	48 89 d7             	mov    %rdx,%rdi
  80042095e5:	48 89 c1             	mov    %rax,%rcx
  80042095e8:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		// The trapframe on the stack should be ignored from here on.
		tf = &curenv->env_tf;
  80042095eb:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  80042095f2:	00 00 00 
  80042095f5:	48 8b 00             	mov    (%rax),%rax
  80042095f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	}

	// Record that tf is the last real trapframe so
	// print_trapframe can print some additional information.
	last_tf = tf;
  80042095fc:	48 b8 d0 d1 2b 04 80 	movabs $0x80042bd1d0,%rax
  8004209603:	00 00 00 
  8004209606:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420960a:	48 89 10             	mov    %rdx,(%rax)

	// Dispatch based on what type of trap occurred
	trap_dispatch(tf);
  800420960d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209611:	48 89 c7             	mov    %rax,%rdi
  8004209614:	48 b8 c6 93 20 04 80 	movabs $0x80042093c6,%rax
  800420961b:	00 00 00 
  800420961e:	ff d0                	callq  *%rax

	// Return to the current environment, which should be running.
	assert(curenv && curenv->env_status == ENV_RUNNING);
  8004209620:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209627:	00 00 00 
  800420962a:	48 8b 00             	mov    (%rax),%rax
  800420962d:	48 85 c0             	test   %rax,%rax
  8004209630:	74 18                	je     800420964a <trap+0x156>
  8004209632:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209639:	00 00 00 
  800420963c:	48 8b 00             	mov    (%rax),%rax
  800420963f:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209645:	83 f8 03             	cmp    $0x3,%eax
  8004209648:	74 35                	je     800420967f <trap+0x18b>
  800420964a:	48 b9 e8 2b 21 04 80 	movabs $0x8004212be8,%rcx
  8004209651:	00 00 00 
  8004209654:	48 ba b1 2b 21 04 80 	movabs $0x8004212bb1,%rdx
  800420965b:	00 00 00 
  800420965e:	be 17 01 00 00       	mov    $0x117,%esi
  8004209663:	48 bf 8c 2b 21 04 80 	movabs $0x8004212b8c,%rdi
  800420966a:	00 00 00 
  800420966d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209672:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004209679:	00 00 00 
  800420967c:	41 ff d0             	callq  *%r8
	env_run(curenv);
  800420967f:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209686:	00 00 00 
  8004209689:	48 8b 00             	mov    (%rax),%rax
  800420968c:	48 89 c7             	mov    %rax,%rdi
  800420968f:	48 b8 01 75 20 04 80 	movabs $0x8004207501,%rax
  8004209696:	00 00 00 
  8004209699:	ff d0                	callq  *%rax

000000800420969b <page_fault_handler>:
}


void
page_fault_handler(struct Trapframe *tf)
{
  800420969b:	55                   	push   %rbp
  800420969c:	48 89 e5             	mov    %rsp,%rbp
  800420969f:	48 83 ec 20          	sub    $0x20,%rsp
  80042096a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  80042096a7:	0f 20 d0             	mov    %cr2,%rax
  80042096aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return val;
  80042096ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	uint64_t fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
  80042096b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	// Handle kernel-mode page faults.

	// LAB 3: Your code here.

	if((tf->tf_cs & 3) != 3)
  80042096b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042096ba:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  80042096c1:	0f b7 c0             	movzwl %ax,%eax
  80042096c4:	83 e0 03             	and    $0x3,%eax
  80042096c7:	83 f8 03             	cmp    $0x3,%eax
  80042096ca:	74 2a                	je     80042096f6 <page_fault_handler+0x5b>
		panic("invalid page fault in kernel mode");
  80042096cc:	48 ba 18 2c 21 04 80 	movabs $0x8004212c18,%rdx
  80042096d3:	00 00 00 
  80042096d6:	be 29 01 00 00       	mov    $0x129,%esi
  80042096db:	48 bf 8c 2b 21 04 80 	movabs $0x8004212b8c,%rdi
  80042096e2:	00 00 00 
  80042096e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042096ea:	48 b9 50 01 20 04 80 	movabs $0x8004200150,%rcx
  80042096f1:	00 00 00 
  80042096f4:	ff d1                	callq  *%rcx

	// We've already handled kernel-mode exceptions, so if we get here,
	// the page fault happened in user mode.

	// Destroy the environment that caused the fault.
	cprintf("[%08x] user fault va %08x ip %08x\n",
  80042096f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042096fa:	48 8b 88 98 00 00 00 	mov    0x98(%rax),%rcx
		curenv->env_id, fault_va, tf->tf_rip);
  8004209701:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209708:	00 00 00 
  800420970b:	48 8b 00             	mov    (%rax),%rax

	// We've already handled kernel-mode exceptions, so if we get here,
	// the page fault happened in user mode.

	// Destroy the environment that caused the fault.
	cprintf("[%08x] user fault va %08x ip %08x\n",
  800420970e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004209714:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004209718:	89 c6                	mov    %eax,%esi
  800420971a:	48 bf 40 2c 21 04 80 	movabs $0x8004212c40,%rdi
  8004209721:	00 00 00 
  8004209724:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209729:	49 b8 d6 76 20 04 80 	movabs $0x80042076d6,%r8
  8004209730:	00 00 00 
  8004209733:	41 ff d0             	callq  *%r8
		curenv->env_id, fault_va, tf->tf_rip);
	print_trapframe(tf);
  8004209736:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420973a:	48 89 c7             	mov    %rax,%rdi
  800420973d:	48 b8 7c 8e 20 04 80 	movabs $0x8004208e7c,%rax
  8004209744:	00 00 00 
  8004209747:	ff d0                	callq  *%rax
	env_destroy(curenv);
  8004209749:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209750:	00 00 00 
  8004209753:	48 8b 00             	mov    (%rax),%rax
  8004209756:	48 89 c7             	mov    %rax,%rdi
  8004209759:	48 b8 1b 74 20 04 80 	movabs $0x800420741b,%rax
  8004209760:	00 00 00 
  8004209763:	ff d0                	callq  *%rax
}
  8004209765:	c9                   	leaveq 
  8004209766:	c3                   	retq   
  8004209767:	90                   	nop

0000008004209768 <DIVIDE_F>:
 * Lab 3: Your code here for generating entry points for the different traps.
   Find the PUSHA,POPA macros in kern/macro.h. Since amd64 doesn't support
   pusha,popa so you will find these macros handy.
 */
	
	TRAPHANDLER_NOEC(DIVIDE_F, T_DIVIDE)
  8004209768:	6a 00                	pushq  $0x0
  800420976a:	6a 00                	pushq  $0x0
  800420976c:	eb 65                	jmp    80042097d3 <_alltraps>

000000800420976e <DEBUG_F>:
 	TRAPHANDLER_NOEC(DEBUG_F, T_DEBUG)
  800420976e:	6a 00                	pushq  $0x0
  8004209770:	6a 01                	pushq  $0x1
  8004209772:	eb 5f                	jmp    80042097d3 <_alltraps>

0000008004209774 <NMI_F>:
 	TRAPHANDLER_NOEC(NMI_F, T_NMI)
  8004209774:	6a 00                	pushq  $0x0
  8004209776:	6a 02                	pushq  $0x2
  8004209778:	eb 59                	jmp    80042097d3 <_alltraps>

000000800420977a <BRKPT_F>:
 	TRAPHANDLER_NOEC(BRKPT_F, T_BRKPT)
  800420977a:	6a 00                	pushq  $0x0
  800420977c:	6a 03                	pushq  $0x3
  800420977e:	eb 53                	jmp    80042097d3 <_alltraps>

0000008004209780 <OFLOW_F>:
 	TRAPHANDLER_NOEC(OFLOW_F, T_OFLOW)
  8004209780:	6a 00                	pushq  $0x0
  8004209782:	6a 04                	pushq  $0x4
  8004209784:	eb 4d                	jmp    80042097d3 <_alltraps>

0000008004209786 <BOUND_F>:
 	TRAPHANDLER_NOEC(BOUND_F, T_BOUND)
  8004209786:	6a 00                	pushq  $0x0
  8004209788:	6a 05                	pushq  $0x5
  800420978a:	eb 47                	jmp    80042097d3 <_alltraps>

000000800420978c <ILLOP_F>:
 	TRAPHANDLER_NOEC(ILLOP_F, T_ILLOP)
  800420978c:	6a 00                	pushq  $0x0
  800420978e:	6a 06                	pushq  $0x6
  8004209790:	eb 41                	jmp    80042097d3 <_alltraps>

0000008004209792 <DEVICE_F>:
 	TRAPHANDLER_NOEC(DEVICE_F, T_DEVICE)
  8004209792:	6a 00                	pushq  $0x0
  8004209794:	6a 07                	pushq  $0x7
  8004209796:	eb 3b                	jmp    80042097d3 <_alltraps>

0000008004209798 <DBLFLT_F>:
 	TRAPHANDLER(DBLFLT_F, T_DBLFLT)
  8004209798:	6a 08                	pushq  $0x8
  800420979a:	eb 37                	jmp    80042097d3 <_alltraps>

000000800420979c <TSS_F>:
 	TRAPHANDLER(TSS_F, T_TSS)
  800420979c:	6a 0a                	pushq  $0xa
  800420979e:	eb 33                	jmp    80042097d3 <_alltraps>

00000080042097a0 <SEGNP_F>:
 	TRAPHANDLER(SEGNP_F, T_SEGNP)
  80042097a0:	6a 0b                	pushq  $0xb
  80042097a2:	eb 2f                	jmp    80042097d3 <_alltraps>

00000080042097a4 <STACK_F>:
 	TRAPHANDLER(STACK_F, T_STACK)
  80042097a4:	6a 0c                	pushq  $0xc
  80042097a6:	eb 2b                	jmp    80042097d3 <_alltraps>

00000080042097a8 <GPFLT_F>:
 	TRAPHANDLER(GPFLT_F, T_GPFLT)
  80042097a8:	6a 0d                	pushq  $0xd
  80042097aa:	eb 27                	jmp    80042097d3 <_alltraps>

00000080042097ac <PGFLT_F>:
 	TRAPHANDLER(PGFLT_F, T_PGFLT)
  80042097ac:	6a 0e                	pushq  $0xe
  80042097ae:	eb 23                	jmp    80042097d3 <_alltraps>

00000080042097b0 <FPERR_F>:
 	TRAPHANDLER_NOEC(FPERR_F, T_FPERR)
  80042097b0:	6a 00                	pushq  $0x0
  80042097b2:	6a 10                	pushq  $0x10
  80042097b4:	eb 1d                	jmp    80042097d3 <_alltraps>

00000080042097b6 <ALIGN_F>:
 	TRAPHANDLER(ALIGN_F, T_ALIGN)
  80042097b6:	6a 11                	pushq  $0x11
  80042097b8:	eb 19                	jmp    80042097d3 <_alltraps>

00000080042097ba <MCHK_F>:
 	TRAPHANDLER_NOEC(MCHK_F, T_MCHK)
  80042097ba:	6a 00                	pushq  $0x0
  80042097bc:	6a 12                	pushq  $0x12
  80042097be:	eb 13                	jmp    80042097d3 <_alltraps>

00000080042097c0 <SIMDERR_F>:
 	TRAPHANDLER_NOEC(SIMDERR_F, T_SIMDERR)
  80042097c0:	6a 00                	pushq  $0x0
  80042097c2:	6a 13                	pushq  $0x13
  80042097c4:	eb 0d                	jmp    80042097d3 <_alltraps>

00000080042097c6 <SYSCALL_F>:
 	TRAPHANDLER_NOEC(SYSCALL_F, T_SYSCALL)
  80042097c6:	6a 00                	pushq  $0x0
  80042097c8:	6a 30                	pushq  $0x30
  80042097ca:	eb 07                	jmp    80042097d3 <_alltraps>

00000080042097cc <DEFAULT_F>:
 	TRAPHANDLER(DEFAULT_F, T_DEFAULT)
  80042097cc:	68 f4 01 00 00       	pushq  $0x1f4
  80042097d1:	eb 00                	jmp    80042097d3 <_alltraps>

00000080042097d3 <_alltraps>:
 *       for how to pass a pointer to the trapframe.
 */


	_alltraps:
       	sub $16,%rsp
  80042097d3:	48 83 ec 10          	sub    $0x10,%rsp
       	movw %ds,8(%rsp)
  80042097d7:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
       	movw %es,0(%rsp)
  80042097db:	8c 04 24             	mov    %es,(%rsp)
       	PUSHA
  80042097de:	48 83 ec 78          	sub    $0x78,%rsp
  80042097e2:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  80042097e7:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  80042097ec:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  80042097f1:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  80042097f6:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  80042097fb:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  8004209800:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  8004209805:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420980a:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420980f:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  8004209814:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  8004209819:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420981e:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  8004209823:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  8004209828:	4c 89 3c 24          	mov    %r15,(%rsp)
       	movq $GD_KD, %rax
  800420982c:	48 c7 c0 10 00 00 00 	mov    $0x10,%rax
       	movq %rax, %es
  8004209833:	48 8e c0             	mov    %rax,%es
       	movq %rax, %ds
  8004209836:	48 8e d8             	mov    %rax,%ds
       	movq %rsp, %rdi
  8004209839:	48 89 e7             	mov    %rsp,%rdi
       	call trap
  800420983c:	e8 b3 fc ff ff       	callq  80042094f4 <trap>

0000008004209841 <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  8004209841:	55                   	push   %rbp
  8004209842:	48 89 e5             	mov    %rsp,%rbp
  8004209845:	48 83 ec 10          	sub    $0x10,%rsp
  8004209849:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420984d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// LAB 3: Your code here.




		user_mem_assert(curenv, s, len, PTE_U);
  8004209851:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209858:	00 00 00 
  800420985b:	48 8b 00             	mov    (%rax),%rax
  800420985e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209862:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004209866:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420986b:	48 89 c7             	mov    %rax,%rdi
  800420986e:	48 b8 7e 2f 20 04 80 	movabs $0x8004202f7e,%rax
  8004209875:	00 00 00 
  8004209878:	ff d0                	callq  *%rax




	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420987a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420987e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209882:	48 89 c6             	mov    %rax,%rsi
  8004209885:	48 bf 60 2e 21 04 80 	movabs $0x8004212e60,%rdi
  800420988c:	00 00 00 
  800420988f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209894:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  800420989b:	00 00 00 
  800420989e:	ff d1                	callq  *%rcx
}
  80042098a0:	c9                   	leaveq 
  80042098a1:	c3                   	retq   

00000080042098a2 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  80042098a2:	55                   	push   %rbp
  80042098a3:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  80042098a6:	48 b8 be 0c 20 04 80 	movabs $0x8004200cbe,%rax
  80042098ad:	00 00 00 
  80042098b0:	ff d0                	callq  *%rax
}
  80042098b2:	5d                   	pop    %rbp
  80042098b3:	c3                   	retq   

00000080042098b4 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  80042098b4:	55                   	push   %rbp
  80042098b5:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  80042098b8:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  80042098bf:	00 00 00 
  80042098c2:	48 8b 00             	mov    (%rax),%rax
  80042098c5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  80042098cb:	5d                   	pop    %rbp
  80042098cc:	c3                   	retq   

00000080042098cd <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  80042098cd:	55                   	push   %rbp
  80042098ce:	48 89 e5             	mov    %rsp,%rbp
  80042098d1:	48 83 ec 20          	sub    $0x20,%rsp
  80042098d5:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  80042098d8:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  80042098dc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042098df:	ba 01 00 00 00       	mov    $0x1,%edx
  80042098e4:	48 89 ce             	mov    %rcx,%rsi
  80042098e7:	89 c7                	mov    %eax,%edi
  80042098e9:	48 b8 9f 66 20 04 80 	movabs $0x800420669f,%rax
  80042098f0:	00 00 00 
  80042098f3:	ff d0                	callq  *%rax
  80042098f5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042098f8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042098fc:	79 08                	jns    8004209906 <sys_env_destroy+0x39>
		return r;
  80042098fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209901:	e9 9a 00 00 00       	jmpq   80042099a0 <sys_env_destroy+0xd3>
	if (e == curenv)
  8004209906:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420990a:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209911:	00 00 00 
  8004209914:	48 8b 00             	mov    (%rax),%rax
  8004209917:	48 39 c2             	cmp    %rax,%rdx
  800420991a:	75 32                	jne    800420994e <sys_env_destroy+0x81>
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
  800420991c:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  8004209923:	00 00 00 
  8004209926:	48 8b 00             	mov    (%rax),%rax
  8004209929:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420992f:	89 c6                	mov    %eax,%esi
  8004209931:	48 bf 65 2e 21 04 80 	movabs $0x8004212e65,%rdi
  8004209938:	00 00 00 
  800420993b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209940:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  8004209947:	00 00 00 
  800420994a:	ff d2                	callq  *%rdx
  800420994c:	eb 3a                	jmp    8004209988 <sys_env_destroy+0xbb>
	else
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
  800420994e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209952:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004209958:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  800420995f:	00 00 00 
  8004209962:	48 8b 00             	mov    (%rax),%rax
  8004209965:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420996b:	89 c6                	mov    %eax,%esi
  800420996d:	48 bf 80 2e 21 04 80 	movabs $0x8004212e80,%rdi
  8004209974:	00 00 00 
  8004209977:	b8 00 00 00 00       	mov    $0x0,%eax
  800420997c:	48 b9 d6 76 20 04 80 	movabs $0x80042076d6,%rcx
  8004209983:	00 00 00 
  8004209986:	ff d1                	callq  *%rcx
	env_destroy(e);
  8004209988:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420998c:	48 89 c7             	mov    %rax,%rdi
  800420998f:	48 b8 1b 74 20 04 80 	movabs $0x800420741b,%rax
  8004209996:	00 00 00 
  8004209999:	ff d0                	callq  *%rax
	return 0;
  800420999b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042099a0:	c9                   	leaveq 
  80042099a1:	c3                   	retq   

00000080042099a2 <syscall>:


// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  80042099a2:	55                   	push   %rbp
  80042099a3:	48 89 e5             	mov    %rsp,%rbp
  80042099a6:	48 83 ec 30          	sub    $0x30,%rsp
  80042099aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042099ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042099b2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042099b6:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  80042099ba:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  80042099be:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)





	switch (syscallno) {
  80042099c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042099c6:	48 83 f8 01          	cmp    $0x1,%rax
  80042099ca:	74 35                	je     8004209a01 <syscall+0x5f>
  80042099cc:	48 83 f8 01          	cmp    $0x1,%rax
  80042099d0:	72 0e                	jb     80042099e0 <syscall+0x3e>
  80042099d2:	48 83 f8 02          	cmp    $0x2,%rax
  80042099d6:	74 39                	je     8004209a11 <syscall+0x6f>
  80042099d8:	48 83 f8 03          	cmp    $0x3,%rax
  80042099dc:	74 43                	je     8004209a21 <syscall+0x7f>
  80042099de:	eb 57                	jmp    8004209a37 <syscall+0x95>
		case SYS_cputs:
			sys_cputs((const char *)a1, (size_t)a2);
  80042099e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042099e4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042099e8:	48 89 d6             	mov    %rdx,%rsi
  80042099eb:	48 89 c7             	mov    %rax,%rdi
  80042099ee:	48 b8 41 98 20 04 80 	movabs $0x8004209841,%rax
  80042099f5:	00 00 00 
  80042099f8:	ff d0                	callq  *%rax
			return 0;
  80042099fa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042099ff:	eb 3d                	jmp    8004209a3e <syscall+0x9c>
		case SYS_cgetc:
			return sys_cgetc();
  8004209a01:	48 b8 a2 98 20 04 80 	movabs $0x80042098a2,%rax
  8004209a08:	00 00 00 
  8004209a0b:	ff d0                	callq  *%rax
  8004209a0d:	48 98                	cltq   
  8004209a0f:	eb 2d                	jmp    8004209a3e <syscall+0x9c>
		case SYS_getenvid:
			return sys_getenvid();
  8004209a11:	48 b8 b4 98 20 04 80 	movabs $0x80042098b4,%rax
  8004209a18:	00 00 00 
  8004209a1b:	ff d0                	callq  *%rax
  8004209a1d:	48 98                	cltq   
  8004209a1f:	eb 1d                	jmp    8004209a3e <syscall+0x9c>
		case SYS_env_destroy:
			return sys_env_destroy(a1);
  8004209a21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209a25:	89 c7                	mov    %eax,%edi
  8004209a27:	48 b8 cd 98 20 04 80 	movabs $0x80042098cd,%rax
  8004209a2e:	00 00 00 
  8004209a31:	ff d0                	callq  *%rax
  8004209a33:	48 98                	cltq   
  8004209a35:	eb 07                	jmp    8004209a3e <syscall+0x9c>

		default:
			return -E_INVAL;
  8004209a37:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
	}
}
  8004209a3e:	c9                   	leaveq 
  8004209a3f:	c3                   	retq   

0000008004209a40 <list_func_die>:
	const char *stabstr;
	const char *stabstr_end;
};

int list_func_die(struct Ripdebuginfo *info, Dwarf_Die *die, uint64_t addr)
{
  8004209a40:	55                   	push   %rbp
  8004209a41:	48 89 e5             	mov    %rsp,%rbp
  8004209a44:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  8004209a4b:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  8004209a52:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  8004209a59:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
	_Dwarf_Line ln;
	Dwarf_Attribute *low;
	Dwarf_Attribute *high;
	Dwarf_CU *cu = die->cu_header;
  8004209a60:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209a67:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  8004209a6e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	Dwarf_Die *cudie = die->cu_die; 
  8004209a72:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209a79:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  8004209a80:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	Dwarf_Die ret, sib=*die; 
  8004209a84:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  8004209a8b:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  8004209a92:	48 89 d1             	mov    %rdx,%rcx
  8004209a95:	ba 70 30 00 00       	mov    $0x3070,%edx
  8004209a9a:	48 89 ce             	mov    %rcx,%rsi
  8004209a9d:	48 89 c7             	mov    %rax,%rdi
  8004209aa0:	48 b8 56 b6 20 04 80 	movabs $0x800420b656,%rax
  8004209aa7:	00 00 00 
  8004209aaa:	ff d0                	callq  *%rax
	Dwarf_Attribute *attr;
	uint64_t offset;
	uint64_t ret_val=8;
  8004209aac:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  8004209ab3:	00 
	uint64_t ret_offset=0;
  8004209ab4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004209abb:	00 

	if(die->die_tag != DW_TAG_subprogram)
  8004209abc:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209ac3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004209ac7:	48 83 f8 2e          	cmp    $0x2e,%rax
  8004209acb:	74 0a                	je     8004209ad7 <list_func_die+0x97>
		return 0;
  8004209acd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209ad2:	e9 cd 06 00 00       	jmpq   800420a1a4 <list_func_die+0x764>

	memset(&ln, 0, sizeof(_Dwarf_Line));
  8004209ad7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209ade:	ba 38 00 00 00       	mov    $0x38,%edx
  8004209ae3:	be 00 00 00 00       	mov    $0x0,%esi
  8004209ae8:	48 89 c7             	mov    %rax,%rdi
  8004209aeb:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  8004209af2:	00 00 00 
  8004209af5:	ff d0                	callq  *%rax

	low  = _dwarf_attr_find(die, DW_AT_low_pc);
  8004209af7:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209afe:	be 11 00 00 00       	mov    $0x11,%esi
  8004209b03:	48 89 c7             	mov    %rax,%rdi
  8004209b06:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004209b0d:	00 00 00 
  8004209b10:	ff d0                	callq  *%rax
  8004209b12:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	high = _dwarf_attr_find(die, DW_AT_high_pc);
  8004209b16:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209b1d:	be 12 00 00 00       	mov    $0x12,%esi
  8004209b22:	48 89 c7             	mov    %rax,%rdi
  8004209b25:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004209b2c:	00 00 00 
  8004209b2f:	ff d0                	callq  *%rax
  8004209b31:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

	if((low && (low->u[0].u64 < addr)) && (high && (high->u[0].u64 > addr)))
  8004209b35:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004209b3a:	0f 84 5f 06 00 00    	je     800420a19f <list_func_die+0x75f>
  8004209b40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209b44:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004209b48:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  8004209b4f:	0f 83 4a 06 00 00    	jae    800420a19f <list_func_die+0x75f>
  8004209b55:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004209b5a:	0f 84 3f 06 00 00    	je     800420a19f <list_func_die+0x75f>
  8004209b60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004209b64:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004209b68:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  8004209b6f:	0f 86 2a 06 00 00    	jbe    800420a19f <list_func_die+0x75f>
	{
		info->rip_file = die->cu_die->die_name;
  8004209b75:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209b7c:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  8004209b83:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  8004209b8a:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209b91:	48 89 10             	mov    %rdx,(%rax)

		info->rip_fn_name = die->die_name;
  8004209b94:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209b9b:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  8004209ba2:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209ba9:	48 89 50 10          	mov    %rdx,0x10(%rax)
		info->rip_fn_namelen = strlen(die->die_name);
  8004209bad:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209bb4:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  8004209bbb:	48 89 c7             	mov    %rax,%rdi
  8004209bbe:	48 b8 af b1 20 04 80 	movabs $0x800420b1af,%rax
  8004209bc5:	00 00 00 
  8004209bc8:	ff d0                	callq  *%rax
  8004209bca:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  8004209bd1:	89 42 18             	mov    %eax,0x18(%rdx)

		info->rip_fn_addr = (uintptr_t)low->u[0].u64;
  8004209bd4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209bd8:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004209bdc:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209be3:	48 89 50 20          	mov    %rdx,0x20(%rax)

		assert(die->cu_die);	
  8004209be7:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209bee:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  8004209bf5:	48 85 c0             	test   %rax,%rax
  8004209bf8:	75 35                	jne    8004209c2f <list_func_die+0x1ef>
  8004209bfa:	48 b9 c0 31 21 04 80 	movabs $0x80042131c0,%rcx
  8004209c01:	00 00 00 
  8004209c04:	48 ba cc 31 21 04 80 	movabs $0x80042131cc,%rdx
  8004209c0b:	00 00 00 
  8004209c0e:	be 91 00 00 00       	mov    $0x91,%esi
  8004209c13:	48 bf e1 31 21 04 80 	movabs $0x80042131e1,%rdi
  8004209c1a:	00 00 00 
  8004209c1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209c22:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004209c29:	00 00 00 
  8004209c2c:	41 ff d0             	callq  *%r8
		dwarf_srclines(die->cu_die, &ln, addr, NULL); 
  8004209c2f:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  8004209c36:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  8004209c3d:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  8004209c44:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  8004209c4b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004209c50:	48 89 c7             	mov    %rax,%rdi
  8004209c53:	48 b8 10 0a 21 04 80 	movabs $0x8004210a10,%rax
  8004209c5a:	00 00 00 
  8004209c5d:	ff d0                	callq  *%rax

		info->rip_line = ln.ln_lineno;
  8004209c5f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004209c66:	89 c2                	mov    %eax,%edx
  8004209c68:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209c6f:	89 50 08             	mov    %edx,0x8(%rax)
		info->rip_fn_narg = 0;
  8004209c72:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209c79:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)

		Dwarf_Attribute* attr;

		if(dwarf_child(dbg, cu, &sib, &ret) != DW_DLE_NO_ENTRY)
  8004209c80:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004209c87:	00 00 00 
  8004209c8a:	48 8b 00             	mov    (%rax),%rax
  8004209c8d:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  8004209c94:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  8004209c9b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004209c9f:	48 89 c7             	mov    %rax,%rdi
  8004209ca2:	48 b8 c0 d6 20 04 80 	movabs $0x800420d6c0,%rax
  8004209ca9:	00 00 00 
  8004209cac:	ff d0                	callq  *%rax
  8004209cae:	83 f8 04             	cmp    $0x4,%eax
  8004209cb1:	0f 84 e1 04 00 00    	je     800420a198 <list_func_die+0x758>
		{
			if(ret.die_tag != DW_TAG_formal_parameter)
  8004209cb7:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  8004209cbe:	48 83 f8 05          	cmp    $0x5,%rax
  8004209cc2:	74 05                	je     8004209cc9 <list_func_die+0x289>
				goto last;
  8004209cc4:	e9 cf 04 00 00       	jmpq   800420a198 <list_func_die+0x758>

			attr = _dwarf_attr_find(&ret, DW_AT_type);
  8004209cc9:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  8004209cd0:	be 49 00 00 00       	mov    $0x49,%esi
  8004209cd5:	48 89 c7             	mov    %rax,%rdi
  8004209cd8:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004209cdf:	00 00 00 
  8004209ce2:	ff d0                	callq  *%rax
  8004209ce4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	
		try_again:
			if(attr != NULL)
  8004209ce8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004209ced:	0f 84 d7 00 00 00    	je     8004209dca <list_func_die+0x38a>
			{
				offset = (uint64_t)cu->cu_offset + attr->u[0].u64;
  8004209cf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209cf7:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004209cfb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209cff:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004209d03:	48 01 d0             	add    %rdx,%rax
  8004209d06:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
				dwarf_offdie(dbg, offset, &sib, *cu);
  8004209d0a:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004209d11:	00 00 00 
  8004209d14:	48 8b 08             	mov    (%rax),%rcx
  8004209d17:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  8004209d1e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004209d22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209d26:	48 8b 38             	mov    (%rax),%rdi
  8004209d29:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004209d2d:	48 8b 78 08          	mov    0x8(%rax),%rdi
  8004209d31:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004209d36:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004209d3a:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004209d3f:	48 8b 78 18          	mov    0x18(%rax),%rdi
  8004209d43:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004209d48:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004209d4c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004209d51:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004209d55:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004209d5a:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004209d5e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004209d63:	48 89 cf             	mov    %rcx,%rdi
  8004209d66:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  8004209d6d:	00 00 00 
  8004209d70:	ff d0                	callq  *%rax
				attr = _dwarf_attr_find(&sib, DW_AT_byte_size);
  8004209d72:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  8004209d79:	be 0b 00 00 00       	mov    $0xb,%esi
  8004209d7e:	48 89 c7             	mov    %rax,%rdi
  8004209d81:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004209d88:	00 00 00 
  8004209d8b:	ff d0                	callq  *%rax
  8004209d8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		
				if(attr != NULL)
  8004209d91:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004209d96:	74 0e                	je     8004209da6 <list_func_die+0x366>
				{
					ret_val = attr->u[0].u64;
  8004209d98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209d9c:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004209da0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209da4:	eb 24                	jmp    8004209dca <list_func_die+0x38a>
				}
				else
				{
					attr = _dwarf_attr_find(&sib, DW_AT_type);
  8004209da6:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  8004209dad:	be 49 00 00 00       	mov    $0x49,%esi
  8004209db2:	48 89 c7             	mov    %rax,%rdi
  8004209db5:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004209dbc:	00 00 00 
  8004209dbf:	ff d0                	callq  *%rax
  8004209dc1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
					goto try_again;
  8004209dc5:	e9 1e ff ff ff       	jmpq   8004209ce8 <list_func_die+0x2a8>
				}
			}

			ret_offset = 0;
  8004209dca:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004209dd1:	00 
			attr = _dwarf_attr_find(&ret, DW_AT_location);
  8004209dd2:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  8004209dd9:	be 02 00 00 00       	mov    $0x2,%esi
  8004209dde:	48 89 c7             	mov    %rax,%rdi
  8004209de1:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004209de8:	00 00 00 
  8004209deb:	ff d0                	callq  *%rax
  8004209ded:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			if (attr != NULL)
  8004209df1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004209df6:	0f 84 a2 00 00 00    	je     8004209e9e <list_func_die+0x45e>
			{
				Dwarf_Unsigned loc_len = attr->at_block.bl_len;
  8004209dfc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209e00:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004209e04:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
				Dwarf_Small *loc_ptr = attr->at_block.bl_data;
  8004209e08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209e0c:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004209e10:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
				Dwarf_Small atom;
				Dwarf_Unsigned op1, op2;

				switch(attr->at_form) {
  8004209e14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209e18:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004209e1c:	48 83 f8 03          	cmp    $0x3,%rax
  8004209e20:	72 7c                	jb     8004209e9e <list_func_die+0x45e>
  8004209e22:	48 83 f8 04          	cmp    $0x4,%rax
  8004209e26:	76 06                	jbe    8004209e2e <list_func_die+0x3ee>
  8004209e28:	48 83 f8 0a          	cmp    $0xa,%rax
  8004209e2c:	75 70                	jne    8004209e9e <list_func_die+0x45e>
					case DW_FORM_block1:
					case DW_FORM_block2:
					case DW_FORM_block4:
						offset = 0;
  8004209e2e:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004209e35:	00 
						atom = *(loc_ptr++);
  8004209e36:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004209e3a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004209e3e:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  8004209e42:	0f b6 00             	movzbl (%rax),%eax
  8004209e45:	88 45 af             	mov    %al,-0x51(%rbp)
						offset++;
  8004209e48:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
						if (atom == DW_OP_fbreg) {
  8004209e4d:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  8004209e51:	75 4a                	jne    8004209e9d <list_func_die+0x45d>
							uint8_t *p = loc_ptr;
  8004209e53:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004209e57:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
							ret_offset = _dwarf_decode_sleb128(&p);
  8004209e5e:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  8004209e65:	48 89 c7             	mov    %rax,%rdi
  8004209e68:	48 b8 45 c0 20 04 80 	movabs $0x800420c045,%rax
  8004209e6f:	00 00 00 
  8004209e72:	ff d0                	callq  *%rax
  8004209e74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
							offset += p - loc_ptr;
  8004209e78:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  8004209e7f:	48 89 c2             	mov    %rax,%rdx
  8004209e82:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004209e86:	48 29 c2             	sub    %rax,%rdx
  8004209e89:	48 89 d0             	mov    %rdx,%rax
  8004209e8c:	48 01 45 c0          	add    %rax,-0x40(%rbp)
							loc_ptr = p;
  8004209e90:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  8004209e97:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
						}
						break;
  8004209e9b:	eb 00                	jmp    8004209e9d <list_func_die+0x45d>
  8004209e9d:	90                   	nop
				}
			}

			info->size_fn_arg[info->rip_fn_narg] = ret_val;
  8004209e9e:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209ea5:	8b 48 28             	mov    0x28(%rax),%ecx
  8004209ea8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209eac:	89 c2                	mov    %eax,%edx
  8004209eae:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209eb5:	48 63 c9             	movslq %ecx,%rcx
  8004209eb8:	48 83 c1 08          	add    $0x8,%rcx
  8004209ebc:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
			info->offset_fn_arg[info->rip_fn_narg] = ret_offset;
  8004209ec0:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209ec7:	8b 50 28             	mov    0x28(%rax),%edx
  8004209eca:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209ed1:	48 63 d2             	movslq %edx,%rdx
  8004209ed4:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  8004209ed8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209edc:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
			info->rip_fn_narg++;
  8004209ee1:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209ee8:	8b 40 28             	mov    0x28(%rax),%eax
  8004209eeb:	8d 50 01             	lea    0x1(%rax),%edx
  8004209eee:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  8004209ef5:	89 50 28             	mov    %edx,0x28(%rax)
			sib = ret; 
  8004209ef8:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  8004209eff:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  8004209f06:	ba 70 30 00 00       	mov    $0x3070,%edx
  8004209f0b:	48 89 ce             	mov    %rcx,%rsi
  8004209f0e:	48 89 c7             	mov    %rax,%rdi
  8004209f11:	48 b8 56 b6 20 04 80 	movabs $0x800420b656,%rax
  8004209f18:	00 00 00 
  8004209f1b:	ff d0                	callq  *%rax

			while(dwarf_siblingof(dbg, &sib, &ret, cu) == DW_DLV_OK)	
  8004209f1d:	e9 40 02 00 00       	jmpq   800420a162 <list_func_die+0x722>
			{
				if(ret.die_tag != DW_TAG_formal_parameter)
  8004209f22:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  8004209f29:	48 83 f8 05          	cmp    $0x5,%rax
  8004209f2d:	74 05                	je     8004209f34 <list_func_die+0x4f4>
					break;
  8004209f2f:	e9 64 02 00 00       	jmpq   800420a198 <list_func_die+0x758>

				attr = _dwarf_attr_find(&ret, DW_AT_type);
  8004209f34:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  8004209f3b:	be 49 00 00 00       	mov    $0x49,%esi
  8004209f40:	48 89 c7             	mov    %rax,%rdi
  8004209f43:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004209f4a:	00 00 00 
  8004209f4d:	ff d0                	callq  *%rax
  8004209f4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
				if(attr != NULL)
  8004209f53:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004209f58:	0f 84 b1 00 00 00    	je     800420a00f <list_func_die+0x5cf>
				{	   
					offset = (uint64_t)cu->cu_offset + attr->u[0].u64;
  8004209f5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209f62:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004209f66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209f6a:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004209f6e:	48 01 d0             	add    %rdx,%rax
  8004209f71:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
					dwarf_offdie(dbg, offset, &sib, *cu);
  8004209f75:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004209f7c:	00 00 00 
  8004209f7f:	48 8b 08             	mov    (%rax),%rcx
  8004209f82:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  8004209f89:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004209f8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209f91:	48 8b 38             	mov    (%rax),%rdi
  8004209f94:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004209f98:	48 8b 78 08          	mov    0x8(%rax),%rdi
  8004209f9c:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004209fa1:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004209fa5:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004209faa:	48 8b 78 18          	mov    0x18(%rax),%rdi
  8004209fae:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004209fb3:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004209fb7:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004209fbc:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004209fc0:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004209fc5:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004209fc9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004209fce:	48 89 cf             	mov    %rcx,%rdi
  8004209fd1:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  8004209fd8:	00 00 00 
  8004209fdb:	ff d0                	callq  *%rax
					attr = _dwarf_attr_find(&sib, DW_AT_byte_size);
  8004209fdd:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  8004209fe4:	be 0b 00 00 00       	mov    $0xb,%esi
  8004209fe9:	48 89 c7             	mov    %rax,%rdi
  8004209fec:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004209ff3:	00 00 00 
  8004209ff6:	ff d0                	callq  *%rax
  8004209ff8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        
					if(attr != NULL)
  8004209ffc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420a001:	74 0c                	je     800420a00f <list_func_die+0x5cf>
					{
						ret_val = attr->u[0].u64;
  800420a003:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a007:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420a00b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
					}
				}
	
				ret_offset = 0;
  800420a00f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420a016:	00 
				attr = _dwarf_attr_find(&ret, DW_AT_location);
  800420a017:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420a01e:	be 02 00 00 00       	mov    $0x2,%esi
  800420a023:	48 89 c7             	mov    %rax,%rdi
  800420a026:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  800420a02d:	00 00 00 
  800420a030:	ff d0                	callq  *%rax
  800420a032:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				if (attr != NULL)
  800420a036:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420a03b:	0f 84 a2 00 00 00    	je     800420a0e3 <list_func_die+0x6a3>
				{
					Dwarf_Unsigned loc_len = attr->at_block.bl_len;
  800420a041:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a045:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420a049:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
					Dwarf_Small *loc_ptr = attr->at_block.bl_data;
  800420a04d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a051:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420a055:	48 89 45 98          	mov    %rax,-0x68(%rbp)
					Dwarf_Small atom;
					Dwarf_Unsigned op1, op2;

					switch(attr->at_form) {
  800420a059:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a05d:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420a061:	48 83 f8 03          	cmp    $0x3,%rax
  800420a065:	72 7c                	jb     800420a0e3 <list_func_die+0x6a3>
  800420a067:	48 83 f8 04          	cmp    $0x4,%rax
  800420a06b:	76 06                	jbe    800420a073 <list_func_die+0x633>
  800420a06d:	48 83 f8 0a          	cmp    $0xa,%rax
  800420a071:	75 70                	jne    800420a0e3 <list_func_die+0x6a3>
						case DW_FORM_block1:
						case DW_FORM_block2:
						case DW_FORM_block4:
							offset = 0;
  800420a073:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420a07a:	00 
							atom = *(loc_ptr++);
  800420a07b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420a07f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420a083:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420a087:	0f b6 00             	movzbl (%rax),%eax
  800420a08a:	88 45 97             	mov    %al,-0x69(%rbp)
							offset++;
  800420a08d:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
							if (atom == DW_OP_fbreg) {
  800420a092:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420a096:	75 4a                	jne    800420a0e2 <list_func_die+0x6a2>
								uint8_t *p = loc_ptr;
  800420a098:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420a09c:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
								ret_offset = _dwarf_decode_sleb128(&p);
  800420a0a3:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420a0aa:	48 89 c7             	mov    %rax,%rdi
  800420a0ad:	48 b8 45 c0 20 04 80 	movabs $0x800420c045,%rax
  800420a0b4:	00 00 00 
  800420a0b7:	ff d0                	callq  *%rax
  800420a0b9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
								offset += p - loc_ptr;
  800420a0bd:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420a0c4:	48 89 c2             	mov    %rax,%rdx
  800420a0c7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420a0cb:	48 29 c2             	sub    %rax,%rdx
  800420a0ce:	48 89 d0             	mov    %rdx,%rax
  800420a0d1:	48 01 45 c0          	add    %rax,-0x40(%rbp)
								loc_ptr = p;
  800420a0d5:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420a0dc:	48 89 45 98          	mov    %rax,-0x68(%rbp)
							}
							break;
  800420a0e0:	eb 00                	jmp    800420a0e2 <list_func_die+0x6a2>
  800420a0e2:	90                   	nop
					}
				}

				info->size_fn_arg[info->rip_fn_narg]=ret_val;// _get_arg_size(ret);
  800420a0e3:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420a0ea:	8b 48 28             	mov    0x28(%rax),%ecx
  800420a0ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420a0f1:	89 c2                	mov    %eax,%edx
  800420a0f3:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420a0fa:	48 63 c9             	movslq %ecx,%rcx
  800420a0fd:	48 83 c1 08          	add    $0x8,%rcx
  800420a101:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
				info->offset_fn_arg[info->rip_fn_narg]=ret_offset;
  800420a105:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420a10c:	8b 50 28             	mov    0x28(%rax),%edx
  800420a10f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420a116:	48 63 d2             	movslq %edx,%rdx
  800420a119:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420a11d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420a121:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
				info->rip_fn_narg++;
  800420a126:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420a12d:	8b 40 28             	mov    0x28(%rax),%eax
  800420a130:	8d 50 01             	lea    0x1(%rax),%edx
  800420a133:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420a13a:	89 50 28             	mov    %edx,0x28(%rax)
				sib = ret; 
  800420a13d:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420a144:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420a14b:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420a150:	48 89 ce             	mov    %rcx,%rsi
  800420a153:	48 89 c7             	mov    %rax,%rdi
  800420a156:	48 b8 56 b6 20 04 80 	movabs $0x800420b656,%rax
  800420a15d:	00 00 00 
  800420a160:	ff d0                	callq  *%rax
			info->size_fn_arg[info->rip_fn_narg] = ret_val;
			info->offset_fn_arg[info->rip_fn_narg] = ret_offset;
			info->rip_fn_narg++;
			sib = ret; 

			while(dwarf_siblingof(dbg, &sib, &ret, cu) == DW_DLV_OK)	
  800420a162:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a169:	00 00 00 
  800420a16c:	48 8b 00             	mov    (%rax),%rax
  800420a16f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420a173:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420a17a:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420a181:	48 89 c7             	mov    %rax,%rdi
  800420a184:	48 b8 7c d4 20 04 80 	movabs $0x800420d47c,%rax
  800420a18b:	00 00 00 
  800420a18e:	ff d0                	callq  *%rax
  800420a190:	85 c0                	test   %eax,%eax
  800420a192:	0f 84 8a fd ff ff    	je     8004209f22 <list_func_die+0x4e2>
				info->rip_fn_narg++;
				sib = ret; 
			}
		}
	last:	
		return 1;
  800420a198:	b8 01 00 00 00       	mov    $0x1,%eax
  800420a19d:	eb 05                	jmp    800420a1a4 <list_func_die+0x764>
	}

	return 0;
  800420a19f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420a1a4:	c9                   	leaveq 
  800420a1a5:	c3                   	retq   

000000800420a1a6 <debuginfo_rip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_rip(uintptr_t addr, struct Ripdebuginfo *info)
{
  800420a1a6:	55                   	push   %rbp
  800420a1a7:	48 89 e5             	mov    %rsp,%rbp
  800420a1aa:	53                   	push   %rbx
  800420a1ab:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420a1b2:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420a1b9:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
	static struct Env* lastenv = NULL;
	void* elf;    
	Dwarf_Section *sect;
	Dwarf_CU cu;
	Dwarf_Die die, cudie, die2;
	Dwarf_Regtable *rt = NULL;
  800420a1c0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420a1c7:	00 
	//Set up initial pc
	uint64_t pc  = (uintptr_t)addr;
  800420a1c8:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420a1cf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    
	// Initialize *info
	info->rip_file = "<unknown>";
  800420a1d3:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420a1da:	48 bb ef 31 21 04 80 	movabs $0x80042131ef,%rbx
  800420a1e1:	00 00 00 
  800420a1e4:	48 89 18             	mov    %rbx,(%rax)
	info->rip_line = 0;
  800420a1e7:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420a1ee:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
	info->rip_fn_name = "<unknown>";
  800420a1f5:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420a1fc:	48 bb ef 31 21 04 80 	movabs $0x80042131ef,%rbx
  800420a203:	00 00 00 
  800420a206:	48 89 58 10          	mov    %rbx,0x10(%rax)
	info->rip_fn_namelen = 9;
  800420a20a:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420a211:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
	info->rip_fn_addr = addr;
  800420a218:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420a21f:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420a226:	48 89 50 20          	mov    %rdx,0x20(%rax)
	info->rip_fn_narg = 0;
  800420a22a:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420a231:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
    
	// Find the relevant set of stabs
	if (addr >= ULIM) {
  800420a238:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420a23f:	00 00 00 
  800420a242:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420a249:	76 10                	jbe    800420a25b <debuginfo_rip+0xb5>
		elf = (void *)0x10000 + KERNBASE;
  800420a24b:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420a252:	00 00 00 
  800420a255:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420a259:	eb 74                	jmp    800420a2cf <debuginfo_rip+0x129>
	} else {
		if(curenv != lastenv) {
  800420a25b:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  800420a262:	00 00 00 
  800420a265:	48 8b 10             	mov    (%rax),%rdx
  800420a268:	48 b8 d8 d1 2b 04 80 	movabs $0x80042bd1d8,%rax
  800420a26f:	00 00 00 
  800420a272:	48 8b 00             	mov    (%rax),%rax
  800420a275:	48 39 c2             	cmp    %rax,%rdx
  800420a278:	74 3d                	je     800420a2b7 <debuginfo_rip+0x111>
			find_debug_sections((uintptr_t)curenv->elf);
  800420a27a:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  800420a281:	00 00 00 
  800420a284:	48 8b 00             	mov    (%rax),%rax
  800420a287:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420a28e:	48 89 c7             	mov    %rax,%rdi
  800420a291:	48 b8 0b 0c 21 04 80 	movabs $0x8004210c0b,%rax
  800420a298:	00 00 00 
  800420a29b:	ff d0                	callq  *%rax
			lastenv = curenv;
  800420a29d:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  800420a2a4:	00 00 00 
  800420a2a7:	48 8b 10             	mov    (%rax),%rdx
  800420a2aa:	48 b8 d8 d1 2b 04 80 	movabs $0x80042bd1d8,%rax
  800420a2b1:	00 00 00 
  800420a2b4:	48 89 10             	mov    %rdx,(%rax)
		}
		elf = curenv->elf;
  800420a2b7:	48 b8 98 c1 2b 04 80 	movabs $0x80042bc198,%rax
  800420a2be:	00 00 00 
  800420a2c1:	48 8b 00             	mov    (%rax),%rax
  800420a2c4:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420a2cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	}
	_dwarf_init(dbg, elf);
  800420a2cf:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a2d6:	00 00 00 
  800420a2d9:	48 8b 00             	mov    (%rax),%rax
  800420a2dc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a2e0:	48 89 d6             	mov    %rdx,%rsi
  800420a2e3:	48 89 c7             	mov    %rax,%rdi
  800420a2e6:	48 b8 f4 c2 20 04 80 	movabs $0x800420c2f4,%rax
  800420a2ed:	00 00 00 
  800420a2f0:	ff d0                	callq  *%rax

	sect = _dwarf_find_section(".debug_info");	
  800420a2f2:	48 bf f9 31 21 04 80 	movabs $0x80042131f9,%rdi
  800420a2f9:	00 00 00 
  800420a2fc:	48 b8 8b 0b 21 04 80 	movabs $0x8004210b8b,%rax
  800420a303:	00 00 00 
  800420a306:	ff d0                	callq  *%rax
  800420a308:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	dbg->dbg_info_offset_elf = (uint64_t)sect->ds_data; 
  800420a30c:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a313:	00 00 00 
  800420a316:	48 8b 00             	mov    (%rax),%rax
  800420a319:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420a31d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420a321:	48 89 50 08          	mov    %rdx,0x8(%rax)
	dbg->dbg_info_size = sect->ds_size;
  800420a325:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a32c:	00 00 00 
  800420a32f:	48 8b 00             	mov    (%rax),%rax
  800420a332:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420a336:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420a33a:	48 89 50 10          	mov    %rdx,0x10(%rax)

	assert(dbg->dbg_info_size);
  800420a33e:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a345:	00 00 00 
  800420a348:	48 8b 00             	mov    (%rax),%rax
  800420a34b:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420a34f:	48 85 c0             	test   %rax,%rax
  800420a352:	75 35                	jne    800420a389 <debuginfo_rip+0x1e3>
  800420a354:	48 b9 05 32 21 04 80 	movabs $0x8004213205,%rcx
  800420a35b:	00 00 00 
  800420a35e:	48 ba cc 31 21 04 80 	movabs $0x80042131cc,%rdx
  800420a365:	00 00 00 
  800420a368:	be 37 01 00 00       	mov    $0x137,%esi
  800420a36d:	48 bf e1 31 21 04 80 	movabs $0x80042131e1,%rdi
  800420a374:	00 00 00 
  800420a377:	b8 00 00 00 00       	mov    $0x0,%eax
  800420a37c:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420a383:	00 00 00 
  800420a386:	41 ff d0             	callq  *%r8
	while(_get_next_cu(dbg, &cu) == 0)
  800420a389:	e9 6f 01 00 00       	jmpq   800420a4fd <debuginfo_rip+0x357>
	{
		if(dwarf_siblingof(dbg, NULL, &cudie, &cu) == DW_DLE_NO_ENTRY)
  800420a38e:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a395:	00 00 00 
  800420a398:	48 8b 00             	mov    (%rax),%rax
  800420a39b:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420a39f:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420a3a6:	be 00 00 00 00       	mov    $0x0,%esi
  800420a3ab:	48 89 c7             	mov    %rax,%rdi
  800420a3ae:	48 b8 7c d4 20 04 80 	movabs $0x800420d47c,%rax
  800420a3b5:	00 00 00 
  800420a3b8:	ff d0                	callq  *%rax
  800420a3ba:	83 f8 04             	cmp    $0x4,%eax
  800420a3bd:	75 05                	jne    800420a3c4 <debuginfo_rip+0x21e>
			continue;
  800420a3bf:	e9 39 01 00 00       	jmpq   800420a4fd <debuginfo_rip+0x357>

		cudie.cu_header = &cu;
  800420a3c4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420a3c8:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
		cudie.cu_die = NULL;
  800420a3cf:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420a3d6:	00 00 00 00 

		if(dwarf_child(dbg, &cu, &cudie, &die) == DW_DLE_NO_ENTRY)
  800420a3da:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a3e1:	00 00 00 
  800420a3e4:	48 8b 00             	mov    (%rax),%rax
  800420a3e7:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420a3ee:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420a3f5:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420a3f9:	48 89 c7             	mov    %rax,%rdi
  800420a3fc:	48 b8 c0 d6 20 04 80 	movabs $0x800420d6c0,%rax
  800420a403:	00 00 00 
  800420a406:	ff d0                	callq  *%rax
  800420a408:	83 f8 04             	cmp    $0x4,%eax
  800420a40b:	75 05                	jne    800420a412 <debuginfo_rip+0x26c>
			continue;
  800420a40d:	e9 eb 00 00 00       	jmpq   800420a4fd <debuginfo_rip+0x357>

		die.cu_header = &cu;
  800420a412:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420a416:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
		die.cu_die = &cudie;
  800420a41d:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420a424:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
		while(1)
		{
			if(list_func_die(info, &die, addr))
  800420a42b:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420a432:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420a439:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420a440:	48 89 ce             	mov    %rcx,%rsi
  800420a443:	48 89 c7             	mov    %rax,%rdi
  800420a446:	48 b8 40 9a 20 04 80 	movabs $0x8004209a40,%rax
  800420a44d:	00 00 00 
  800420a450:	ff d0                	callq  *%rax
  800420a452:	85 c0                	test   %eax,%eax
  800420a454:	74 30                	je     800420a486 <debuginfo_rip+0x2e0>
				goto find_done;
  800420a456:	90                   	nop

	return -1;

find_done:

	if (dwarf_init_eh_section(dbg, NULL) == DW_DLV_ERROR)
  800420a457:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a45e:	00 00 00 
  800420a461:	48 8b 00             	mov    (%rax),%rax
  800420a464:	be 00 00 00 00       	mov    $0x0,%esi
  800420a469:	48 89 c7             	mov    %rax,%rdi
  800420a46c:	48 b8 98 fd 20 04 80 	movabs $0x800420fd98,%rax
  800420a473:	00 00 00 
  800420a476:	ff d0                	callq  *%rax
  800420a478:	83 f8 01             	cmp    $0x1,%eax
  800420a47b:	0f 85 bb 00 00 00    	jne    800420a53c <debuginfo_rip+0x396>
  800420a481:	e9 ac 00 00 00       	jmpq   800420a532 <debuginfo_rip+0x38c>
		die.cu_die = &cudie;
		while(1)
		{
			if(list_func_die(info, &die, addr))
				goto find_done;
			if(dwarf_siblingof(dbg, &die, &die2, &cu) < 0)
  800420a486:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a48d:	00 00 00 
  800420a490:	48 8b 00             	mov    (%rax),%rax
  800420a493:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420a497:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420a49e:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420a4a5:	48 89 c7             	mov    %rax,%rdi
  800420a4a8:	48 b8 7c d4 20 04 80 	movabs $0x800420d47c,%rax
  800420a4af:	00 00 00 
  800420a4b2:	ff d0                	callq  *%rax
  800420a4b4:	85 c0                	test   %eax,%eax
  800420a4b6:	79 02                	jns    800420a4ba <debuginfo_rip+0x314>
				break; 
  800420a4b8:	eb 43                	jmp    800420a4fd <debuginfo_rip+0x357>
			die = die2;
  800420a4ba:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420a4c1:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420a4c8:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420a4cd:	48 89 ce             	mov    %rcx,%rsi
  800420a4d0:	48 89 c7             	mov    %rax,%rdi
  800420a4d3:	48 b8 56 b6 20 04 80 	movabs $0x800420b656,%rax
  800420a4da:	00 00 00 
  800420a4dd:	ff d0                	callq  *%rax
			die.cu_header = &cu;
  800420a4df:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420a4e3:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
			die.cu_die = &cudie;
  800420a4ea:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420a4f1:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
		}
  800420a4f8:	e9 2e ff ff ff       	jmpq   800420a42b <debuginfo_rip+0x285>
	sect = _dwarf_find_section(".debug_info");	
	dbg->dbg_info_offset_elf = (uint64_t)sect->ds_data; 
	dbg->dbg_info_size = sect->ds_size;

	assert(dbg->dbg_info_size);
	while(_get_next_cu(dbg, &cu) == 0)
  800420a4fd:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a504:	00 00 00 
  800420a507:	48 8b 00             	mov    (%rax),%rax
  800420a50a:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420a50e:	48 89 d6             	mov    %rdx,%rsi
  800420a511:	48 89 c7             	mov    %rax,%rdi
  800420a514:	48 b8 d6 c3 20 04 80 	movabs $0x800420c3d6,%rax
  800420a51b:	00 00 00 
  800420a51e:	ff d0                	callq  *%rax
  800420a520:	85 c0                	test   %eax,%eax
  800420a522:	0f 84 66 fe ff ff    	je     800420a38e <debuginfo_rip+0x1e8>
			die.cu_header = &cu;
			die.cu_die = &cudie;
		}
	}

	return -1;
  800420a528:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420a52d:	e9 a0 00 00 00       	jmpq   800420a5d2 <debuginfo_rip+0x42c>

find_done:

	if (dwarf_init_eh_section(dbg, NULL) == DW_DLV_ERROR)
		return -1;
  800420a532:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420a537:	e9 96 00 00 00       	jmpq   800420a5d2 <debuginfo_rip+0x42c>

	if (dwarf_get_fde_at_pc(dbg, addr, fde, cie, NULL) == DW_DLV_OK) {
  800420a53c:	48 b8 10 66 22 04 80 	movabs $0x8004226610,%rax
  800420a543:	00 00 00 
  800420a546:	48 8b 08             	mov    (%rax),%rcx
  800420a549:	48 b8 08 66 22 04 80 	movabs $0x8004226608,%rax
  800420a550:	00 00 00 
  800420a553:	48 8b 10             	mov    (%rax),%rdx
  800420a556:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a55d:	00 00 00 
  800420a560:	48 8b 00             	mov    (%rax),%rax
  800420a563:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420a56a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420a570:	48 89 c7             	mov    %rax,%rdi
  800420a573:	48 b8 01 d9 20 04 80 	movabs $0x800420d901,%rax
  800420a57a:	00 00 00 
  800420a57d:	ff d0                	callq  *%rax
  800420a57f:	85 c0                	test   %eax,%eax
  800420a581:	75 4a                	jne    800420a5cd <debuginfo_rip+0x427>
		dwarf_get_fde_info_for_all_regs(dbg, fde, addr,
  800420a583:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420a58a:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420a591:	48 b8 08 66 22 04 80 	movabs $0x8004226608,%rax
  800420a598:	00 00 00 
  800420a59b:	48 8b 30             	mov    (%rax),%rsi
  800420a59e:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420a5a5:	00 00 00 
  800420a5a8:	48 8b 00             	mov    (%rax),%rax
  800420a5ab:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420a5b2:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420a5b8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420a5be:	48 89 c7             	mov    %rax,%rdi
  800420a5c1:	48 b8 0d ec 20 04 80 	movabs $0x800420ec0d,%rax
  800420a5c8:	00 00 00 
  800420a5cb:	ff d0                	callq  *%rax
					break;
			}
		}
#endif
	}
	return 0;
  800420a5cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420a5d2:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420a5d9:	5b                   	pop    %rbx
  800420a5da:	5d                   	pop    %rbp
  800420a5db:	c3                   	retq   

000000800420a5dc <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
  800420a5dc:	55                   	push   %rbp
  800420a5dd:	48 89 e5             	mov    %rsp,%rbp
  800420a5e0:	53                   	push   %rbx
  800420a5e1:	48 83 ec 38          	sub    $0x38,%rsp
  800420a5e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420a5e9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420a5ed:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420a5f1:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420a5f4:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420a5f8:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
  800420a5fc:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420a5ff:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420a603:	77 3b                	ja     800420a640 <printnum+0x64>
		printnum(putch, putdat, num / base, base, width - 1, padc);
  800420a605:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420a608:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420a60c:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420a60f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420a613:	ba 00 00 00 00       	mov    $0x0,%edx
  800420a618:	48 f7 f3             	div    %rbx
  800420a61b:	48 89 c2             	mov    %rax,%rdx
  800420a61e:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420a621:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420a624:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420a628:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a62c:	41 89 f9             	mov    %edi,%r9d
  800420a62f:	48 89 c7             	mov    %rax,%rdi
  800420a632:	48 b8 dc a5 20 04 80 	movabs $0x800420a5dc,%rax
  800420a639:	00 00 00 
  800420a63c:	ff d0                	callq  *%rax
  800420a63e:	eb 1e                	jmp    800420a65e <printnum+0x82>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
  800420a640:	eb 12                	jmp    800420a654 <printnum+0x78>
			putch(padc, putdat);
  800420a642:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420a646:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420a649:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a64d:	48 89 ce             	mov    %rcx,%rsi
  800420a650:	89 d7                	mov    %edx,%edi
  800420a652:	ff d0                	callq  *%rax
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
  800420a654:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420a658:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420a65c:	7f e4                	jg     800420a642 <printnum+0x66>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
  800420a65e:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420a661:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420a665:	ba 00 00 00 00       	mov    $0x0,%edx
  800420a66a:	48 f7 f1             	div    %rcx
  800420a66d:	48 89 d0             	mov    %rdx,%rax
  800420a670:	48 ba 50 33 21 04 80 	movabs $0x8004213350,%rdx
  800420a677:	00 00 00 
  800420a67a:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420a67e:	0f be d0             	movsbl %al,%edx
  800420a681:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420a685:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a689:	48 89 ce             	mov    %rcx,%rsi
  800420a68c:	89 d7                	mov    %edx,%edi
  800420a68e:	ff d0                	callq  *%rax
}
  800420a690:	48 83 c4 38          	add    $0x38,%rsp
  800420a694:	5b                   	pop    %rbx
  800420a695:	5d                   	pop    %rbp
  800420a696:	c3                   	retq   

000000800420a697 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
  800420a697:	55                   	push   %rbp
  800420a698:	48 89 e5             	mov    %rsp,%rbp
  800420a69b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420a69f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420a6a3:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	unsigned long long x;    
	if (lflag >= 2)
  800420a6a6:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420a6aa:	7e 52                	jle    800420a6fe <getuint+0x67>
		x= va_arg(*ap, unsigned long long);
  800420a6ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a6b0:	8b 00                	mov    (%rax),%eax
  800420a6b2:	83 f8 30             	cmp    $0x30,%eax
  800420a6b5:	73 24                	jae    800420a6db <getuint+0x44>
  800420a6b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a6bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420a6bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a6c3:	8b 00                	mov    (%rax),%eax
  800420a6c5:	89 c0                	mov    %eax,%eax
  800420a6c7:	48 01 d0             	add    %rdx,%rax
  800420a6ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a6ce:	8b 12                	mov    (%rdx),%edx
  800420a6d0:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420a6d3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a6d7:	89 0a                	mov    %ecx,(%rdx)
  800420a6d9:	eb 17                	jmp    800420a6f2 <getuint+0x5b>
  800420a6db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a6df:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420a6e3:	48 89 d0             	mov    %rdx,%rax
  800420a6e6:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420a6ea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a6ee:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420a6f2:	48 8b 00             	mov    (%rax),%rax
  800420a6f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420a6f9:	e9 a3 00 00 00       	jmpq   800420a7a1 <getuint+0x10a>
	else if (lflag)
  800420a6fe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420a702:	74 4f                	je     800420a753 <getuint+0xbc>
		x= va_arg(*ap, unsigned long);
  800420a704:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a708:	8b 00                	mov    (%rax),%eax
  800420a70a:	83 f8 30             	cmp    $0x30,%eax
  800420a70d:	73 24                	jae    800420a733 <getuint+0x9c>
  800420a70f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a713:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420a717:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a71b:	8b 00                	mov    (%rax),%eax
  800420a71d:	89 c0                	mov    %eax,%eax
  800420a71f:	48 01 d0             	add    %rdx,%rax
  800420a722:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a726:	8b 12                	mov    (%rdx),%edx
  800420a728:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420a72b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a72f:	89 0a                	mov    %ecx,(%rdx)
  800420a731:	eb 17                	jmp    800420a74a <getuint+0xb3>
  800420a733:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a737:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420a73b:	48 89 d0             	mov    %rdx,%rax
  800420a73e:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420a742:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a746:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420a74a:	48 8b 00             	mov    (%rax),%rax
  800420a74d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420a751:	eb 4e                	jmp    800420a7a1 <getuint+0x10a>
	else
		x= va_arg(*ap, unsigned int);
  800420a753:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a757:	8b 00                	mov    (%rax),%eax
  800420a759:	83 f8 30             	cmp    $0x30,%eax
  800420a75c:	73 24                	jae    800420a782 <getuint+0xeb>
  800420a75e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a762:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420a766:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a76a:	8b 00                	mov    (%rax),%eax
  800420a76c:	89 c0                	mov    %eax,%eax
  800420a76e:	48 01 d0             	add    %rdx,%rax
  800420a771:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a775:	8b 12                	mov    (%rdx),%edx
  800420a777:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420a77a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a77e:	89 0a                	mov    %ecx,(%rdx)
  800420a780:	eb 17                	jmp    800420a799 <getuint+0x102>
  800420a782:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a786:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420a78a:	48 89 d0             	mov    %rdx,%rax
  800420a78d:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420a791:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a795:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420a799:	8b 00                	mov    (%rax),%eax
  800420a79b:	89 c0                	mov    %eax,%eax
  800420a79d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return x;
  800420a7a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420a7a5:	c9                   	leaveq 
  800420a7a6:	c3                   	retq   

000000800420a7a7 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
  800420a7a7:	55                   	push   %rbp
  800420a7a8:	48 89 e5             	mov    %rsp,%rbp
  800420a7ab:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420a7af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420a7b3:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	long long x;
	if (lflag >= 2)
  800420a7b6:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420a7ba:	7e 52                	jle    800420a80e <getint+0x67>
		x=va_arg(*ap, long long);
  800420a7bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a7c0:	8b 00                	mov    (%rax),%eax
  800420a7c2:	83 f8 30             	cmp    $0x30,%eax
  800420a7c5:	73 24                	jae    800420a7eb <getint+0x44>
  800420a7c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a7cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420a7cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a7d3:	8b 00                	mov    (%rax),%eax
  800420a7d5:	89 c0                	mov    %eax,%eax
  800420a7d7:	48 01 d0             	add    %rdx,%rax
  800420a7da:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a7de:	8b 12                	mov    (%rdx),%edx
  800420a7e0:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420a7e3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a7e7:	89 0a                	mov    %ecx,(%rdx)
  800420a7e9:	eb 17                	jmp    800420a802 <getint+0x5b>
  800420a7eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a7ef:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420a7f3:	48 89 d0             	mov    %rdx,%rax
  800420a7f6:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420a7fa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a7fe:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420a802:	48 8b 00             	mov    (%rax),%rax
  800420a805:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420a809:	e9 a3 00 00 00       	jmpq   800420a8b1 <getint+0x10a>
	else if (lflag)
  800420a80e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420a812:	74 4f                	je     800420a863 <getint+0xbc>
		x=va_arg(*ap, long);
  800420a814:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a818:	8b 00                	mov    (%rax),%eax
  800420a81a:	83 f8 30             	cmp    $0x30,%eax
  800420a81d:	73 24                	jae    800420a843 <getint+0x9c>
  800420a81f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a823:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420a827:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a82b:	8b 00                	mov    (%rax),%eax
  800420a82d:	89 c0                	mov    %eax,%eax
  800420a82f:	48 01 d0             	add    %rdx,%rax
  800420a832:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a836:	8b 12                	mov    (%rdx),%edx
  800420a838:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420a83b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a83f:	89 0a                	mov    %ecx,(%rdx)
  800420a841:	eb 17                	jmp    800420a85a <getint+0xb3>
  800420a843:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a847:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420a84b:	48 89 d0             	mov    %rdx,%rax
  800420a84e:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420a852:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a856:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420a85a:	48 8b 00             	mov    (%rax),%rax
  800420a85d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420a861:	eb 4e                	jmp    800420a8b1 <getint+0x10a>
	else
		x=va_arg(*ap, int);
  800420a863:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a867:	8b 00                	mov    (%rax),%eax
  800420a869:	83 f8 30             	cmp    $0x30,%eax
  800420a86c:	73 24                	jae    800420a892 <getint+0xeb>
  800420a86e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a872:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420a876:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a87a:	8b 00                	mov    (%rax),%eax
  800420a87c:	89 c0                	mov    %eax,%eax
  800420a87e:	48 01 d0             	add    %rdx,%rax
  800420a881:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a885:	8b 12                	mov    (%rdx),%edx
  800420a887:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420a88a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a88e:	89 0a                	mov    %ecx,(%rdx)
  800420a890:	eb 17                	jmp    800420a8a9 <getint+0x102>
  800420a892:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420a896:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420a89a:	48 89 d0             	mov    %rdx,%rax
  800420a89d:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420a8a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420a8a5:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420a8a9:	8b 00                	mov    (%rax),%eax
  800420a8ab:	48 98                	cltq   
  800420a8ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return x;
  800420a8b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420a8b5:	c9                   	leaveq 
  800420a8b6:	c3                   	retq   

000000800420a8b7 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
  800420a8b7:	55                   	push   %rbp
  800420a8b8:	48 89 e5             	mov    %rsp,%rbp
  800420a8bb:	41 54                	push   %r12
  800420a8bd:	53                   	push   %rbx
  800420a8be:	48 83 ec 60          	sub    $0x60,%rsp
  800420a8c2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420a8c6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420a8ca:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420a8ce:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
	register int ch, err;
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;
	va_list aq;
	va_copy(aq,ap);
  800420a8d2:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420a8d6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420a8da:	48 8b 0a             	mov    (%rdx),%rcx
  800420a8dd:	48 89 08             	mov    %rcx,(%rax)
  800420a8e0:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420a8e4:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420a8e8:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420a8ec:	48 89 50 10          	mov    %rdx,0x10(%rax)
	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
  800420a8f0:	eb 17                	jmp    800420a909 <vprintfmt+0x52>
			if (ch == '\0')
  800420a8f2:	85 db                	test   %ebx,%ebx
  800420a8f4:	0f 84 df 04 00 00    	je     800420add9 <vprintfmt+0x522>
				return;
			putch(ch, putdat);
  800420a8fa:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420a8fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420a902:	48 89 d6             	mov    %rdx,%rsi
  800420a905:	89 df                	mov    %ebx,%edi
  800420a907:	ff d0                	callq  *%rax
	int base, lflag, width, precision, altflag;
	char padc;
	va_list aq;
	va_copy(aq,ap);
	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
  800420a909:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420a90d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420a911:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420a915:	0f b6 00             	movzbl (%rax),%eax
  800420a918:	0f b6 d8             	movzbl %al,%ebx
  800420a91b:	83 fb 25             	cmp    $0x25,%ebx
  800420a91e:	75 d2                	jne    800420a8f2 <vprintfmt+0x3b>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
  800420a920:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
		width = -1;
  800420a924:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
		precision = -1;
  800420a92b:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
		lflag = 0;
  800420a932:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
		altflag = 0;
  800420a939:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
  800420a940:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420a944:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420a948:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420a94c:	0f b6 00             	movzbl (%rax),%eax
  800420a94f:	0f b6 d8             	movzbl %al,%ebx
  800420a952:	8d 43 dd             	lea    -0x23(%rbx),%eax
  800420a955:	83 f8 55             	cmp    $0x55,%eax
  800420a958:	0f 87 47 04 00 00    	ja     800420ada5 <vprintfmt+0x4ee>
  800420a95e:	89 c0                	mov    %eax,%eax
  800420a960:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420a967:	00 
  800420a968:	48 b8 78 33 21 04 80 	movabs $0x8004213378,%rax
  800420a96f:	00 00 00 
  800420a972:	48 01 d0             	add    %rdx,%rax
  800420a975:	48 8b 00             	mov    (%rax),%rax
  800420a978:	ff e0                	jmpq   *%rax

			// flag to pad on the right
		case '-':
			padc = '-';
  800420a97a:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
			goto reswitch;
  800420a97e:	eb c0                	jmp    800420a940 <vprintfmt+0x89>

			// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
  800420a980:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
			goto reswitch;
  800420a984:	eb ba                	jmp    800420a940 <vprintfmt+0x89>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
  800420a986:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
				precision = precision * 10 + ch - '0';
  800420a98d:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800420a990:	89 d0                	mov    %edx,%eax
  800420a992:	c1 e0 02             	shl    $0x2,%eax
  800420a995:	01 d0                	add    %edx,%eax
  800420a997:	01 c0                	add    %eax,%eax
  800420a999:	01 d8                	add    %ebx,%eax
  800420a99b:	83 e8 30             	sub    $0x30,%eax
  800420a99e:	89 45 d8             	mov    %eax,-0x28(%rbp)
				ch = *fmt;
  800420a9a1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420a9a5:	0f b6 00             	movzbl (%rax),%eax
  800420a9a8:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
  800420a9ab:	83 fb 2f             	cmp    $0x2f,%ebx
  800420a9ae:	7e 0c                	jle    800420a9bc <vprintfmt+0x105>
  800420a9b0:	83 fb 39             	cmp    $0x39,%ebx
  800420a9b3:	7f 07                	jg     800420a9bc <vprintfmt+0x105>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
  800420a9b5:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
  800420a9ba:	eb d1                	jmp    800420a98d <vprintfmt+0xd6>
			goto process_precision;
  800420a9bc:	eb 58                	jmp    800420aa16 <vprintfmt+0x15f>

		case '*':
			precision = va_arg(aq, int);
  800420a9be:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420a9c1:	83 f8 30             	cmp    $0x30,%eax
  800420a9c4:	73 17                	jae    800420a9dd <vprintfmt+0x126>
  800420a9c6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420a9ca:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420a9cd:	89 c0                	mov    %eax,%eax
  800420a9cf:	48 01 d0             	add    %rdx,%rax
  800420a9d2:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420a9d5:	83 c2 08             	add    $0x8,%edx
  800420a9d8:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420a9db:	eb 0f                	jmp    800420a9ec <vprintfmt+0x135>
  800420a9dd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420a9e1:	48 89 d0             	mov    %rdx,%rax
  800420a9e4:	48 83 c2 08          	add    $0x8,%rdx
  800420a9e8:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420a9ec:	8b 00                	mov    (%rax),%eax
  800420a9ee:	89 45 d8             	mov    %eax,-0x28(%rbp)
			goto process_precision;
  800420a9f1:	eb 23                	jmp    800420aa16 <vprintfmt+0x15f>

		case '.':
			if (width < 0)
  800420a9f3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420a9f7:	79 0c                	jns    800420aa05 <vprintfmt+0x14e>
				width = 0;
  800420a9f9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
			goto reswitch;
  800420aa00:	e9 3b ff ff ff       	jmpq   800420a940 <vprintfmt+0x89>
  800420aa05:	e9 36 ff ff ff       	jmpq   800420a940 <vprintfmt+0x89>

		case '#':
			altflag = 1;
  800420aa0a:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
			goto reswitch;
  800420aa11:	e9 2a ff ff ff       	jmpq   800420a940 <vprintfmt+0x89>

		process_precision:
			if (width < 0)
  800420aa16:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420aa1a:	79 12                	jns    800420aa2e <vprintfmt+0x177>
				width = precision, precision = -1;
  800420aa1c:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420aa1f:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420aa22:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
			goto reswitch;
  800420aa29:	e9 12 ff ff ff       	jmpq   800420a940 <vprintfmt+0x89>
  800420aa2e:	e9 0d ff ff ff       	jmpq   800420a940 <vprintfmt+0x89>

			// long flag (doubled for long long)
		case 'l':
			lflag++;
  800420aa33:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
			goto reswitch;
  800420aa37:	e9 04 ff ff ff       	jmpq   800420a940 <vprintfmt+0x89>

			// character
		case 'c':
			putch(va_arg(aq, int), putdat);
  800420aa3c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420aa3f:	83 f8 30             	cmp    $0x30,%eax
  800420aa42:	73 17                	jae    800420aa5b <vprintfmt+0x1a4>
  800420aa44:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420aa48:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420aa4b:	89 c0                	mov    %eax,%eax
  800420aa4d:	48 01 d0             	add    %rdx,%rax
  800420aa50:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420aa53:	83 c2 08             	add    $0x8,%edx
  800420aa56:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420aa59:	eb 0f                	jmp    800420aa6a <vprintfmt+0x1b3>
  800420aa5b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420aa5f:	48 89 d0             	mov    %rdx,%rax
  800420aa62:	48 83 c2 08          	add    $0x8,%rdx
  800420aa66:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420aa6a:	8b 10                	mov    (%rax),%edx
  800420aa6c:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420aa70:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420aa74:	48 89 ce             	mov    %rcx,%rsi
  800420aa77:	89 d7                	mov    %edx,%edi
  800420aa79:	ff d0                	callq  *%rax
			break;
  800420aa7b:	e9 53 03 00 00       	jmpq   800420add3 <vprintfmt+0x51c>

			// error message
		case 'e':
			err = va_arg(aq, int);
  800420aa80:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420aa83:	83 f8 30             	cmp    $0x30,%eax
  800420aa86:	73 17                	jae    800420aa9f <vprintfmt+0x1e8>
  800420aa88:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420aa8c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420aa8f:	89 c0                	mov    %eax,%eax
  800420aa91:	48 01 d0             	add    %rdx,%rax
  800420aa94:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420aa97:	83 c2 08             	add    $0x8,%edx
  800420aa9a:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420aa9d:	eb 0f                	jmp    800420aaae <vprintfmt+0x1f7>
  800420aa9f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420aaa3:	48 89 d0             	mov    %rdx,%rax
  800420aaa6:	48 83 c2 08          	add    $0x8,%rdx
  800420aaaa:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420aaae:	8b 18                	mov    (%rax),%ebx
			if (err < 0)
  800420aab0:	85 db                	test   %ebx,%ebx
  800420aab2:	79 02                	jns    800420aab6 <vprintfmt+0x1ff>
				err = -err;
  800420aab4:	f7 db                	neg    %ebx
			if (err >= MAXERROR || (p = error_string[err]) == NULL)
  800420aab6:	83 fb 15             	cmp    $0x15,%ebx
  800420aab9:	7f 16                	jg     800420aad1 <vprintfmt+0x21a>
  800420aabb:	48 b8 a0 32 21 04 80 	movabs $0x80042132a0,%rax
  800420aac2:	00 00 00 
  800420aac5:	48 63 d3             	movslq %ebx,%rdx
  800420aac8:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800420aacc:	4d 85 e4             	test   %r12,%r12
  800420aacf:	75 2e                	jne    800420aaff <vprintfmt+0x248>
				printfmt(putch, putdat, "error %d", err);
  800420aad1:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420aad5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420aad9:	89 d9                	mov    %ebx,%ecx
  800420aadb:	48 ba 61 33 21 04 80 	movabs $0x8004213361,%rdx
  800420aae2:	00 00 00 
  800420aae5:	48 89 c7             	mov    %rax,%rdi
  800420aae8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420aaed:	49 b8 e2 ad 20 04 80 	movabs $0x800420ade2,%r8
  800420aaf4:	00 00 00 
  800420aaf7:	41 ff d0             	callq  *%r8
			else
				printfmt(putch, putdat, "%s", p);
			break;
  800420aafa:	e9 d4 02 00 00       	jmpq   800420add3 <vprintfmt+0x51c>
			if (err < 0)
				err = -err;
			if (err >= MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
  800420aaff:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420ab03:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ab07:	4c 89 e1             	mov    %r12,%rcx
  800420ab0a:	48 ba 6a 33 21 04 80 	movabs $0x800421336a,%rdx
  800420ab11:	00 00 00 
  800420ab14:	48 89 c7             	mov    %rax,%rdi
  800420ab17:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ab1c:	49 b8 e2 ad 20 04 80 	movabs $0x800420ade2,%r8
  800420ab23:	00 00 00 
  800420ab26:	41 ff d0             	callq  *%r8
			break;
  800420ab29:	e9 a5 02 00 00       	jmpq   800420add3 <vprintfmt+0x51c>

			// string
		case 's':
			if ((p = va_arg(aq, char *)) == NULL)
  800420ab2e:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ab31:	83 f8 30             	cmp    $0x30,%eax
  800420ab34:	73 17                	jae    800420ab4d <vprintfmt+0x296>
  800420ab36:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420ab3a:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ab3d:	89 c0                	mov    %eax,%eax
  800420ab3f:	48 01 d0             	add    %rdx,%rax
  800420ab42:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420ab45:	83 c2 08             	add    $0x8,%edx
  800420ab48:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420ab4b:	eb 0f                	jmp    800420ab5c <vprintfmt+0x2a5>
  800420ab4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ab51:	48 89 d0             	mov    %rdx,%rax
  800420ab54:	48 83 c2 08          	add    $0x8,%rdx
  800420ab58:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420ab5c:	4c 8b 20             	mov    (%rax),%r12
  800420ab5f:	4d 85 e4             	test   %r12,%r12
  800420ab62:	75 0a                	jne    800420ab6e <vprintfmt+0x2b7>
				p = "(null)";
  800420ab64:	49 bc 6d 33 21 04 80 	movabs $0x800421336d,%r12
  800420ab6b:	00 00 00 
			if (width > 0 && padc != '-')
  800420ab6e:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420ab72:	7e 3f                	jle    800420abb3 <vprintfmt+0x2fc>
  800420ab74:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  800420ab78:	74 39                	je     800420abb3 <vprintfmt+0x2fc>
				for (width -= strnlen(p, precision); width > 0; width--)
  800420ab7a:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420ab7d:	48 98                	cltq   
  800420ab7f:	48 89 c6             	mov    %rax,%rsi
  800420ab82:	4c 89 e7             	mov    %r12,%rdi
  800420ab85:	48 b8 dd b1 20 04 80 	movabs $0x800420b1dd,%rax
  800420ab8c:	00 00 00 
  800420ab8f:	ff d0                	callq  *%rax
  800420ab91:	29 45 dc             	sub    %eax,-0x24(%rbp)
  800420ab94:	eb 17                	jmp    800420abad <vprintfmt+0x2f6>
					putch(padc, putdat);
  800420ab96:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800420ab9a:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420ab9e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420aba2:	48 89 ce             	mov    %rcx,%rsi
  800420aba5:	89 d7                	mov    %edx,%edi
  800420aba7:	ff d0                	callq  *%rax
			// string
		case 's':
			if ((p = va_arg(aq, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
  800420aba9:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420abad:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420abb1:	7f e3                	jg     800420ab96 <vprintfmt+0x2df>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
  800420abb3:	eb 37                	jmp    800420abec <vprintfmt+0x335>
				if (altflag && (ch < ' ' || ch > '~'))
  800420abb5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  800420abb9:	74 1e                	je     800420abd9 <vprintfmt+0x322>
  800420abbb:	83 fb 1f             	cmp    $0x1f,%ebx
  800420abbe:	7e 05                	jle    800420abc5 <vprintfmt+0x30e>
  800420abc0:	83 fb 7e             	cmp    $0x7e,%ebx
  800420abc3:	7e 14                	jle    800420abd9 <vprintfmt+0x322>
					putch('?', putdat);
  800420abc5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420abc9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420abcd:	48 89 d6             	mov    %rdx,%rsi
  800420abd0:	bf 3f 00 00 00       	mov    $0x3f,%edi
  800420abd5:	ff d0                	callq  *%rax
  800420abd7:	eb 0f                	jmp    800420abe8 <vprintfmt+0x331>
				else
					putch(ch, putdat);
  800420abd9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420abdd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420abe1:	48 89 d6             	mov    %rdx,%rsi
  800420abe4:	89 df                	mov    %ebx,%edi
  800420abe6:	ff d0                	callq  *%rax
			if ((p = va_arg(aq, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
  800420abe8:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420abec:	4c 89 e0             	mov    %r12,%rax
  800420abef:	4c 8d 60 01          	lea    0x1(%rax),%r12
  800420abf3:	0f b6 00             	movzbl (%rax),%eax
  800420abf6:	0f be d8             	movsbl %al,%ebx
  800420abf9:	85 db                	test   %ebx,%ebx
  800420abfb:	74 10                	je     800420ac0d <vprintfmt+0x356>
  800420abfd:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420ac01:	78 b2                	js     800420abb5 <vprintfmt+0x2fe>
  800420ac03:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  800420ac07:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420ac0b:	79 a8                	jns    800420abb5 <vprintfmt+0x2fe>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
  800420ac0d:	eb 16                	jmp    800420ac25 <vprintfmt+0x36e>
				putch(' ', putdat);
  800420ac0f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420ac13:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ac17:	48 89 d6             	mov    %rdx,%rsi
  800420ac1a:	bf 20 00 00 00       	mov    $0x20,%edi
  800420ac1f:	ff d0                	callq  *%rax
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
  800420ac21:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420ac25:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420ac29:	7f e4                	jg     800420ac0f <vprintfmt+0x358>
				putch(' ', putdat);
			break;
  800420ac2b:	e9 a3 01 00 00       	jmpq   800420add3 <vprintfmt+0x51c>

			// (signed) decimal
		case 'd':
			num = getint(&aq, 3);
  800420ac30:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420ac34:	be 03 00 00 00       	mov    $0x3,%esi
  800420ac39:	48 89 c7             	mov    %rax,%rdi
  800420ac3c:	48 b8 a7 a7 20 04 80 	movabs $0x800420a7a7,%rax
  800420ac43:	00 00 00 
  800420ac46:	ff d0                	callq  *%rax
  800420ac48:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			if ((long long) num < 0) {
  800420ac4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ac50:	48 85 c0             	test   %rax,%rax
  800420ac53:	79 1d                	jns    800420ac72 <vprintfmt+0x3bb>
				putch('-', putdat);
  800420ac55:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420ac59:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ac5d:	48 89 d6             	mov    %rdx,%rsi
  800420ac60:	bf 2d 00 00 00       	mov    $0x2d,%edi
  800420ac65:	ff d0                	callq  *%rax
				num = -(long long) num;
  800420ac67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ac6b:	48 f7 d8             	neg    %rax
  800420ac6e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			}
			base = 10;
  800420ac72:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
			goto number;
  800420ac79:	e9 e8 00 00 00       	jmpq   800420ad66 <vprintfmt+0x4af>

			// unsigned decimal
		case 'u':
			num = getuint(&aq, 3);
  800420ac7e:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420ac82:	be 03 00 00 00       	mov    $0x3,%esi
  800420ac87:	48 89 c7             	mov    %rax,%rdi
  800420ac8a:	48 b8 97 a6 20 04 80 	movabs $0x800420a697,%rax
  800420ac91:	00 00 00 
  800420ac94:	ff d0                	callq  *%rax
  800420ac96:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			base = 10;
  800420ac9a:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
			goto number;
  800420aca1:	e9 c0 00 00 00       	jmpq   800420ad66 <vprintfmt+0x4af>

			// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
  800420aca6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420acaa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420acae:	48 89 d6             	mov    %rdx,%rsi
  800420acb1:	bf 58 00 00 00       	mov    $0x58,%edi
  800420acb6:	ff d0                	callq  *%rax
			putch('X', putdat);
  800420acb8:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420acbc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420acc0:	48 89 d6             	mov    %rdx,%rsi
  800420acc3:	bf 58 00 00 00       	mov    $0x58,%edi
  800420acc8:	ff d0                	callq  *%rax
			putch('X', putdat);
  800420acca:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420acce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420acd2:	48 89 d6             	mov    %rdx,%rsi
  800420acd5:	bf 58 00 00 00       	mov    $0x58,%edi
  800420acda:	ff d0                	callq  *%rax
			break;
  800420acdc:	e9 f2 00 00 00       	jmpq   800420add3 <vprintfmt+0x51c>

			// pointer
		case 'p':
			putch('0', putdat);
  800420ace1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420ace5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ace9:	48 89 d6             	mov    %rdx,%rsi
  800420acec:	bf 30 00 00 00       	mov    $0x30,%edi
  800420acf1:	ff d0                	callq  *%rax
			putch('x', putdat);
  800420acf3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420acf7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420acfb:	48 89 d6             	mov    %rdx,%rsi
  800420acfe:	bf 78 00 00 00       	mov    $0x78,%edi
  800420ad03:	ff d0                	callq  *%rax
			num = (unsigned long long)
				(uintptr_t) va_arg(aq, void *);
  800420ad05:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ad08:	83 f8 30             	cmp    $0x30,%eax
  800420ad0b:	73 17                	jae    800420ad24 <vprintfmt+0x46d>
  800420ad0d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420ad11:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ad14:	89 c0                	mov    %eax,%eax
  800420ad16:	48 01 d0             	add    %rdx,%rax
  800420ad19:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420ad1c:	83 c2 08             	add    $0x8,%edx
  800420ad1f:	89 55 b8             	mov    %edx,-0x48(%rbp)

			// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
  800420ad22:	eb 0f                	jmp    800420ad33 <vprintfmt+0x47c>
				(uintptr_t) va_arg(aq, void *);
  800420ad24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ad28:	48 89 d0             	mov    %rdx,%rax
  800420ad2b:	48 83 c2 08          	add    $0x8,%rdx
  800420ad2f:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420ad33:	48 8b 00             	mov    (%rax),%rax

			// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
  800420ad36:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				(uintptr_t) va_arg(aq, void *);
			base = 16;
  800420ad3a:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
			goto number;
  800420ad41:	eb 23                	jmp    800420ad66 <vprintfmt+0x4af>

			// (unsigned) hexadecimal
		case 'x':
			num = getuint(&aq, 3);
  800420ad43:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420ad47:	be 03 00 00 00       	mov    $0x3,%esi
  800420ad4c:	48 89 c7             	mov    %rax,%rdi
  800420ad4f:	48 b8 97 a6 20 04 80 	movabs $0x800420a697,%rax
  800420ad56:	00 00 00 
  800420ad59:	ff d0                	callq  *%rax
  800420ad5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			base = 16;
  800420ad5f:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
		number:
			printnum(putch, putdat, num, base, width, padc);
  800420ad66:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  800420ad6b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800420ad6e:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800420ad71:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ad75:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420ad79:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ad7d:	45 89 c1             	mov    %r8d,%r9d
  800420ad80:	41 89 f8             	mov    %edi,%r8d
  800420ad83:	48 89 c7             	mov    %rax,%rdi
  800420ad86:	48 b8 dc a5 20 04 80 	movabs $0x800420a5dc,%rax
  800420ad8d:	00 00 00 
  800420ad90:	ff d0                	callq  *%rax
			break;
  800420ad92:	eb 3f                	jmp    800420add3 <vprintfmt+0x51c>

			// escaped '%' character
		case '%':
			putch(ch, putdat);
  800420ad94:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420ad98:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ad9c:	48 89 d6             	mov    %rdx,%rsi
  800420ad9f:	89 df                	mov    %ebx,%edi
  800420ada1:	ff d0                	callq  *%rax
			break;
  800420ada3:	eb 2e                	jmp    800420add3 <vprintfmt+0x51c>

			// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
  800420ada5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420ada9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420adad:	48 89 d6             	mov    %rdx,%rsi
  800420adb0:	bf 25 00 00 00       	mov    $0x25,%edi
  800420adb5:	ff d0                	callq  *%rax
			for (fmt--; fmt[-1] != '%'; fmt--)
  800420adb7:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420adbc:	eb 05                	jmp    800420adc3 <vprintfmt+0x50c>
  800420adbe:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420adc3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420adc7:	48 83 e8 01          	sub    $0x1,%rax
  800420adcb:	0f b6 00             	movzbl (%rax),%eax
  800420adce:	3c 25                	cmp    $0x25,%al
  800420add0:	75 ec                	jne    800420adbe <vprintfmt+0x507>
				/* do nothing */;
			break;
  800420add2:	90                   	nop
		}
	}
  800420add3:	90                   	nop
	int base, lflag, width, precision, altflag;
	char padc;
	va_list aq;
	va_copy(aq,ap);
	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
  800420add4:	e9 30 fb ff ff       	jmpq   800420a909 <vprintfmt+0x52>
				/* do nothing */;
			break;
		}
	}
	va_end(aq);
}
  800420add9:	48 83 c4 60          	add    $0x60,%rsp
  800420addd:	5b                   	pop    %rbx
  800420adde:	41 5c                	pop    %r12
  800420ade0:	5d                   	pop    %rbp
  800420ade1:	c3                   	retq   

000000800420ade2 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
  800420ade2:	55                   	push   %rbp
  800420ade3:	48 89 e5             	mov    %rsp,%rbp
  800420ade6:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420aded:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420adf4:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420adfb:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420ae02:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420ae09:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420ae10:	84 c0                	test   %al,%al
  800420ae12:	74 20                	je     800420ae34 <printfmt+0x52>
  800420ae14:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420ae18:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420ae1c:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420ae20:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420ae24:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420ae28:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420ae2c:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420ae30:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420ae34:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	va_list ap;

	va_start(ap, fmt);
  800420ae3b:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420ae42:	00 00 00 
  800420ae45:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420ae4c:	00 00 00 
  800420ae4f:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420ae53:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420ae5a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420ae61:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	vprintfmt(putch, putdat, fmt, ap);
  800420ae68:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  800420ae6f:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800420ae76:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420ae7d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420ae84:	48 89 c7             	mov    %rax,%rdi
  800420ae87:	48 b8 b7 a8 20 04 80 	movabs $0x800420a8b7,%rax
  800420ae8e:	00 00 00 
  800420ae91:	ff d0                	callq  *%rax
	va_end(ap);
}
  800420ae93:	c9                   	leaveq 
  800420ae94:	c3                   	retq   

000000800420ae95 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
  800420ae95:	55                   	push   %rbp
  800420ae96:	48 89 e5             	mov    %rsp,%rbp
  800420ae99:	48 83 ec 10          	sub    $0x10,%rsp
  800420ae9d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420aea0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	b->cnt++;
  800420aea4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420aea8:	8b 40 10             	mov    0x10(%rax),%eax
  800420aeab:	8d 50 01             	lea    0x1(%rax),%edx
  800420aeae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420aeb2:	89 50 10             	mov    %edx,0x10(%rax)
	if (b->buf < b->ebuf)
  800420aeb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420aeb9:	48 8b 10             	mov    (%rax),%rdx
  800420aebc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420aec0:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420aec4:	48 39 c2             	cmp    %rax,%rdx
  800420aec7:	73 17                	jae    800420aee0 <sprintputch+0x4b>
		*b->buf++ = ch;
  800420aec9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420aecd:	48 8b 00             	mov    (%rax),%rax
  800420aed0:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800420aed4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420aed8:	48 89 0a             	mov    %rcx,(%rdx)
  800420aedb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420aede:	88 10                	mov    %dl,(%rax)
}
  800420aee0:	c9                   	leaveq 
  800420aee1:	c3                   	retq   

000000800420aee2 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
  800420aee2:	55                   	push   %rbp
  800420aee3:	48 89 e5             	mov    %rsp,%rbp
  800420aee6:	48 83 ec 50          	sub    $0x50,%rsp
  800420aeea:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420aeee:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800420aef1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420aef5:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	va_list aq;
	va_copy(aq,ap);
  800420aef9:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800420aefd:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420af01:	48 8b 0a             	mov    (%rdx),%rcx
  800420af04:	48 89 08             	mov    %rcx,(%rax)
  800420af07:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420af0b:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420af0f:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420af13:	48 89 50 10          	mov    %rdx,0x10(%rax)
	struct sprintbuf b = {buf, buf+n-1, 0};
  800420af17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420af1b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420af1f:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420af22:	48 98                	cltq   
  800420af24:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800420af28:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420af2c:	48 01 d0             	add    %rdx,%rax
  800420af2f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420af33:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)

	if (buf == NULL || n < 1)
  800420af3a:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420af3f:	74 06                	je     800420af47 <vsnprintf+0x65>
  800420af41:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420af45:	7f 07                	jg     800420af4e <vsnprintf+0x6c>
		return -E_INVAL;
  800420af47:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420af4c:	eb 2f                	jmp    800420af7d <vsnprintf+0x9b>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, aq);
  800420af4e:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420af52:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420af56:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800420af5a:	48 89 c6             	mov    %rax,%rsi
  800420af5d:	48 bf 95 ae 20 04 80 	movabs $0x800420ae95,%rdi
  800420af64:	00 00 00 
  800420af67:	48 b8 b7 a8 20 04 80 	movabs $0x800420a8b7,%rax
  800420af6e:	00 00 00 
  800420af71:	ff d0                	callq  *%rax
	va_end(aq);
	// null terminate the buffer
	*b.buf = '\0';
  800420af73:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420af77:	c6 00 00             	movb   $0x0,(%rax)

	return b.cnt;
  800420af7a:	8b 45 e0             	mov    -0x20(%rbp),%eax
}
  800420af7d:	c9                   	leaveq 
  800420af7e:	c3                   	retq   

000000800420af7f <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
  800420af7f:	55                   	push   %rbp
  800420af80:	48 89 e5             	mov    %rsp,%rbp
  800420af83:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800420af8a:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800420af91:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  800420af97:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420af9e:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420afa5:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420afac:	84 c0                	test   %al,%al
  800420afae:	74 20                	je     800420afd0 <snprintf+0x51>
  800420afb0:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420afb4:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420afb8:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420afbc:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420afc0:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420afc4:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420afc8:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420afcc:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420afd0:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
	va_list ap;
	int rc;
	va_list aq;
	va_start(ap, fmt);
  800420afd7:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800420afde:	00 00 00 
  800420afe1:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  800420afe8:	00 00 00 
  800420afeb:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420afef:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420aff6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420affd:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
	va_copy(aq,ap);
  800420b004:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800420b00b:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420b012:	48 8b 0a             	mov    (%rdx),%rcx
  800420b015:	48 89 08             	mov    %rcx,(%rax)
  800420b018:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420b01c:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420b020:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420b024:	48 89 50 10          	mov    %rdx,0x10(%rax)
	rc = vsnprintf(buf, n, fmt, aq);
  800420b028:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  800420b02f:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800420b036:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  800420b03c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420b043:	48 89 c7             	mov    %rax,%rdi
  800420b046:	48 b8 e2 ae 20 04 80 	movabs $0x800420aee2,%rax
  800420b04d:	00 00 00 
  800420b050:	ff d0                	callq  *%rax
  800420b052:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
	va_end(aq);

	return rc;
  800420b058:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
}
  800420b05e:	c9                   	leaveq 
  800420b05f:	c3                   	retq   

000000800420b060 <readline>:
#define BUFLEN 1024
static char buf[BUFLEN];

char *
readline(const char *prompt)
{
  800420b060:	55                   	push   %rbp
  800420b061:	48 89 e5             	mov    %rsp,%rbp
  800420b064:	48 83 ec 20          	sub    $0x20,%rsp
  800420b068:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int i, c, echoing;

	if (prompt != NULL)
  800420b06c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420b071:	74 22                	je     800420b095 <readline+0x35>
		cprintf("%s", prompt);
  800420b073:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b077:	48 89 c6             	mov    %rax,%rsi
  800420b07a:	48 bf 28 36 21 04 80 	movabs $0x8004213628,%rdi
  800420b081:	00 00 00 
  800420b084:	b8 00 00 00 00       	mov    $0x0,%eax
  800420b089:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  800420b090:	00 00 00 
  800420b093:	ff d2                	callq  *%rdx

	i = 0;
  800420b095:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	echoing = iscons(0);
  800420b09c:	bf 00 00 00 00       	mov    $0x0,%edi
  800420b0a1:	48 b8 4b 0e 20 04 80 	movabs $0x8004200e4b,%rax
  800420b0a8:	00 00 00 
  800420b0ab:	ff d0                	callq  *%rax
  800420b0ad:	89 45 f8             	mov    %eax,-0x8(%rbp)
	while (1) {
		c = getchar();
  800420b0b0:	48 b8 29 0e 20 04 80 	movabs $0x8004200e29,%rax
  800420b0b7:	00 00 00 
  800420b0ba:	ff d0                	callq  *%rax
  800420b0bc:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (c < 0) {
  800420b0bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800420b0c3:	79 2a                	jns    800420b0ef <readline+0x8f>
			cprintf("read error: %e\n", c);
  800420b0c5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420b0c8:	89 c6                	mov    %eax,%esi
  800420b0ca:	48 bf 2b 36 21 04 80 	movabs $0x800421362b,%rdi
  800420b0d1:	00 00 00 
  800420b0d4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420b0d9:	48 ba d6 76 20 04 80 	movabs $0x80042076d6,%rdx
  800420b0e0:	00 00 00 
  800420b0e3:	ff d2                	callq  *%rdx
			return NULL;
  800420b0e5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420b0ea:	e9 be 00 00 00       	jmpq   800420b1ad <readline+0x14d>
		} else if ((c == '\b' || c == '\x7f') && i > 0) {
  800420b0ef:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  800420b0f3:	74 06                	je     800420b0fb <readline+0x9b>
  800420b0f5:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  800420b0f9:	75 26                	jne    800420b121 <readline+0xc1>
  800420b0fb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420b0ff:	7e 20                	jle    800420b121 <readline+0xc1>
			if (echoing)
  800420b101:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420b105:	74 11                	je     800420b118 <readline+0xb8>
				cputchar('\b');
  800420b107:	bf 08 00 00 00       	mov    $0x8,%edi
  800420b10c:	48 b8 0b 0e 20 04 80 	movabs $0x8004200e0b,%rax
  800420b113:	00 00 00 
  800420b116:	ff d0                	callq  *%rax
			i--;
  800420b118:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  800420b11c:	e9 87 00 00 00       	jmpq   800420b1a8 <readline+0x148>
		} else if (c >= ' ' && i < BUFLEN-1) {
  800420b121:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800420b125:	7e 3f                	jle    800420b166 <readline+0x106>
  800420b127:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  800420b12e:	7f 36                	jg     800420b166 <readline+0x106>
			if (echoing)
  800420b130:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420b134:	74 11                	je     800420b147 <readline+0xe7>
				cputchar(c);
  800420b136:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420b139:	89 c7                	mov    %eax,%edi
  800420b13b:	48 b8 0b 0e 20 04 80 	movabs $0x8004200e0b,%rax
  800420b142:	00 00 00 
  800420b145:	ff d0                	callq  *%rax
			buf[i++] = c;
  800420b147:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420b14a:	8d 50 01             	lea    0x1(%rax),%edx
  800420b14d:	89 55 fc             	mov    %edx,-0x4(%rbp)
  800420b150:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420b153:	89 d1                	mov    %edx,%ecx
  800420b155:	48 ba e0 d1 2b 04 80 	movabs $0x80042bd1e0,%rdx
  800420b15c:	00 00 00 
  800420b15f:	48 98                	cltq   
  800420b161:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420b164:	eb 42                	jmp    800420b1a8 <readline+0x148>
		} else if (c == '\n' || c == '\r') {
  800420b166:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  800420b16a:	74 06                	je     800420b172 <readline+0x112>
  800420b16c:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  800420b170:	75 36                	jne    800420b1a8 <readline+0x148>
			if (echoing)
  800420b172:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420b176:	74 11                	je     800420b189 <readline+0x129>
				cputchar('\n');
  800420b178:	bf 0a 00 00 00       	mov    $0xa,%edi
  800420b17d:	48 b8 0b 0e 20 04 80 	movabs $0x8004200e0b,%rax
  800420b184:	00 00 00 
  800420b187:	ff d0                	callq  *%rax
			buf[i] = 0;
  800420b189:	48 ba e0 d1 2b 04 80 	movabs $0x80042bd1e0,%rdx
  800420b190:	00 00 00 
  800420b193:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420b196:	48 98                	cltq   
  800420b198:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
			return buf;
  800420b19c:	48 b8 e0 d1 2b 04 80 	movabs $0x80042bd1e0,%rax
  800420b1a3:	00 00 00 
  800420b1a6:	eb 05                	jmp    800420b1ad <readline+0x14d>
		}
	}
  800420b1a8:	e9 03 ff ff ff       	jmpq   800420b0b0 <readline+0x50>
}
  800420b1ad:	c9                   	leaveq 
  800420b1ae:	c3                   	retq   

000000800420b1af <strlen>:
// Primespipe runs 3x faster this way.
#define ASM 1

int
strlen(const char *s)
{
  800420b1af:	55                   	push   %rbp
  800420b1b0:	48 89 e5             	mov    %rsp,%rbp
  800420b1b3:	48 83 ec 18          	sub    $0x18,%rsp
  800420b1b7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int n;

	for (n = 0; *s != '\0'; s++)
  800420b1bb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420b1c2:	eb 09                	jmp    800420b1cd <strlen+0x1e>
		n++;
  800420b1c4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
  800420b1c8:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420b1cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b1d1:	0f b6 00             	movzbl (%rax),%eax
  800420b1d4:	84 c0                	test   %al,%al
  800420b1d6:	75 ec                	jne    800420b1c4 <strlen+0x15>
		n++;
	return n;
  800420b1d8:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420b1db:	c9                   	leaveq 
  800420b1dc:	c3                   	retq   

000000800420b1dd <strnlen>:

int
strnlen(const char *s, size_t size)
{
  800420b1dd:	55                   	push   %rbp
  800420b1de:	48 89 e5             	mov    %rsp,%rbp
  800420b1e1:	48 83 ec 20          	sub    $0x20,%rsp
  800420b1e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b1e9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
  800420b1ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420b1f4:	eb 0e                	jmp    800420b204 <strnlen+0x27>
		n++;
  800420b1f6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
int
strnlen(const char *s, size_t size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
  800420b1fa:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420b1ff:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  800420b204:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420b209:	74 0b                	je     800420b216 <strnlen+0x39>
  800420b20b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b20f:	0f b6 00             	movzbl (%rax),%eax
  800420b212:	84 c0                	test   %al,%al
  800420b214:	75 e0                	jne    800420b1f6 <strnlen+0x19>
		n++;
	return n;
  800420b216:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420b219:	c9                   	leaveq 
  800420b21a:	c3                   	retq   

000000800420b21b <strcpy>:

char *
strcpy(char *dst, const char *src)
{
  800420b21b:	55                   	push   %rbp
  800420b21c:	48 89 e5             	mov    %rsp,%rbp
  800420b21f:	48 83 ec 20          	sub    $0x20,%rsp
  800420b223:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b227:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	char *ret;

	ret = dst;
  800420b22b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b22f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	while ((*dst++ = *src++) != '\0')
  800420b233:	90                   	nop
  800420b234:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b238:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420b23c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420b240:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420b244:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420b248:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420b24c:	0f b6 12             	movzbl (%rdx),%edx
  800420b24f:	88 10                	mov    %dl,(%rax)
  800420b251:	0f b6 00             	movzbl (%rax),%eax
  800420b254:	84 c0                	test   %al,%al
  800420b256:	75 dc                	jne    800420b234 <strcpy+0x19>
		/* do nothing */;
	return ret;
  800420b258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420b25c:	c9                   	leaveq 
  800420b25d:	c3                   	retq   

000000800420b25e <strcat>:

char *
strcat(char *dst, const char *src)
{
  800420b25e:	55                   	push   %rbp
  800420b25f:	48 89 e5             	mov    %rsp,%rbp
  800420b262:	48 83 ec 20          	sub    $0x20,%rsp
  800420b266:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b26a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int len = strlen(dst);
  800420b26e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b272:	48 89 c7             	mov    %rax,%rdi
  800420b275:	48 b8 af b1 20 04 80 	movabs $0x800420b1af,%rax
  800420b27c:	00 00 00 
  800420b27f:	ff d0                	callq  *%rax
  800420b281:	89 45 fc             	mov    %eax,-0x4(%rbp)
	strcpy(dst + len, src);
  800420b284:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420b287:	48 63 d0             	movslq %eax,%rdx
  800420b28a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b28e:	48 01 c2             	add    %rax,%rdx
  800420b291:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420b295:	48 89 c6             	mov    %rax,%rsi
  800420b298:	48 89 d7             	mov    %rdx,%rdi
  800420b29b:	48 b8 1b b2 20 04 80 	movabs $0x800420b21b,%rax
  800420b2a2:	00 00 00 
  800420b2a5:	ff d0                	callq  *%rax
	return dst;
  800420b2a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  800420b2ab:	c9                   	leaveq 
  800420b2ac:	c3                   	retq   

000000800420b2ad <strncpy>:

char *
strncpy(char *dst, const char *src, size_t size) {
  800420b2ad:	55                   	push   %rbp
  800420b2ae:	48 89 e5             	mov    %rsp,%rbp
  800420b2b1:	48 83 ec 28          	sub    $0x28,%rsp
  800420b2b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b2b9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420b2bd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	size_t i;
	char *ret;

	ret = dst;
  800420b2c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b2c5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (i = 0; i < size; i++) {
  800420b2c9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420b2d0:	00 
  800420b2d1:	eb 2a                	jmp    800420b2fd <strncpy+0x50>
		*dst++ = *src;
  800420b2d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b2d7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420b2db:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420b2df:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420b2e3:	0f b6 12             	movzbl (%rdx),%edx
  800420b2e6:	88 10                	mov    %dl,(%rax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
  800420b2e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420b2ec:	0f b6 00             	movzbl (%rax),%eax
  800420b2ef:	84 c0                	test   %al,%al
  800420b2f1:	74 05                	je     800420b2f8 <strncpy+0x4b>
			src++;
  800420b2f3:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
strncpy(char *dst, const char *src, size_t size) {
	size_t i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
  800420b2f8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420b2fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b301:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420b305:	72 cc                	jb     800420b2d3 <strncpy+0x26>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
  800420b307:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  800420b30b:	c9                   	leaveq 
  800420b30c:	c3                   	retq   

000000800420b30d <strlcpy>:

size_t
strlcpy(char *dst, const char *src, size_t size)
{
  800420b30d:	55                   	push   %rbp
  800420b30e:	48 89 e5             	mov    %rsp,%rbp
  800420b311:	48 83 ec 28          	sub    $0x28,%rsp
  800420b315:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b319:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420b31d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *dst_in;

	dst_in = dst;
  800420b321:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b325:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (size > 0) {
  800420b329:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420b32e:	74 3d                	je     800420b36d <strlcpy+0x60>
		while (--size > 0 && *src != '\0')
  800420b330:	eb 1d                	jmp    800420b34f <strlcpy+0x42>
			*dst++ = *src++;
  800420b332:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b336:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420b33a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420b33e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420b342:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420b346:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420b34a:	0f b6 12             	movzbl (%rdx),%edx
  800420b34d:	88 10                	mov    %dl,(%rax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
  800420b34f:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  800420b354:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420b359:	74 0b                	je     800420b366 <strlcpy+0x59>
  800420b35b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420b35f:	0f b6 00             	movzbl (%rax),%eax
  800420b362:	84 c0                	test   %al,%al
  800420b364:	75 cc                	jne    800420b332 <strlcpy+0x25>
			*dst++ = *src++;
		*dst = '\0';
  800420b366:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b36a:	c6 00 00             	movb   $0x0,(%rax)
	}
	return dst - dst_in;
  800420b36d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420b371:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b375:	48 29 c2             	sub    %rax,%rdx
  800420b378:	48 89 d0             	mov    %rdx,%rax
}
  800420b37b:	c9                   	leaveq 
  800420b37c:	c3                   	retq   

000000800420b37d <strcmp>:

int
strcmp(const char *p, const char *q)
{
  800420b37d:	55                   	push   %rbp
  800420b37e:	48 89 e5             	mov    %rsp,%rbp
  800420b381:	48 83 ec 10          	sub    $0x10,%rsp
  800420b385:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420b389:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	while (*p && *p == *q)
  800420b38d:	eb 0a                	jmp    800420b399 <strcmp+0x1c>
		p++, q++;
  800420b38f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420b394:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
  800420b399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b39d:	0f b6 00             	movzbl (%rax),%eax
  800420b3a0:	84 c0                	test   %al,%al
  800420b3a2:	74 12                	je     800420b3b6 <strcmp+0x39>
  800420b3a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b3a8:	0f b6 10             	movzbl (%rax),%edx
  800420b3ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b3af:	0f b6 00             	movzbl (%rax),%eax
  800420b3b2:	38 c2                	cmp    %al,%dl
  800420b3b4:	74 d9                	je     800420b38f <strcmp+0x12>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
  800420b3b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b3ba:	0f b6 00             	movzbl (%rax),%eax
  800420b3bd:	0f b6 d0             	movzbl %al,%edx
  800420b3c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b3c4:	0f b6 00             	movzbl (%rax),%eax
  800420b3c7:	0f b6 c0             	movzbl %al,%eax
  800420b3ca:	29 c2                	sub    %eax,%edx
  800420b3cc:	89 d0                	mov    %edx,%eax
}
  800420b3ce:	c9                   	leaveq 
  800420b3cf:	c3                   	retq   

000000800420b3d0 <strncmp>:

int
strncmp(const char *p, const char *q, size_t n)
{
  800420b3d0:	55                   	push   %rbp
  800420b3d1:	48 89 e5             	mov    %rsp,%rbp
  800420b3d4:	48 83 ec 18          	sub    $0x18,%rsp
  800420b3d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420b3dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420b3e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	while (n > 0 && *p && *p == *q)
  800420b3e4:	eb 0f                	jmp    800420b3f5 <strncmp+0x25>
		n--, p++, q++;
  800420b3e6:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  800420b3eb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420b3f0:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
}

int
strncmp(const char *p, const char *q, size_t n)
{
	while (n > 0 && *p && *p == *q)
  800420b3f5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420b3fa:	74 1d                	je     800420b419 <strncmp+0x49>
  800420b3fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b400:	0f b6 00             	movzbl (%rax),%eax
  800420b403:	84 c0                	test   %al,%al
  800420b405:	74 12                	je     800420b419 <strncmp+0x49>
  800420b407:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b40b:	0f b6 10             	movzbl (%rax),%edx
  800420b40e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b412:	0f b6 00             	movzbl (%rax),%eax
  800420b415:	38 c2                	cmp    %al,%dl
  800420b417:	74 cd                	je     800420b3e6 <strncmp+0x16>
		n--, p++, q++;
	if (n == 0)
  800420b419:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420b41e:	75 07                	jne    800420b427 <strncmp+0x57>
		return 0;
  800420b420:	b8 00 00 00 00       	mov    $0x0,%eax
  800420b425:	eb 18                	jmp    800420b43f <strncmp+0x6f>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
  800420b427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b42b:	0f b6 00             	movzbl (%rax),%eax
  800420b42e:	0f b6 d0             	movzbl %al,%edx
  800420b431:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b435:	0f b6 00             	movzbl (%rax),%eax
  800420b438:	0f b6 c0             	movzbl %al,%eax
  800420b43b:	29 c2                	sub    %eax,%edx
  800420b43d:	89 d0                	mov    %edx,%eax
}
  800420b43f:	c9                   	leaveq 
  800420b440:	c3                   	retq   

000000800420b441 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
  800420b441:	55                   	push   %rbp
  800420b442:	48 89 e5             	mov    %rsp,%rbp
  800420b445:	48 83 ec 0c          	sub    $0xc,%rsp
  800420b449:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420b44d:	89 f0                	mov    %esi,%eax
  800420b44f:	88 45 f4             	mov    %al,-0xc(%rbp)
	for (; *s; s++)
  800420b452:	eb 17                	jmp    800420b46b <strchr+0x2a>
		if (*s == c)
  800420b454:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b458:	0f b6 00             	movzbl (%rax),%eax
  800420b45b:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800420b45e:	75 06                	jne    800420b466 <strchr+0x25>
			return (char *) s;
  800420b460:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b464:	eb 15                	jmp    800420b47b <strchr+0x3a>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
  800420b466:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420b46b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b46f:	0f b6 00             	movzbl (%rax),%eax
  800420b472:	84 c0                	test   %al,%al
  800420b474:	75 de                	jne    800420b454 <strchr+0x13>
		if (*s == c)
			return (char *) s;
	return 0;
  800420b476:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420b47b:	c9                   	leaveq 
  800420b47c:	c3                   	retq   

000000800420b47d <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
  800420b47d:	55                   	push   %rbp
  800420b47e:	48 89 e5             	mov    %rsp,%rbp
  800420b481:	48 83 ec 0c          	sub    $0xc,%rsp
  800420b485:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420b489:	89 f0                	mov    %esi,%eax
  800420b48b:	88 45 f4             	mov    %al,-0xc(%rbp)
	for (; *s; s++)
  800420b48e:	eb 13                	jmp    800420b4a3 <strfind+0x26>
		if (*s == c)
  800420b490:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b494:	0f b6 00             	movzbl (%rax),%eax
  800420b497:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800420b49a:	75 02                	jne    800420b49e <strfind+0x21>
			break;
  800420b49c:	eb 10                	jmp    800420b4ae <strfind+0x31>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
  800420b49e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420b4a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b4a7:	0f b6 00             	movzbl (%rax),%eax
  800420b4aa:	84 c0                	test   %al,%al
  800420b4ac:	75 e2                	jne    800420b490 <strfind+0x13>
		if (*s == c)
			break;
	return (char *) s;
  800420b4ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420b4b2:	c9                   	leaveq 
  800420b4b3:	c3                   	retq   

000000800420b4b4 <memset>:

#if ASM
void *
memset(void *v, int c, size_t n)
{
  800420b4b4:	55                   	push   %rbp
  800420b4b5:	48 89 e5             	mov    %rsp,%rbp
  800420b4b8:	48 83 ec 18          	sub    $0x18,%rsp
  800420b4bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420b4c0:	89 75 f4             	mov    %esi,-0xc(%rbp)
  800420b4c3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	char *p;

	if (n == 0)
  800420b4c7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420b4cc:	75 06                	jne    800420b4d4 <memset+0x20>
		return v;
  800420b4ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b4d2:	eb 69                	jmp    800420b53d <memset+0x89>
	if ((int64_t)v%4 == 0 && n%4 == 0) {
  800420b4d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b4d8:	83 e0 03             	and    $0x3,%eax
  800420b4db:	48 85 c0             	test   %rax,%rax
  800420b4de:	75 48                	jne    800420b528 <memset+0x74>
  800420b4e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b4e4:	83 e0 03             	and    $0x3,%eax
  800420b4e7:	48 85 c0             	test   %rax,%rax
  800420b4ea:	75 3c                	jne    800420b528 <memset+0x74>
		c &= 0xFF;
  800420b4ec:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
		c = (c<<24)|(c<<16)|(c<<8)|c;
  800420b4f3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420b4f6:	c1 e0 18             	shl    $0x18,%eax
  800420b4f9:	89 c2                	mov    %eax,%edx
  800420b4fb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420b4fe:	c1 e0 10             	shl    $0x10,%eax
  800420b501:	09 c2                	or     %eax,%edx
  800420b503:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420b506:	c1 e0 08             	shl    $0x8,%eax
  800420b509:	09 d0                	or     %edx,%eax
  800420b50b:	09 45 f4             	or     %eax,-0xc(%rbp)
		asm volatile("cld; rep stosl\n"
			     :: "D" (v), "a" (c), "c" (n/4)
  800420b50e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b512:	48 c1 e8 02          	shr    $0x2,%rax
  800420b516:	48 89 c1             	mov    %rax,%rcx
	if (n == 0)
		return v;
	if ((int64_t)v%4 == 0 && n%4 == 0) {
		c &= 0xFF;
		c = (c<<24)|(c<<16)|(c<<8)|c;
		asm volatile("cld; rep stosl\n"
  800420b519:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420b51d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420b520:	48 89 d7             	mov    %rdx,%rdi
  800420b523:	fc                   	cld    
  800420b524:	f3 ab                	rep stos %eax,%es:(%rdi)
  800420b526:	eb 11                	jmp    800420b539 <memset+0x85>
			     :: "D" (v), "a" (c), "c" (n/4)
			     : "cc", "memory");
	} else
		asm volatile("cld; rep stosb\n"
  800420b528:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420b52c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420b52f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420b533:	48 89 d7             	mov    %rdx,%rdi
  800420b536:	fc                   	cld    
  800420b537:	f3 aa                	rep stos %al,%es:(%rdi)
			     :: "D" (v), "a" (c), "c" (n)
			     : "cc", "memory");
	return v;
  800420b539:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420b53d:	c9                   	leaveq 
  800420b53e:	c3                   	retq   

000000800420b53f <memmove>:

void *
memmove(void *dst, const void *src, size_t n)
{
  800420b53f:	55                   	push   %rbp
  800420b540:	48 89 e5             	mov    %rsp,%rbp
  800420b543:	48 83 ec 28          	sub    $0x28,%rsp
  800420b547:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b54b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420b54f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const char *s;
	char *d;

	s = src;
  800420b553:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420b557:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	d = dst;
  800420b55b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b55f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (s < d && s + n > d) {
  800420b563:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b567:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800420b56b:	0f 83 88 00 00 00    	jae    800420b5f9 <memmove+0xba>
  800420b571:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b575:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420b579:	48 01 d0             	add    %rdx,%rax
  800420b57c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800420b580:	76 77                	jbe    800420b5f9 <memmove+0xba>
		s += n;
  800420b582:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b586:	48 01 45 f8          	add    %rax,-0x8(%rbp)
		d += n;
  800420b58a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b58e:	48 01 45 f0          	add    %rax,-0x10(%rbp)
		if ((int64_t)s%4 == 0 && (int64_t)d%4 == 0 && n%4 == 0)
  800420b592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b596:	83 e0 03             	and    $0x3,%eax
  800420b599:	48 85 c0             	test   %rax,%rax
  800420b59c:	75 3b                	jne    800420b5d9 <memmove+0x9a>
  800420b59e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b5a2:	83 e0 03             	and    $0x3,%eax
  800420b5a5:	48 85 c0             	test   %rax,%rax
  800420b5a8:	75 2f                	jne    800420b5d9 <memmove+0x9a>
  800420b5aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b5ae:	83 e0 03             	and    $0x3,%eax
  800420b5b1:	48 85 c0             	test   %rax,%rax
  800420b5b4:	75 23                	jne    800420b5d9 <memmove+0x9a>
			asm volatile("std; rep movsl\n"
				     :: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
  800420b5b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b5ba:	48 83 e8 04          	sub    $0x4,%rax
  800420b5be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420b5c2:	48 83 ea 04          	sub    $0x4,%rdx
  800420b5c6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420b5ca:	48 c1 e9 02          	shr    $0x2,%rcx
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		if ((int64_t)s%4 == 0 && (int64_t)d%4 == 0 && n%4 == 0)
			asm volatile("std; rep movsl\n"
  800420b5ce:	48 89 c7             	mov    %rax,%rdi
  800420b5d1:	48 89 d6             	mov    %rdx,%rsi
  800420b5d4:	fd                   	std    
  800420b5d5:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  800420b5d7:	eb 1d                	jmp    800420b5f6 <memmove+0xb7>
				     :: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
		else
			asm volatile("std; rep movsb\n"
				     :: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
  800420b5d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b5dd:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800420b5e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b5e5:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
		d += n;
		if ((int64_t)s%4 == 0 && (int64_t)d%4 == 0 && n%4 == 0)
			asm volatile("std; rep movsl\n"
				     :: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
		else
			asm volatile("std; rep movsb\n"
  800420b5e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b5ed:	48 89 d7             	mov    %rdx,%rdi
  800420b5f0:	48 89 c1             	mov    %rax,%rcx
  800420b5f3:	fd                   	std    
  800420b5f4:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
				     :: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
		// Some versions of GCC rely on DF being clear
		asm volatile("cld" ::: "cc");
  800420b5f6:	fc                   	cld    
  800420b5f7:	eb 57                	jmp    800420b650 <memmove+0x111>
	} else {
		if ((int64_t)s%4 == 0 && (int64_t)d%4 == 0 && n%4 == 0)
  800420b5f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b5fd:	83 e0 03             	and    $0x3,%eax
  800420b600:	48 85 c0             	test   %rax,%rax
  800420b603:	75 36                	jne    800420b63b <memmove+0xfc>
  800420b605:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b609:	83 e0 03             	and    $0x3,%eax
  800420b60c:	48 85 c0             	test   %rax,%rax
  800420b60f:	75 2a                	jne    800420b63b <memmove+0xfc>
  800420b611:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b615:	83 e0 03             	and    $0x3,%eax
  800420b618:	48 85 c0             	test   %rax,%rax
  800420b61b:	75 1e                	jne    800420b63b <memmove+0xfc>
			asm volatile("cld; rep movsl\n"
				     :: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
  800420b61d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b621:	48 c1 e8 02          	shr    $0x2,%rax
  800420b625:	48 89 c1             	mov    %rax,%rcx
				     :: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
		// Some versions of GCC rely on DF being clear
		asm volatile("cld" ::: "cc");
	} else {
		if ((int64_t)s%4 == 0 && (int64_t)d%4 == 0 && n%4 == 0)
			asm volatile("cld; rep movsl\n"
  800420b628:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b62c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420b630:	48 89 c7             	mov    %rax,%rdi
  800420b633:	48 89 d6             	mov    %rdx,%rsi
  800420b636:	fc                   	cld    
  800420b637:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  800420b639:	eb 15                	jmp    800420b650 <memmove+0x111>
				     :: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
		else
			asm volatile("cld; rep movsb\n"
  800420b63b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b63f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420b643:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420b647:	48 89 c7             	mov    %rax,%rdi
  800420b64a:	48 89 d6             	mov    %rdx,%rsi
  800420b64d:	fc                   	cld    
  800420b64e:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
				     :: "D" (d), "S" (s), "c" (n) : "cc", "memory");
	}
	return dst;
  800420b650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  800420b654:	c9                   	leaveq 
  800420b655:	c3                   	retq   

000000800420b656 <memcpy>:
}
#endif

void *
memcpy(void *dst, const void *src, size_t n)
{
  800420b656:	55                   	push   %rbp
  800420b657:	48 89 e5             	mov    %rsp,%rbp
  800420b65a:	48 83 ec 18          	sub    $0x18,%rsp
  800420b65e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420b662:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420b666:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	return memmove(dst, src, n);
  800420b66a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420b66e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800420b672:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b676:	48 89 ce             	mov    %rcx,%rsi
  800420b679:	48 89 c7             	mov    %rax,%rdi
  800420b67c:	48 b8 3f b5 20 04 80 	movabs $0x800420b53f,%rax
  800420b683:	00 00 00 
  800420b686:	ff d0                	callq  *%rax
}
  800420b688:	c9                   	leaveq 
  800420b689:	c3                   	retq   

000000800420b68a <memcmp>:

int
memcmp(const void *v1, const void *v2, size_t n)
{
  800420b68a:	55                   	push   %rbp
  800420b68b:	48 89 e5             	mov    %rsp,%rbp
  800420b68e:	48 83 ec 28          	sub    $0x28,%rsp
  800420b692:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b696:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420b69a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const uint8_t *s1 = (const uint8_t *) v1;
  800420b69e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b6a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const uint8_t *s2 = (const uint8_t *) v2;
  800420b6a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420b6aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (n-- > 0) {
  800420b6ae:	eb 36                	jmp    800420b6e6 <memcmp+0x5c>
		if (*s1 != *s2)
  800420b6b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b6b4:	0f b6 10             	movzbl (%rax),%edx
  800420b6b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b6bb:	0f b6 00             	movzbl (%rax),%eax
  800420b6be:	38 c2                	cmp    %al,%dl
  800420b6c0:	74 1a                	je     800420b6dc <memcmp+0x52>
			return (int) *s1 - (int) *s2;
  800420b6c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420b6c6:	0f b6 00             	movzbl (%rax),%eax
  800420b6c9:	0f b6 d0             	movzbl %al,%edx
  800420b6cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b6d0:	0f b6 00             	movzbl (%rax),%eax
  800420b6d3:	0f b6 c0             	movzbl %al,%eax
  800420b6d6:	29 c2                	sub    %eax,%edx
  800420b6d8:	89 d0                	mov    %edx,%eax
  800420b6da:	eb 20                	jmp    800420b6fc <memcmp+0x72>
		s1++, s2++;
  800420b6dc:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420b6e1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
memcmp(const void *v1, const void *v2, size_t n)
{
	const uint8_t *s1 = (const uint8_t *) v1;
	const uint8_t *s2 = (const uint8_t *) v2;

	while (n-- > 0) {
  800420b6e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b6ea:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800420b6ee:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420b6f2:	48 85 c0             	test   %rax,%rax
  800420b6f5:	75 b9                	jne    800420b6b0 <memcmp+0x26>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
  800420b6f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420b6fc:	c9                   	leaveq 
  800420b6fd:	c3                   	retq   

000000800420b6fe <memfind>:

void *
memfind(const void *s, int c, size_t n)
{
  800420b6fe:	55                   	push   %rbp
  800420b6ff:	48 89 e5             	mov    %rsp,%rbp
  800420b702:	48 83 ec 28          	sub    $0x28,%rsp
  800420b706:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b70a:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420b70d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const void *ends = (const char *) s + n;
  800420b711:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b715:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420b719:	48 01 d0             	add    %rdx,%rax
  800420b71c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	for (; s < ends; s++)
  800420b720:	eb 15                	jmp    800420b737 <memfind+0x39>
		if (*(const unsigned char *) s == (unsigned char) c)
  800420b722:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b726:	0f b6 10             	movzbl (%rax),%edx
  800420b729:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420b72c:	38 c2                	cmp    %al,%dl
  800420b72e:	75 02                	jne    800420b732 <memfind+0x34>
			break;
  800420b730:	eb 0f                	jmp    800420b741 <memfind+0x43>

void *
memfind(const void *s, int c, size_t n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
  800420b732:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420b737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b73b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420b73f:	72 e1                	jb     800420b722 <memfind+0x24>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
	return (void *) s;
  800420b741:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  800420b745:	c9                   	leaveq 
  800420b746:	c3                   	retq   

000000800420b747 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
  800420b747:	55                   	push   %rbp
  800420b748:	48 89 e5             	mov    %rsp,%rbp
  800420b74b:	48 83 ec 34          	sub    $0x34,%rsp
  800420b74f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420b753:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420b757:	89 55 cc             	mov    %edx,-0x34(%rbp)
	int neg = 0;
  800420b75a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	long val = 0;
  800420b761:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420b768:	00 

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
  800420b769:	eb 05                	jmp    800420b770 <strtol+0x29>
		s++;
  800420b76b:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
  800420b770:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b774:	0f b6 00             	movzbl (%rax),%eax
  800420b777:	3c 20                	cmp    $0x20,%al
  800420b779:	74 f0                	je     800420b76b <strtol+0x24>
  800420b77b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b77f:	0f b6 00             	movzbl (%rax),%eax
  800420b782:	3c 09                	cmp    $0x9,%al
  800420b784:	74 e5                	je     800420b76b <strtol+0x24>
		s++;

	// plus/minus sign
	if (*s == '+')
  800420b786:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b78a:	0f b6 00             	movzbl (%rax),%eax
  800420b78d:	3c 2b                	cmp    $0x2b,%al
  800420b78f:	75 07                	jne    800420b798 <strtol+0x51>
		s++;
  800420b791:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800420b796:	eb 17                	jmp    800420b7af <strtol+0x68>
	else if (*s == '-')
  800420b798:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b79c:	0f b6 00             	movzbl (%rax),%eax
  800420b79f:	3c 2d                	cmp    $0x2d,%al
  800420b7a1:	75 0c                	jne    800420b7af <strtol+0x68>
		s++, neg = 1;
  800420b7a3:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800420b7a8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
  800420b7af:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800420b7b3:	74 06                	je     800420b7bb <strtol+0x74>
  800420b7b5:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  800420b7b9:	75 28                	jne    800420b7e3 <strtol+0x9c>
  800420b7bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b7bf:	0f b6 00             	movzbl (%rax),%eax
  800420b7c2:	3c 30                	cmp    $0x30,%al
  800420b7c4:	75 1d                	jne    800420b7e3 <strtol+0x9c>
  800420b7c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b7ca:	48 83 c0 01          	add    $0x1,%rax
  800420b7ce:	0f b6 00             	movzbl (%rax),%eax
  800420b7d1:	3c 78                	cmp    $0x78,%al
  800420b7d3:	75 0e                	jne    800420b7e3 <strtol+0x9c>
		s += 2, base = 16;
  800420b7d5:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  800420b7da:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  800420b7e1:	eb 2c                	jmp    800420b80f <strtol+0xc8>
	else if (base == 0 && s[0] == '0')
  800420b7e3:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800420b7e7:	75 19                	jne    800420b802 <strtol+0xbb>
  800420b7e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b7ed:	0f b6 00             	movzbl (%rax),%eax
  800420b7f0:	3c 30                	cmp    $0x30,%al
  800420b7f2:	75 0e                	jne    800420b802 <strtol+0xbb>
		s++, base = 8;
  800420b7f4:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800420b7f9:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  800420b800:	eb 0d                	jmp    800420b80f <strtol+0xc8>
	else if (base == 0)
  800420b802:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800420b806:	75 07                	jne    800420b80f <strtol+0xc8>
		base = 10;
  800420b808:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
  800420b80f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b813:	0f b6 00             	movzbl (%rax),%eax
  800420b816:	3c 2f                	cmp    $0x2f,%al
  800420b818:	7e 1d                	jle    800420b837 <strtol+0xf0>
  800420b81a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b81e:	0f b6 00             	movzbl (%rax),%eax
  800420b821:	3c 39                	cmp    $0x39,%al
  800420b823:	7f 12                	jg     800420b837 <strtol+0xf0>
			dig = *s - '0';
  800420b825:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b829:	0f b6 00             	movzbl (%rax),%eax
  800420b82c:	0f be c0             	movsbl %al,%eax
  800420b82f:	83 e8 30             	sub    $0x30,%eax
  800420b832:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420b835:	eb 4e                	jmp    800420b885 <strtol+0x13e>
		else if (*s >= 'a' && *s <= 'z')
  800420b837:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b83b:	0f b6 00             	movzbl (%rax),%eax
  800420b83e:	3c 60                	cmp    $0x60,%al
  800420b840:	7e 1d                	jle    800420b85f <strtol+0x118>
  800420b842:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b846:	0f b6 00             	movzbl (%rax),%eax
  800420b849:	3c 7a                	cmp    $0x7a,%al
  800420b84b:	7f 12                	jg     800420b85f <strtol+0x118>
			dig = *s - 'a' + 10;
  800420b84d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b851:	0f b6 00             	movzbl (%rax),%eax
  800420b854:	0f be c0             	movsbl %al,%eax
  800420b857:	83 e8 57             	sub    $0x57,%eax
  800420b85a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420b85d:	eb 26                	jmp    800420b885 <strtol+0x13e>
		else if (*s >= 'A' && *s <= 'Z')
  800420b85f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b863:	0f b6 00             	movzbl (%rax),%eax
  800420b866:	3c 40                	cmp    $0x40,%al
  800420b868:	7e 48                	jle    800420b8b2 <strtol+0x16b>
  800420b86a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b86e:	0f b6 00             	movzbl (%rax),%eax
  800420b871:	3c 5a                	cmp    $0x5a,%al
  800420b873:	7f 3d                	jg     800420b8b2 <strtol+0x16b>
			dig = *s - 'A' + 10;
  800420b875:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b879:	0f b6 00             	movzbl (%rax),%eax
  800420b87c:	0f be c0             	movsbl %al,%eax
  800420b87f:	83 e8 37             	sub    $0x37,%eax
  800420b882:	89 45 ec             	mov    %eax,-0x14(%rbp)
		else
			break;
		if (dig >= base)
  800420b885:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420b888:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800420b88b:	7c 02                	jl     800420b88f <strtol+0x148>
			break;
  800420b88d:	eb 23                	jmp    800420b8b2 <strtol+0x16b>
		s++, val = (val * base) + dig;
  800420b88f:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800420b894:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420b897:	48 98                	cltq   
  800420b899:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  800420b89e:	48 89 c2             	mov    %rax,%rdx
  800420b8a1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420b8a4:	48 98                	cltq   
  800420b8a6:	48 01 d0             	add    %rdx,%rax
  800420b8a9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		// we don't properly detect overflow!
	}
  800420b8ad:	e9 5d ff ff ff       	jmpq   800420b80f <strtol+0xc8>

	if (endptr)
  800420b8b2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420b8b7:	74 0b                	je     800420b8c4 <strtol+0x17d>
		*endptr = (char *) s;
  800420b8b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420b8bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420b8c1:	48 89 10             	mov    %rdx,(%rax)
	return (neg ? -val : val);
  800420b8c4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420b8c8:	74 09                	je     800420b8d3 <strtol+0x18c>
  800420b8ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b8ce:	48 f7 d8             	neg    %rax
  800420b8d1:	eb 04                	jmp    800420b8d7 <strtol+0x190>
  800420b8d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  800420b8d7:	c9                   	leaveq 
  800420b8d8:	c3                   	retq   

000000800420b8d9 <strstr>:

char * strstr(const char *in, const char *str)
{
  800420b8d9:	55                   	push   %rbp
  800420b8da:	48 89 e5             	mov    %rsp,%rbp
  800420b8dd:	48 83 ec 30          	sub    $0x30,%rsp
  800420b8e1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420b8e5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	char c;
	size_t len;

	c = *str++;
  800420b8e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420b8ed:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420b8f1:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800420b8f5:	0f b6 00             	movzbl (%rax),%eax
  800420b8f8:	88 45 ff             	mov    %al,-0x1(%rbp)
	if (!c)
  800420b8fb:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  800420b8ff:	75 06                	jne    800420b907 <strstr+0x2e>
		return (char *) in;	// Trivial empty string case
  800420b901:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b905:	eb 6b                	jmp    800420b972 <strstr+0x99>

	len = strlen(str);
  800420b907:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420b90b:	48 89 c7             	mov    %rax,%rdi
  800420b90e:	48 b8 af b1 20 04 80 	movabs $0x800420b1af,%rax
  800420b915:	00 00 00 
  800420b918:	ff d0                	callq  *%rax
  800420b91a:	48 98                	cltq   
  800420b91c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	do {
		char sc;

		do {
			sc = *in++;
  800420b920:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b924:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420b928:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420b92c:	0f b6 00             	movzbl (%rax),%eax
  800420b92f:	88 45 ef             	mov    %al,-0x11(%rbp)
			if (!sc)
  800420b932:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800420b936:	75 07                	jne    800420b93f <strstr+0x66>
				return (char *) 0;
  800420b938:	b8 00 00 00 00       	mov    $0x0,%eax
  800420b93d:	eb 33                	jmp    800420b972 <strstr+0x99>
		} while (sc != c);
  800420b93f:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800420b943:	3a 45 ff             	cmp    -0x1(%rbp),%al
  800420b946:	75 d8                	jne    800420b920 <strstr+0x47>
	} while (strncmp(in, str, len) != 0);
  800420b948:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420b94c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  800420b950:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b954:	48 89 ce             	mov    %rcx,%rsi
  800420b957:	48 89 c7             	mov    %rax,%rdi
  800420b95a:	48 b8 d0 b3 20 04 80 	movabs $0x800420b3d0,%rax
  800420b961:	00 00 00 
  800420b964:	ff d0                	callq  *%rax
  800420b966:	85 c0                	test   %eax,%eax
  800420b968:	75 b6                	jne    800420b920 <strstr+0x47>

	return (char *) (in - 1);
  800420b96a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420b96e:	48 83 e8 01          	sub    $0x1,%rax
}
  800420b972:	c9                   	leaveq 
  800420b973:	c3                   	retq   

000000800420b974 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  800420b974:	55                   	push   %rbp
  800420b975:	48 89 e5             	mov    %rsp,%rbp
  800420b978:	48 83 ec 24          	sub    $0x24,%rsp
  800420b97c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420b980:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420b984:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  800420b987:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420b98b:	48 8b 10             	mov    (%rax),%rdx
  800420b98e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420b992:	48 01 d0             	add    %rdx,%rax
  800420b995:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800420b999:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420b9a0:	00 
	switch (bytes_to_read) {
  800420b9a1:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420b9a4:	83 f8 02             	cmp    $0x2,%eax
  800420b9a7:	0f 84 ab 00 00 00    	je     800420ba58 <_dwarf_read_lsb+0xe4>
  800420b9ad:	83 f8 02             	cmp    $0x2,%eax
  800420b9b0:	7f 0e                	jg     800420b9c0 <_dwarf_read_lsb+0x4c>
  800420b9b2:	83 f8 01             	cmp    $0x1,%eax
  800420b9b5:	0f 84 b3 00 00 00    	je     800420ba6e <_dwarf_read_lsb+0xfa>
  800420b9bb:	e9 d9 00 00 00       	jmpq   800420ba99 <_dwarf_read_lsb+0x125>
  800420b9c0:	83 f8 04             	cmp    $0x4,%eax
  800420b9c3:	74 65                	je     800420ba2a <_dwarf_read_lsb+0xb6>
  800420b9c5:	83 f8 08             	cmp    $0x8,%eax
  800420b9c8:	0f 85 cb 00 00 00    	jne    800420ba99 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800420b9ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b9d2:	48 83 c0 04          	add    $0x4,%rax
  800420b9d6:	0f b6 00             	movzbl (%rax),%eax
  800420b9d9:	0f b6 c0             	movzbl %al,%eax
  800420b9dc:	48 c1 e0 20          	shl    $0x20,%rax
  800420b9e0:	48 89 c2             	mov    %rax,%rdx
  800420b9e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420b9e7:	48 83 c0 05          	add    $0x5,%rax
  800420b9eb:	0f b6 00             	movzbl (%rax),%eax
  800420b9ee:	0f b6 c0             	movzbl %al,%eax
  800420b9f1:	48 c1 e0 28          	shl    $0x28,%rax
  800420b9f5:	48 09 d0             	or     %rdx,%rax
  800420b9f8:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  800420b9fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ba00:	48 83 c0 06          	add    $0x6,%rax
  800420ba04:	0f b6 00             	movzbl (%rax),%eax
  800420ba07:	0f b6 c0             	movzbl %al,%eax
  800420ba0a:	48 c1 e0 30          	shl    $0x30,%rax
  800420ba0e:	48 89 c2             	mov    %rax,%rdx
  800420ba11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ba15:	48 83 c0 07          	add    $0x7,%rax
  800420ba19:	0f b6 00             	movzbl (%rax),%eax
  800420ba1c:	0f b6 c0             	movzbl %al,%eax
  800420ba1f:	48 c1 e0 38          	shl    $0x38,%rax
  800420ba23:	48 09 d0             	or     %rdx,%rax
  800420ba26:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  800420ba2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ba2e:	48 83 c0 02          	add    $0x2,%rax
  800420ba32:	0f b6 00             	movzbl (%rax),%eax
  800420ba35:	0f b6 c0             	movzbl %al,%eax
  800420ba38:	48 c1 e0 10          	shl    $0x10,%rax
  800420ba3c:	48 89 c2             	mov    %rax,%rdx
  800420ba3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ba43:	48 83 c0 03          	add    $0x3,%rax
  800420ba47:	0f b6 00             	movzbl (%rax),%eax
  800420ba4a:	0f b6 c0             	movzbl %al,%eax
  800420ba4d:	48 c1 e0 18          	shl    $0x18,%rax
  800420ba51:	48 09 d0             	or     %rdx,%rax
  800420ba54:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  800420ba58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ba5c:	48 83 c0 01          	add    $0x1,%rax
  800420ba60:	0f b6 00             	movzbl (%rax),%eax
  800420ba63:	0f b6 c0             	movzbl %al,%eax
  800420ba66:	48 c1 e0 08          	shl    $0x8,%rax
  800420ba6a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800420ba6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ba72:	0f b6 00             	movzbl (%rax),%eax
  800420ba75:	0f b6 c0             	movzbl %al,%eax
  800420ba78:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800420ba7c:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  800420ba7d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ba81:	48 8b 10             	mov    (%rax),%rdx
  800420ba84:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420ba87:	48 98                	cltq   
  800420ba89:	48 01 c2             	add    %rax,%rdx
  800420ba8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ba90:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800420ba93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ba97:	eb 05                	jmp    800420ba9e <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  800420ba99:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  800420ba9e:	c9                   	leaveq 
  800420ba9f:	c3                   	retq   

000000800420baa0 <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  800420baa0:	55                   	push   %rbp
  800420baa1:	48 89 e5             	mov    %rsp,%rbp
  800420baa4:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420baa8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420baac:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800420baaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bab3:	48 8b 00             	mov    (%rax),%rax
  800420bab6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800420baba:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420bac1:	00 
	switch (bytes_to_read) {
  800420bac2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420bac5:	83 f8 02             	cmp    $0x2,%eax
  800420bac8:	0f 84 ab 00 00 00    	je     800420bb79 <_dwarf_decode_lsb+0xd9>
  800420bace:	83 f8 02             	cmp    $0x2,%eax
  800420bad1:	7f 0e                	jg     800420bae1 <_dwarf_decode_lsb+0x41>
  800420bad3:	83 f8 01             	cmp    $0x1,%eax
  800420bad6:	0f 84 b3 00 00 00    	je     800420bb8f <_dwarf_decode_lsb+0xef>
  800420badc:	e9 d9 00 00 00       	jmpq   800420bbba <_dwarf_decode_lsb+0x11a>
  800420bae1:	83 f8 04             	cmp    $0x4,%eax
  800420bae4:	74 65                	je     800420bb4b <_dwarf_decode_lsb+0xab>
  800420bae6:	83 f8 08             	cmp    $0x8,%eax
  800420bae9:	0f 85 cb 00 00 00    	jne    800420bbba <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800420baef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420baf3:	48 83 c0 04          	add    $0x4,%rax
  800420baf7:	0f b6 00             	movzbl (%rax),%eax
  800420bafa:	0f b6 c0             	movzbl %al,%eax
  800420bafd:	48 c1 e0 20          	shl    $0x20,%rax
  800420bb01:	48 89 c2             	mov    %rax,%rdx
  800420bb04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bb08:	48 83 c0 05          	add    $0x5,%rax
  800420bb0c:	0f b6 00             	movzbl (%rax),%eax
  800420bb0f:	0f b6 c0             	movzbl %al,%eax
  800420bb12:	48 c1 e0 28          	shl    $0x28,%rax
  800420bb16:	48 09 d0             	or     %rdx,%rax
  800420bb19:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  800420bb1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bb21:	48 83 c0 06          	add    $0x6,%rax
  800420bb25:	0f b6 00             	movzbl (%rax),%eax
  800420bb28:	0f b6 c0             	movzbl %al,%eax
  800420bb2b:	48 c1 e0 30          	shl    $0x30,%rax
  800420bb2f:	48 89 c2             	mov    %rax,%rdx
  800420bb32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bb36:	48 83 c0 07          	add    $0x7,%rax
  800420bb3a:	0f b6 00             	movzbl (%rax),%eax
  800420bb3d:	0f b6 c0             	movzbl %al,%eax
  800420bb40:	48 c1 e0 38          	shl    $0x38,%rax
  800420bb44:	48 09 d0             	or     %rdx,%rax
  800420bb47:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  800420bb4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bb4f:	48 83 c0 02          	add    $0x2,%rax
  800420bb53:	0f b6 00             	movzbl (%rax),%eax
  800420bb56:	0f b6 c0             	movzbl %al,%eax
  800420bb59:	48 c1 e0 10          	shl    $0x10,%rax
  800420bb5d:	48 89 c2             	mov    %rax,%rdx
  800420bb60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bb64:	48 83 c0 03          	add    $0x3,%rax
  800420bb68:	0f b6 00             	movzbl (%rax),%eax
  800420bb6b:	0f b6 c0             	movzbl %al,%eax
  800420bb6e:	48 c1 e0 18          	shl    $0x18,%rax
  800420bb72:	48 09 d0             	or     %rdx,%rax
  800420bb75:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  800420bb79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bb7d:	48 83 c0 01          	add    $0x1,%rax
  800420bb81:	0f b6 00             	movzbl (%rax),%eax
  800420bb84:	0f b6 c0             	movzbl %al,%eax
  800420bb87:	48 c1 e0 08          	shl    $0x8,%rax
  800420bb8b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800420bb8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bb93:	0f b6 00             	movzbl (%rax),%eax
  800420bb96:	0f b6 c0             	movzbl %al,%eax
  800420bb99:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800420bb9d:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  800420bb9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bba2:	48 8b 10             	mov    (%rax),%rdx
  800420bba5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420bba8:	48 98                	cltq   
  800420bbaa:	48 01 c2             	add    %rax,%rdx
  800420bbad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bbb1:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800420bbb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420bbb8:	eb 05                	jmp    800420bbbf <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  800420bbba:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  800420bbbf:	c9                   	leaveq 
  800420bbc0:	c3                   	retq   

000000800420bbc1 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  800420bbc1:	55                   	push   %rbp
  800420bbc2:	48 89 e5             	mov    %rsp,%rbp
  800420bbc5:	48 83 ec 24          	sub    $0x24,%rsp
  800420bbc9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420bbcd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420bbd1:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  800420bbd4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420bbd8:	48 8b 10             	mov    (%rax),%rdx
  800420bbdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bbdf:	48 01 d0             	add    %rdx,%rax
  800420bbe2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  800420bbe6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420bbe9:	83 f8 02             	cmp    $0x2,%eax
  800420bbec:	74 35                	je     800420bc23 <_dwarf_read_msb+0x62>
  800420bbee:	83 f8 02             	cmp    $0x2,%eax
  800420bbf1:	7f 0a                	jg     800420bbfd <_dwarf_read_msb+0x3c>
  800420bbf3:	83 f8 01             	cmp    $0x1,%eax
  800420bbf6:	74 18                	je     800420bc10 <_dwarf_read_msb+0x4f>
  800420bbf8:	e9 53 01 00 00       	jmpq   800420bd50 <_dwarf_read_msb+0x18f>
  800420bbfd:	83 f8 04             	cmp    $0x4,%eax
  800420bc00:	74 49                	je     800420bc4b <_dwarf_read_msb+0x8a>
  800420bc02:	83 f8 08             	cmp    $0x8,%eax
  800420bc05:	0f 84 96 00 00 00    	je     800420bca1 <_dwarf_read_msb+0xe0>
  800420bc0b:	e9 40 01 00 00       	jmpq   800420bd50 <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  800420bc10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bc14:	0f b6 00             	movzbl (%rax),%eax
  800420bc17:	0f b6 c0             	movzbl %al,%eax
  800420bc1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800420bc1e:	e9 34 01 00 00       	jmpq   800420bd57 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  800420bc23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bc27:	48 83 c0 01          	add    $0x1,%rax
  800420bc2b:	0f b6 00             	movzbl (%rax),%eax
  800420bc2e:	0f b6 d0             	movzbl %al,%edx
  800420bc31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bc35:	0f b6 00             	movzbl (%rax),%eax
  800420bc38:	0f b6 c0             	movzbl %al,%eax
  800420bc3b:	48 c1 e0 08          	shl    $0x8,%rax
  800420bc3f:	48 09 d0             	or     %rdx,%rax
  800420bc42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800420bc46:	e9 0c 01 00 00       	jmpq   800420bd57 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  800420bc4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bc4f:	48 83 c0 03          	add    $0x3,%rax
  800420bc53:	0f b6 00             	movzbl (%rax),%eax
  800420bc56:	0f b6 c0             	movzbl %al,%eax
  800420bc59:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420bc5d:	48 83 c2 02          	add    $0x2,%rdx
  800420bc61:	0f b6 12             	movzbl (%rdx),%edx
  800420bc64:	0f b6 d2             	movzbl %dl,%edx
  800420bc67:	48 c1 e2 08          	shl    $0x8,%rdx
  800420bc6b:	48 09 d0             	or     %rdx,%rax
  800420bc6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  800420bc72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bc76:	48 83 c0 01          	add    $0x1,%rax
  800420bc7a:	0f b6 00             	movzbl (%rax),%eax
  800420bc7d:	0f b6 c0             	movzbl %al,%eax
  800420bc80:	48 c1 e0 10          	shl    $0x10,%rax
  800420bc84:	48 89 c2             	mov    %rax,%rdx
  800420bc87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bc8b:	0f b6 00             	movzbl (%rax),%eax
  800420bc8e:	0f b6 c0             	movzbl %al,%eax
  800420bc91:	48 c1 e0 18          	shl    $0x18,%rax
  800420bc95:	48 09 d0             	or     %rdx,%rax
  800420bc98:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800420bc9c:	e9 b6 00 00 00       	jmpq   800420bd57 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800420bca1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bca5:	48 83 c0 07          	add    $0x7,%rax
  800420bca9:	0f b6 00             	movzbl (%rax),%eax
  800420bcac:	0f b6 c0             	movzbl %al,%eax
  800420bcaf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420bcb3:	48 83 c2 06          	add    $0x6,%rdx
  800420bcb7:	0f b6 12             	movzbl (%rdx),%edx
  800420bcba:	0f b6 d2             	movzbl %dl,%edx
  800420bcbd:	48 c1 e2 08          	shl    $0x8,%rdx
  800420bcc1:	48 09 d0             	or     %rdx,%rax
  800420bcc4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  800420bcc8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bccc:	48 83 c0 05          	add    $0x5,%rax
  800420bcd0:	0f b6 00             	movzbl (%rax),%eax
  800420bcd3:	0f b6 c0             	movzbl %al,%eax
  800420bcd6:	48 c1 e0 10          	shl    $0x10,%rax
  800420bcda:	48 89 c2             	mov    %rax,%rdx
  800420bcdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bce1:	48 83 c0 04          	add    $0x4,%rax
  800420bce5:	0f b6 00             	movzbl (%rax),%eax
  800420bce8:	0f b6 c0             	movzbl %al,%eax
  800420bceb:	48 c1 e0 18          	shl    $0x18,%rax
  800420bcef:	48 09 d0             	or     %rdx,%rax
  800420bcf2:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  800420bcf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bcfa:	48 83 c0 03          	add    $0x3,%rax
  800420bcfe:	0f b6 00             	movzbl (%rax),%eax
  800420bd01:	0f b6 c0             	movzbl %al,%eax
  800420bd04:	48 c1 e0 20          	shl    $0x20,%rax
  800420bd08:	48 89 c2             	mov    %rax,%rdx
  800420bd0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bd0f:	48 83 c0 02          	add    $0x2,%rax
  800420bd13:	0f b6 00             	movzbl (%rax),%eax
  800420bd16:	0f b6 c0             	movzbl %al,%eax
  800420bd19:	48 c1 e0 28          	shl    $0x28,%rax
  800420bd1d:	48 09 d0             	or     %rdx,%rax
  800420bd20:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  800420bd24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bd28:	48 83 c0 01          	add    $0x1,%rax
  800420bd2c:	0f b6 00             	movzbl (%rax),%eax
  800420bd2f:	0f b6 c0             	movzbl %al,%eax
  800420bd32:	48 c1 e0 30          	shl    $0x30,%rax
  800420bd36:	48 89 c2             	mov    %rax,%rdx
  800420bd39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bd3d:	0f b6 00             	movzbl (%rax),%eax
  800420bd40:	0f b6 c0             	movzbl %al,%eax
  800420bd43:	48 c1 e0 38          	shl    $0x38,%rax
  800420bd47:	48 09 d0             	or     %rdx,%rax
  800420bd4a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800420bd4e:	eb 07                	jmp    800420bd57 <_dwarf_read_msb+0x196>
	default:
		return (0);
  800420bd50:	b8 00 00 00 00       	mov    $0x0,%eax
  800420bd55:	eb 1a                	jmp    800420bd71 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  800420bd57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420bd5b:	48 8b 10             	mov    (%rax),%rdx
  800420bd5e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420bd61:	48 98                	cltq   
  800420bd63:	48 01 c2             	add    %rax,%rdx
  800420bd66:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420bd6a:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800420bd6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420bd71:	c9                   	leaveq 
  800420bd72:	c3                   	retq   

000000800420bd73 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  800420bd73:	55                   	push   %rbp
  800420bd74:	48 89 e5             	mov    %rsp,%rbp
  800420bd77:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420bd7b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420bd7f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800420bd82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bd86:	48 8b 00             	mov    (%rax),%rax
  800420bd89:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800420bd8d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420bd94:	00 
	switch (bytes_to_read) {
  800420bd95:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420bd98:	83 f8 02             	cmp    $0x2,%eax
  800420bd9b:	74 35                	je     800420bdd2 <_dwarf_decode_msb+0x5f>
  800420bd9d:	83 f8 02             	cmp    $0x2,%eax
  800420bda0:	7f 0a                	jg     800420bdac <_dwarf_decode_msb+0x39>
  800420bda2:	83 f8 01             	cmp    $0x1,%eax
  800420bda5:	74 18                	je     800420bdbf <_dwarf_decode_msb+0x4c>
  800420bda7:	e9 53 01 00 00       	jmpq   800420beff <_dwarf_decode_msb+0x18c>
  800420bdac:	83 f8 04             	cmp    $0x4,%eax
  800420bdaf:	74 49                	je     800420bdfa <_dwarf_decode_msb+0x87>
  800420bdb1:	83 f8 08             	cmp    $0x8,%eax
  800420bdb4:	0f 84 96 00 00 00    	je     800420be50 <_dwarf_decode_msb+0xdd>
  800420bdba:	e9 40 01 00 00       	jmpq   800420beff <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  800420bdbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bdc3:	0f b6 00             	movzbl (%rax),%eax
  800420bdc6:	0f b6 c0             	movzbl %al,%eax
  800420bdc9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800420bdcd:	e9 34 01 00 00       	jmpq   800420bf06 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  800420bdd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bdd6:	48 83 c0 01          	add    $0x1,%rax
  800420bdda:	0f b6 00             	movzbl (%rax),%eax
  800420bddd:	0f b6 d0             	movzbl %al,%edx
  800420bde0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bde4:	0f b6 00             	movzbl (%rax),%eax
  800420bde7:	0f b6 c0             	movzbl %al,%eax
  800420bdea:	48 c1 e0 08          	shl    $0x8,%rax
  800420bdee:	48 09 d0             	or     %rdx,%rax
  800420bdf1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800420bdf5:	e9 0c 01 00 00       	jmpq   800420bf06 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  800420bdfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bdfe:	48 83 c0 03          	add    $0x3,%rax
  800420be02:	0f b6 00             	movzbl (%rax),%eax
  800420be05:	0f b6 c0             	movzbl %al,%eax
  800420be08:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420be0c:	48 83 c2 02          	add    $0x2,%rdx
  800420be10:	0f b6 12             	movzbl (%rdx),%edx
  800420be13:	0f b6 d2             	movzbl %dl,%edx
  800420be16:	48 c1 e2 08          	shl    $0x8,%rdx
  800420be1a:	48 09 d0             	or     %rdx,%rax
  800420be1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  800420be21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420be25:	48 83 c0 01          	add    $0x1,%rax
  800420be29:	0f b6 00             	movzbl (%rax),%eax
  800420be2c:	0f b6 c0             	movzbl %al,%eax
  800420be2f:	48 c1 e0 10          	shl    $0x10,%rax
  800420be33:	48 89 c2             	mov    %rax,%rdx
  800420be36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420be3a:	0f b6 00             	movzbl (%rax),%eax
  800420be3d:	0f b6 c0             	movzbl %al,%eax
  800420be40:	48 c1 e0 18          	shl    $0x18,%rax
  800420be44:	48 09 d0             	or     %rdx,%rax
  800420be47:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800420be4b:	e9 b6 00 00 00       	jmpq   800420bf06 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800420be50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420be54:	48 83 c0 07          	add    $0x7,%rax
  800420be58:	0f b6 00             	movzbl (%rax),%eax
  800420be5b:	0f b6 c0             	movzbl %al,%eax
  800420be5e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420be62:	48 83 c2 06          	add    $0x6,%rdx
  800420be66:	0f b6 12             	movzbl (%rdx),%edx
  800420be69:	0f b6 d2             	movzbl %dl,%edx
  800420be6c:	48 c1 e2 08          	shl    $0x8,%rdx
  800420be70:	48 09 d0             	or     %rdx,%rax
  800420be73:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  800420be77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420be7b:	48 83 c0 05          	add    $0x5,%rax
  800420be7f:	0f b6 00             	movzbl (%rax),%eax
  800420be82:	0f b6 c0             	movzbl %al,%eax
  800420be85:	48 c1 e0 10          	shl    $0x10,%rax
  800420be89:	48 89 c2             	mov    %rax,%rdx
  800420be8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420be90:	48 83 c0 04          	add    $0x4,%rax
  800420be94:	0f b6 00             	movzbl (%rax),%eax
  800420be97:	0f b6 c0             	movzbl %al,%eax
  800420be9a:	48 c1 e0 18          	shl    $0x18,%rax
  800420be9e:	48 09 d0             	or     %rdx,%rax
  800420bea1:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  800420bea5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bea9:	48 83 c0 03          	add    $0x3,%rax
  800420bead:	0f b6 00             	movzbl (%rax),%eax
  800420beb0:	0f b6 c0             	movzbl %al,%eax
  800420beb3:	48 c1 e0 20          	shl    $0x20,%rax
  800420beb7:	48 89 c2             	mov    %rax,%rdx
  800420beba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bebe:	48 83 c0 02          	add    $0x2,%rax
  800420bec2:	0f b6 00             	movzbl (%rax),%eax
  800420bec5:	0f b6 c0             	movzbl %al,%eax
  800420bec8:	48 c1 e0 28          	shl    $0x28,%rax
  800420becc:	48 09 d0             	or     %rdx,%rax
  800420becf:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  800420bed3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420bed7:	48 83 c0 01          	add    $0x1,%rax
  800420bedb:	0f b6 00             	movzbl (%rax),%eax
  800420bede:	0f b6 c0             	movzbl %al,%eax
  800420bee1:	48 c1 e0 30          	shl    $0x30,%rax
  800420bee5:	48 89 c2             	mov    %rax,%rdx
  800420bee8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420beec:	0f b6 00             	movzbl (%rax),%eax
  800420beef:	0f b6 c0             	movzbl %al,%eax
  800420bef2:	48 c1 e0 38          	shl    $0x38,%rax
  800420bef6:	48 09 d0             	or     %rdx,%rax
  800420bef9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800420befd:	eb 07                	jmp    800420bf06 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  800420beff:	b8 00 00 00 00       	mov    $0x0,%eax
  800420bf04:	eb 1a                	jmp    800420bf20 <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  800420bf06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bf0a:	48 8b 10             	mov    (%rax),%rdx
  800420bf0d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420bf10:	48 98                	cltq   
  800420bf12:	48 01 c2             	add    %rax,%rdx
  800420bf15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bf19:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800420bf1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420bf20:	c9                   	leaveq 
  800420bf21:	c3                   	retq   

000000800420bf22 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  800420bf22:	55                   	push   %rbp
  800420bf23:	48 89 e5             	mov    %rsp,%rbp
  800420bf26:	48 83 ec 30          	sub    $0x30,%rsp
  800420bf2a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420bf2e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  800420bf32:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420bf39:	00 
	uint8_t b;
	int shift = 0;
  800420bf3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  800420bf41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420bf45:	48 8b 10             	mov    (%rax),%rdx
  800420bf48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420bf4c:	48 01 d0             	add    %rdx,%rax
  800420bf4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800420bf53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bf57:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420bf5b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420bf5f:	0f b6 00             	movzbl (%rax),%eax
  800420bf62:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800420bf65:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420bf69:	83 e0 7f             	and    $0x7f,%eax
  800420bf6c:	89 c2                	mov    %eax,%edx
  800420bf6e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420bf71:	89 c1                	mov    %eax,%ecx
  800420bf73:	d3 e2                	shl    %cl,%edx
  800420bf75:	89 d0                	mov    %edx,%eax
  800420bf77:	48 98                	cltq   
  800420bf79:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  800420bf7d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420bf81:	48 8b 00             	mov    (%rax),%rax
  800420bf84:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420bf88:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420bf8c:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  800420bf8f:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800420bf93:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420bf97:	84 c0                	test   %al,%al
  800420bf99:	78 b8                	js     800420bf53 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  800420bf9b:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800420bf9f:	7f 1f                	jg     800420bfc0 <_dwarf_read_sleb128+0x9e>
  800420bfa1:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420bfa5:	83 e0 40             	and    $0x40,%eax
  800420bfa8:	85 c0                	test   %eax,%eax
  800420bfaa:	74 14                	je     800420bfc0 <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  800420bfac:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420bfaf:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  800420bfb4:	89 c1                	mov    %eax,%ecx
  800420bfb6:	d3 e2                	shl    %cl,%edx
  800420bfb8:	89 d0                	mov    %edx,%eax
  800420bfba:	48 98                	cltq   
  800420bfbc:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  800420bfc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420bfc4:	c9                   	leaveq 
  800420bfc5:	c3                   	retq   

000000800420bfc6 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  800420bfc6:	55                   	push   %rbp
  800420bfc7:	48 89 e5             	mov    %rsp,%rbp
  800420bfca:	48 83 ec 30          	sub    $0x30,%rsp
  800420bfce:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420bfd2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  800420bfd6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420bfdd:	00 
	uint8_t b;
	int shift = 0;
  800420bfde:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  800420bfe5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420bfe9:	48 8b 10             	mov    (%rax),%rdx
  800420bfec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420bff0:	48 01 d0             	add    %rdx,%rax
  800420bff3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800420bff7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420bffb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420bfff:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420c003:	0f b6 00             	movzbl (%rax),%eax
  800420c006:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800420c009:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420c00d:	83 e0 7f             	and    $0x7f,%eax
  800420c010:	89 c2                	mov    %eax,%edx
  800420c012:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420c015:	89 c1                	mov    %eax,%ecx
  800420c017:	d3 e2                	shl    %cl,%edx
  800420c019:	89 d0                	mov    %edx,%eax
  800420c01b:	48 98                	cltq   
  800420c01d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  800420c021:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420c025:	48 8b 00             	mov    (%rax),%rax
  800420c028:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420c02c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420c030:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  800420c033:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800420c037:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420c03b:	84 c0                	test   %al,%al
  800420c03d:	78 b8                	js     800420bff7 <_dwarf_read_uleb128+0x31>

	return (ret);
  800420c03f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420c043:	c9                   	leaveq 
  800420c044:	c3                   	retq   

000000800420c045 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  800420c045:	55                   	push   %rbp
  800420c046:	48 89 e5             	mov    %rsp,%rbp
  800420c049:	48 83 ec 28          	sub    $0x28,%rsp
  800420c04d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  800420c051:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420c058:	00 
	uint8_t b;
	int shift = 0;
  800420c059:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  800420c060:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c064:	48 8b 00             	mov    (%rax),%rax
  800420c067:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800420c06b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c06f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420c073:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420c077:	0f b6 00             	movzbl (%rax),%eax
  800420c07a:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800420c07d:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420c081:	83 e0 7f             	and    $0x7f,%eax
  800420c084:	89 c2                	mov    %eax,%edx
  800420c086:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420c089:	89 c1                	mov    %eax,%ecx
  800420c08b:	d3 e2                	shl    %cl,%edx
  800420c08d:	89 d0                	mov    %edx,%eax
  800420c08f:	48 98                	cltq   
  800420c091:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  800420c095:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800420c099:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420c09d:	84 c0                	test   %al,%al
  800420c09f:	78 ca                	js     800420c06b <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  800420c0a1:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800420c0a5:	7f 1f                	jg     800420c0c6 <_dwarf_decode_sleb128+0x81>
  800420c0a7:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420c0ab:	83 e0 40             	and    $0x40,%eax
  800420c0ae:	85 c0                	test   %eax,%eax
  800420c0b0:	74 14                	je     800420c0c6 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  800420c0b2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420c0b5:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  800420c0ba:	89 c1                	mov    %eax,%ecx
  800420c0bc:	d3 e2                	shl    %cl,%edx
  800420c0be:	89 d0                	mov    %edx,%eax
  800420c0c0:	48 98                	cltq   
  800420c0c2:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  800420c0c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c0ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420c0ce:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800420c0d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420c0d5:	c9                   	leaveq 
  800420c0d6:	c3                   	retq   

000000800420c0d7 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  800420c0d7:	55                   	push   %rbp
  800420c0d8:	48 89 e5             	mov    %rsp,%rbp
  800420c0db:	48 83 ec 28          	sub    $0x28,%rsp
  800420c0df:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  800420c0e3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420c0ea:	00 
	uint8_t b;
	int shift = 0;
  800420c0eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  800420c0f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c0f6:	48 8b 00             	mov    (%rax),%rax
  800420c0f9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800420c0fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c101:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420c105:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420c109:	0f b6 00             	movzbl (%rax),%eax
  800420c10c:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800420c10f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420c113:	83 e0 7f             	and    $0x7f,%eax
  800420c116:	89 c2                	mov    %eax,%edx
  800420c118:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420c11b:	89 c1                	mov    %eax,%ecx
  800420c11d:	d3 e2                	shl    %cl,%edx
  800420c11f:	89 d0                	mov    %edx,%eax
  800420c121:	48 98                	cltq   
  800420c123:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  800420c127:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800420c12b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420c12f:	84 c0                	test   %al,%al
  800420c131:	78 ca                	js     800420c0fd <_dwarf_decode_uleb128+0x26>

	*dp = src;
  800420c133:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c137:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420c13b:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800420c13e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420c142:	c9                   	leaveq 
  800420c143:	c3                   	retq   

000000800420c144 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  800420c144:	55                   	push   %rbp
  800420c145:	48 89 e5             	mov    %rsp,%rbp
  800420c148:	48 83 ec 28          	sub    $0x28,%rsp
  800420c14c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c150:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420c154:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  800420c158:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c15c:	48 8b 10             	mov    (%rax),%rdx
  800420c15f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c163:	48 01 d0             	add    %rdx,%rax
  800420c166:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420c16a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c16e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  800420c172:	eb 17                	jmp    800420c18b <_dwarf_read_string+0x47>
		src++;
  800420c174:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  800420c179:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c17d:	48 8b 00             	mov    (%rax),%rax
  800420c180:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420c184:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c188:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  800420c18b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c18f:	0f b6 00             	movzbl (%rax),%eax
  800420c192:	84 c0                	test   %al,%al
  800420c194:	74 0d                	je     800420c1a3 <_dwarf_read_string+0x5f>
  800420c196:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c19a:	48 8b 00             	mov    (%rax),%rax
  800420c19d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800420c1a1:	72 d1                	jb     800420c174 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  800420c1a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c1a7:	0f b6 00             	movzbl (%rax),%eax
  800420c1aa:	84 c0                	test   %al,%al
  800420c1ac:	75 1f                	jne    800420c1cd <_dwarf_read_string+0x89>
  800420c1ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c1b2:	48 8b 00             	mov    (%rax),%rax
  800420c1b5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800420c1b9:	73 12                	jae    800420c1cd <_dwarf_read_string+0x89>
		(*offsetp)++;
  800420c1bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c1bf:	48 8b 00             	mov    (%rax),%rax
  800420c1c2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420c1c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c1ca:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800420c1cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  800420c1d1:	c9                   	leaveq 
  800420c1d2:	c3                   	retq   

000000800420c1d3 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  800420c1d3:	55                   	push   %rbp
  800420c1d4:	48 89 e5             	mov    %rsp,%rbp
  800420c1d7:	48 83 ec 28          	sub    $0x28,%rsp
  800420c1db:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c1df:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420c1e3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  800420c1e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c1eb:	48 8b 10             	mov    (%rax),%rdx
  800420c1ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c1f2:	48 01 d0             	add    %rdx,%rax
  800420c1f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420c1f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c1fd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  800420c201:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c205:	48 8b 10             	mov    (%rax),%rdx
  800420c208:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c20c:	48 01 c2             	add    %rax,%rdx
  800420c20f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c213:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800420c216:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  800420c21a:	c9                   	leaveq 
  800420c21b:	c3                   	retq   

000000800420c21c <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  800420c21c:	55                   	push   %rbp
  800420c21d:	48 89 e5             	mov    %rsp,%rbp
  800420c220:	48 83 ec 20          	sub    $0x20,%rsp
  800420c224:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  800420c228:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c22c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  800420c230:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420c235:	75 35                	jne    800420c26c <_dwarf_elf_get_byte_order+0x50>
  800420c237:	48 b9 40 36 21 04 80 	movabs $0x8004213640,%rcx
  800420c23e:	00 00 00 
  800420c241:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420c248:	00 00 00 
  800420c24b:	be 29 01 00 00       	mov    $0x129,%esi
  800420c250:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420c257:	00 00 00 
  800420c25a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c25f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420c266:	00 00 00 
  800420c269:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  800420c26c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c270:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  800420c274:	0f b6 c0             	movzbl %al,%eax
  800420c277:	83 f8 02             	cmp    $0x2,%eax
  800420c27a:	75 07                	jne    800420c283 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  800420c27c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c281:	eb 05                	jmp    800420c288 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  800420c283:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  800420c288:	c9                   	leaveq 
  800420c289:	c3                   	retq   

000000800420c28a <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  800420c28a:	55                   	push   %rbp
  800420c28b:	48 89 e5             	mov    %rsp,%rbp
  800420c28e:	48 83 ec 20          	sub    $0x20,%rsp
  800420c292:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  800420c296:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c29a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  800420c29e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420c2a3:	75 35                	jne    800420c2da <_dwarf_elf_get_pointer_size+0x50>
  800420c2a5:	48 b9 40 36 21 04 80 	movabs $0x8004213640,%rcx
  800420c2ac:	00 00 00 
  800420c2af:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420c2b6:	00 00 00 
  800420c2b9:	be 3f 01 00 00       	mov    $0x13f,%esi
  800420c2be:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420c2c5:	00 00 00 
  800420c2c8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c2cd:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420c2d4:	00 00 00 
  800420c2d7:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  800420c2da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c2de:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  800420c2e2:	3c 01                	cmp    $0x1,%al
  800420c2e4:	75 07                	jne    800420c2ed <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  800420c2e6:	b8 04 00 00 00       	mov    $0x4,%eax
  800420c2eb:	eb 05                	jmp    800420c2f2 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  800420c2ed:	b8 08 00 00 00       	mov    $0x8,%eax
}
  800420c2f2:	c9                   	leaveq 
  800420c2f3:	c3                   	retq   

000000800420c2f4 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  800420c2f4:	55                   	push   %rbp
  800420c2f5:	48 89 e5             	mov    %rsp,%rbp
  800420c2f8:	53                   	push   %rbx
  800420c2f9:	48 83 ec 18          	sub    $0x18,%rsp
  800420c2fd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c301:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  800420c305:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c309:	ba 60 00 00 00       	mov    $0x60,%edx
  800420c30e:	be 00 00 00 00       	mov    $0x0,%esi
  800420c313:	48 89 c7             	mov    %rax,%rdi
  800420c316:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420c31d:	00 00 00 
  800420c320:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  800420c322:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c326:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  800420c32d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c331:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800420c338:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  800420c339:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c33d:	48 89 c7             	mov    %rax,%rdi
  800420c340:	48 b8 8a c2 20 04 80 	movabs $0x800420c28a,%rax
  800420c347:	00 00 00 
  800420c34a:	ff d0                	callq  *%rax
  800420c34c:	0f b6 d0             	movzbl %al,%edx
  800420c34f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c353:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  800420c356:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c35a:	48 89 c7             	mov    %rax,%rdi
  800420c35d:	48 b8 1c c2 20 04 80 	movabs $0x800420c21c,%rax
  800420c364:	00 00 00 
  800420c367:	ff d0                	callq  *%rax
  800420c369:	85 c0                	test   %eax,%eax
  800420c36b:	75 26                	jne    800420c393 <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  800420c36d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c371:	48 b9 c1 bb 20 04 80 	movabs $0x800420bbc1,%rcx
  800420c378:	00 00 00 
  800420c37b:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  800420c37f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c383:	48 bb 73 bd 20 04 80 	movabs $0x800420bd73,%rbx
  800420c38a:	00 00 00 
  800420c38d:	48 89 58 20          	mov    %rbx,0x20(%rax)
  800420c391:	eb 24                	jmp    800420c3b7 <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  800420c393:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c397:	48 b9 74 b9 20 04 80 	movabs $0x800420b974,%rcx
  800420c39e:	00 00 00 
  800420c3a1:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  800420c3a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3a9:	48 be a0 ba 20 04 80 	movabs $0x800420baa0,%rsi
  800420c3b0:	00 00 00 
  800420c3b3:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  800420c3b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3bb:	48 89 c7             	mov    %rax,%rdi
  800420c3be:	48 b8 c1 d8 20 04 80 	movabs $0x800420d8c1,%rax
  800420c3c5:	00 00 00 
  800420c3c8:	ff d0                	callq  *%rax
	return 0;
  800420c3ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420c3cf:	48 83 c4 18          	add    $0x18,%rsp
  800420c3d3:	5b                   	pop    %rbx
  800420c3d4:	5d                   	pop    %rbp
  800420c3d5:	c3                   	retq   

000000800420c3d6 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  800420c3d6:	55                   	push   %rbp
  800420c3d7:	48 89 e5             	mov    %rsp,%rbp
  800420c3da:	48 83 ec 20          	sub    $0x20,%rsp
  800420c3de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c3e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  800420c3e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3ea:	48 8b 10             	mov    (%rax),%rdx
  800420c3ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3f1:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420c3f5:	48 39 c2             	cmp    %rax,%rdx
  800420c3f8:	76 0a                	jbe    800420c404 <_get_next_cu+0x2e>
		return -1;
  800420c3fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420c3ff:	e9 6b 01 00 00       	jmpq   800420c56f <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  800420c404:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c408:	48 8b 00             	mov    (%rax),%rax
  800420c40b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  800420c40f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420c413:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c417:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  800420c41b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c41f:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c423:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420c427:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420c42b:	48 89 d1             	mov    %rdx,%rcx
  800420c42e:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800420c432:	ba 04 00 00 00       	mov    $0x4,%edx
  800420c437:	48 89 cf             	mov    %rcx,%rdi
  800420c43a:	ff d0                	callq  *%rax
  800420c43c:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  800420c43f:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  800420c443:	75 2a                	jne    800420c46f <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  800420c445:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c449:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c44d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420c451:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420c455:	48 89 d1             	mov    %rdx,%rcx
  800420c458:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800420c45c:	ba 08 00 00 00       	mov    $0x8,%edx
  800420c461:	48 89 cf             	mov    %rcx,%rdi
  800420c464:	ff d0                	callq  *%rax
  800420c466:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  800420c469:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  800420c46d:	eb 04                	jmp    800420c473 <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  800420c46f:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  800420c473:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c477:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  800420c47b:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  800420c47e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420c481:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420c485:	48 01 c2             	add    %rax,%rdx
  800420c488:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c48c:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  800420c48f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c493:	48 8b 10             	mov    (%rax),%rdx
  800420c496:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c49a:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  800420c49e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420c4a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c4a5:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  800420c4a8:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  800420c4ac:	75 07                	jne    800420c4b5 <_get_next_cu+0xdf>
  800420c4ae:	b8 04 00 00 00       	mov    $0x4,%eax
  800420c4b3:	eb 05                	jmp    800420c4ba <_get_next_cu+0xe4>
  800420c4b5:	b8 0c 00 00 00       	mov    $0xc,%eax
  800420c4ba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420c4be:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  800420c4c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4c5:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c4c9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420c4cd:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420c4d1:	48 89 d1             	mov    %rdx,%rcx
  800420c4d4:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800420c4d8:	ba 02 00 00 00       	mov    $0x2,%edx
  800420c4dd:	48 89 cf             	mov    %rcx,%rdi
  800420c4e0:	ff d0                	callq  *%rax
  800420c4e2:	89 c2                	mov    %eax,%edx
  800420c4e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c4e8:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  800420c4ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4f0:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c4f4:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  800420c4f8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420c4fc:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  800420c500:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800420c504:	48 89 cf             	mov    %rcx,%rdi
  800420c507:	ff d0                	callq  *%rax
  800420c509:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420c50d:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  800420c511:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c515:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c519:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420c51d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420c521:	48 89 d1             	mov    %rdx,%rcx
  800420c524:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  800420c528:	ba 01 00 00 00       	mov    $0x1,%edx
  800420c52d:	48 89 cf             	mov    %rcx,%rdi
  800420c530:	ff d0                	callq  *%rax
  800420c532:	89 c2                	mov    %eax,%edx
  800420c534:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c538:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  800420c53b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c53f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420c543:	66 83 f8 01          	cmp    $0x1,%ax
  800420c547:	76 0e                	jbe    800420c557 <_get_next_cu+0x181>
  800420c549:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c54d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420c551:	66 83 f8 04          	cmp    $0x4,%ax
  800420c555:	76 07                	jbe    800420c55e <_get_next_cu+0x188>
		return -1;
  800420c557:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420c55c:	eb 11                	jmp    800420c56f <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  800420c55e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420c562:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c566:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  800420c56a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420c56f:	c9                   	leaveq 
  800420c570:	c3                   	retq   

000000800420c571 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  800420c571:	55                   	push   %rbp
  800420c572:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  800420c575:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  800420c579:	0f b6 c8             	movzbl %al,%ecx
  800420c57c:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  800420c580:	0f b7 d0             	movzwl %ax,%edx
  800420c583:	48 8b 45 10          	mov    0x10(%rbp),%rax
  800420c587:	48 89 c6             	mov    %rax,%rsi
  800420c58a:	48 bf 72 36 21 04 80 	movabs $0x8004213672,%rdi
  800420c591:	00 00 00 
  800420c594:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c599:	49 b8 d6 76 20 04 80 	movabs $0x80042076d6,%r8
  800420c5a0:	00 00 00 
  800420c5a3:	41 ff d0             	callq  *%r8
}
  800420c5a6:	5d                   	pop    %rbp
  800420c5a7:	c3                   	retq   

000000800420c5a8 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  800420c5a8:	55                   	push   %rbp
  800420c5a9:	48 89 e5             	mov    %rsp,%rbp
  800420c5ac:	48 83 ec 60          	sub    $0x60,%rsp
  800420c5b0:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420c5b4:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420c5b8:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  800420c5bc:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  800420c5c0:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  800420c5c5:	75 35                	jne    800420c5fc <_dwarf_abbrev_parse+0x54>
  800420c5c7:	48 b9 81 36 21 04 80 	movabs $0x8004213681,%rcx
  800420c5ce:	00 00 00 
  800420c5d1:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420c5d8:	00 00 00 
  800420c5db:	be a4 01 00 00       	mov    $0x1a4,%esi
  800420c5e0:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420c5e7:	00 00 00 
  800420c5ea:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5ef:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420c5f6:	00 00 00 
  800420c5f9:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  800420c5fc:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  800420c601:	75 35                	jne    800420c638 <_dwarf_abbrev_parse+0x90>
  800420c603:	48 b9 8d 36 21 04 80 	movabs $0x800421368d,%rcx
  800420c60a:	00 00 00 
  800420c60d:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420c614:	00 00 00 
  800420c617:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420c61c:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420c623:	00 00 00 
  800420c626:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c62b:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420c632:	00 00 00 
  800420c635:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  800420c638:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420c63c:	48 8b 10             	mov    (%rax),%rdx
  800420c63f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420c643:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c647:	48 39 c2             	cmp    %rax,%rdx
  800420c64a:	72 0a                	jb     800420c656 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  800420c64c:	b8 04 00 00 00       	mov    $0x4,%eax
  800420c651:	e9 d3 01 00 00       	jmpq   800420c829 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  800420c656:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420c65a:	48 8b 00             	mov    (%rax),%rax
  800420c65d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  800420c661:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420c665:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420c669:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800420c66d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420c671:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420c675:	48 89 d6             	mov    %rdx,%rsi
  800420c678:	48 89 c7             	mov    %rax,%rdi
  800420c67b:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420c682:	00 00 00 
  800420c685:	ff d0                	callq  *%rax
  800420c687:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  800420c68b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420c690:	75 15                	jne    800420c6a7 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  800420c692:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c696:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  800420c69d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6a2:	e9 82 01 00 00       	jmpq   800420c829 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800420c6a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420c6ab:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420c6af:	48 89 d6             	mov    %rdx,%rsi
  800420c6b2:	48 89 c7             	mov    %rax,%rdi
  800420c6b5:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420c6bc:	00 00 00 
  800420c6bf:	ff d0                	callq  *%rax
  800420c6c1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  800420c6c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420c6c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c6cd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800420c6d1:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420c6d5:	ba 01 00 00 00       	mov    $0x1,%edx
  800420c6da:	48 89 cf             	mov    %rcx,%rdi
  800420c6dd:	ff d0                	callq  *%rax
  800420c6df:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  800420c6e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c6e6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420c6ea:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  800420c6ed:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c6f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420c6f5:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  800420c6f9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c6fd:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  800420c701:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  800420c704:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c708:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420c70c:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  800420c710:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c714:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  800420c71b:	00 
	abp->ab_atnum    = 0;
  800420c71c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c720:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  800420c727:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  800420c728:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420c72c:	48 8b 00             	mov    (%rax),%rax
  800420c72f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800420c733:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420c737:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420c73b:	48 89 d6             	mov    %rdx,%rsi
  800420c73e:	48 89 c7             	mov    %rax,%rdi
  800420c741:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420c748:	00 00 00 
  800420c74b:	ff d0                	callq  *%rax
  800420c74d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800420c751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420c755:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420c759:	48 89 d6             	mov    %rdx,%rsi
  800420c75c:	48 89 c7             	mov    %rax,%rdi
  800420c75f:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420c766:	00 00 00 
  800420c769:	ff d0                	callq  *%rax
  800420c76b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  800420c76f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420c774:	0f 84 89 00 00 00    	je     800420c803 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  800420c77a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c77e:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420c782:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  800420c786:	48 89 d0             	mov    %rdx,%rax
  800420c789:	48 01 c0             	add    %rax,%rax
  800420c78c:	48 01 d0             	add    %rdx,%rax
  800420c78f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c793:	48 01 c8             	add    %rcx,%rax
  800420c796:	48 8d 50 30          	lea    0x30(%rax),%rdx
  800420c79a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420c79e:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  800420c7a1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c7a5:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420c7a9:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  800420c7ad:	48 89 d0             	mov    %rdx,%rax
  800420c7b0:	48 01 c0             	add    %rax,%rax
  800420c7b3:	48 01 d0             	add    %rdx,%rax
  800420c7b6:	48 c1 e0 03          	shl    $0x3,%rax
  800420c7ba:	48 01 c8             	add    %rcx,%rax
  800420c7bd:	48 8d 50 38          	lea    0x38(%rax),%rdx
  800420c7c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420c7c5:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  800420c7c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c7cc:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420c7d0:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  800420c7d4:	48 89 d0             	mov    %rdx,%rax
  800420c7d7:	48 01 c0             	add    %rax,%rax
  800420c7da:	48 01 d0             	add    %rdx,%rax
  800420c7dd:	48 c1 e0 03          	shl    $0x3,%rax
  800420c7e1:	48 01 c8             	add    %rcx,%rax
  800420c7e4:	48 8d 50 40          	lea    0x40(%rax),%rdx
  800420c7e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420c7ec:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  800420c7ef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c7f3:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420c7f7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420c7fb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c7ff:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  800420c803:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420c808:	0f 85 1a ff ff ff    	jne    800420c728 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  800420c80e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420c812:	48 8b 00             	mov    (%rax),%rax
  800420c815:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  800420c819:	48 89 c2             	mov    %rax,%rdx
  800420c81c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420c820:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  800420c824:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420c829:	c9                   	leaveq 
  800420c82a:	c3                   	retq   

000000800420c82b <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  800420c82b:	55                   	push   %rbp
  800420c82c:	48 89 e5             	mov    %rsp,%rbp
  800420c82f:	48 83 ec 70          	sub    $0x70,%rsp
  800420c833:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420c837:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420c83b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  800420c83f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420c844:	75 0a                	jne    800420c850 <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  800420c846:	b8 04 00 00 00       	mov    $0x4,%eax
  800420c84b:	e9 0a 01 00 00       	jmpq   800420c95a <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  800420c850:	48 bf 98 36 21 04 80 	movabs $0x8004213698,%rdi
  800420c857:	00 00 00 
  800420c85a:	48 b8 8b 0b 21 04 80 	movabs $0x8004210b8b,%rax
  800420c861:	00 00 00 
  800420c864:	ff d0                	callq  *%rax
  800420c866:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  800420c86a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420c86f:	75 35                	jne    800420c8a6 <_dwarf_abbrev_find+0x7b>
  800420c871:	48 b9 8d 36 21 04 80 	movabs $0x800421368d,%rcx
  800420c878:	00 00 00 
  800420c87b:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420c882:	00 00 00 
  800420c885:	be e5 01 00 00       	mov    $0x1e5,%esi
  800420c88a:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420c891:	00 00 00 
  800420c894:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c899:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420c8a0:	00 00 00 
  800420c8a3:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  800420c8a6:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420c8aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  800420c8ae:	e9 8d 00 00 00       	jmpq   800420c940 <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  800420c8b3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  800420c8b7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420c8bb:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  800420c8bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420c8c3:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800420c8c7:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420c8cb:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  800420c8cf:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420c8d4:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  800420c8d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420c8dd:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  800420c8e1:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420c8e6:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  800420c8ea:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420c8ef:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  800420c8f3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420c8f8:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  800420c8fc:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  800420c901:	48 89 c7             	mov    %rax,%rdi
  800420c904:	48 b8 a8 c5 20 04 80 	movabs $0x800420c5a8,%rax
  800420c90b:	00 00 00 
  800420c90e:	ff d0                	callq  *%rax
  800420c910:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  800420c913:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800420c917:	74 05                	je     800420c91e <_dwarf_abbrev_find+0xf3>
			return (ret);
  800420c919:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420c91c:	eb 3c                	jmp    800420c95a <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  800420c91e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420c922:	48 8b 00             	mov    (%rax),%rax
  800420c925:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420c929:	75 07                	jne    800420c932 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  800420c92b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c930:	eb 28                	jmp    800420c95a <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  800420c932:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420c936:	48 8b 00             	mov    (%rax),%rax
  800420c939:	48 85 c0             	test   %rax,%rax
  800420c93c:	75 02                	jne    800420c940 <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  800420c93e:	eb 15                	jmp    800420c955 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  800420c940:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c944:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800420c948:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c94c:	48 39 c2             	cmp    %rax,%rdx
  800420c94f:	0f 87 5e ff ff ff    	ja     800420c8b3 <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  800420c955:	b8 04 00 00 00       	mov    $0x4,%eax
}
  800420c95a:	c9                   	leaveq 
  800420c95b:	c3                   	retq   

000000800420c95c <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  800420c95c:	55                   	push   %rbp
  800420c95d:	48 89 e5             	mov    %rsp,%rbp
  800420c960:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  800420c967:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420c96e:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  800420c975:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  800420c97c:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  800420c983:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  800420c98a:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  800420c991:	48 bf a6 36 21 04 80 	movabs $0x80042136a6,%rdi
  800420c998:	00 00 00 
  800420c99b:	48 b8 8b 0b 21 04 80 	movabs $0x8004210b8b,%rax
  800420c9a2:	00 00 00 
  800420c9a5:	ff d0                	callq  *%rax
  800420c9a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  800420c9ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420c9af:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420c9b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  800420c9b7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420c9be:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  800420c9c2:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  800420c9c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  800420c9cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800420c9d3:	ba 60 00 00 00       	mov    $0x60,%edx
  800420c9d8:	be 00 00 00 00       	mov    $0x0,%esi
  800420c9dd:	48 89 c7             	mov    %rax,%rdi
  800420c9e0:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420c9e7:	00 00 00 
  800420c9ea:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  800420c9ec:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420c9f3:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  800420c9fa:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420ca01:	48 8b 00             	mov    (%rax),%rax
  800420ca04:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  800420ca08:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420ca0f:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ca13:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  800420ca17:	8b 45 10             	mov    0x10(%rbp),%eax
  800420ca1a:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  800420ca1d:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420ca24:	00 

	switch (form) {
  800420ca25:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  800420ca2c:	20 
  800420ca2d:	0f 87 82 04 00 00    	ja     800420ceb5 <_dwarf_attr_init+0x559>
  800420ca33:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800420ca3a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420ca41:	00 
  800420ca42:	48 b8 d0 36 21 04 80 	movabs $0x80042136d0,%rax
  800420ca49:	00 00 00 
  800420ca4c:	48 01 d0             	add    %rdx,%rax
  800420ca4f:	48 8b 00             	mov    (%rax),%rax
  800420ca52:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  800420ca54:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420ca5b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420ca5f:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800420ca66:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  800420ca6a:	0f b6 d2             	movzbl %dl,%edx
  800420ca6d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420ca74:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420ca78:	48 89 cf             	mov    %rcx,%rdi
  800420ca7b:	ff d0                	callq  *%rax
  800420ca7d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420ca81:	e9 37 04 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  800420ca86:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800420ca8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca91:	48 89 d6             	mov    %rdx,%rsi
  800420ca94:	48 89 c7             	mov    %rax,%rdi
  800420ca97:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420ca9e:	00 00 00 
  800420caa1:	ff d0                	callq  *%rax
  800420caa3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800420caa7:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420caab:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800420cab2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cab6:	48 89 ce             	mov    %rcx,%rsi
  800420cab9:	48 89 c7             	mov    %rax,%rdi
  800420cabc:	48 b8 d3 c1 20 04 80 	movabs $0x800420c1d3,%rax
  800420cac3:	00 00 00 
  800420cac6:	ff d0                	callq  *%rax
  800420cac8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800420cacc:	e9 ec 03 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  800420cad1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cad8:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cadc:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cae3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cae7:	ba 01 00 00 00       	mov    $0x1,%edx
  800420caec:	48 89 cf             	mov    %rcx,%rdi
  800420caef:	ff d0                	callq  *%rax
  800420caf1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800420caf5:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420caf9:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800420cb00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb04:	48 89 ce             	mov    %rcx,%rsi
  800420cb07:	48 89 c7             	mov    %rax,%rdi
  800420cb0a:	48 b8 d3 c1 20 04 80 	movabs $0x800420c1d3,%rax
  800420cb11:	00 00 00 
  800420cb14:	ff d0                	callq  *%rax
  800420cb16:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800420cb1a:	e9 9e 03 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  800420cb1f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cb26:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cb2a:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cb31:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cb35:	ba 02 00 00 00       	mov    $0x2,%edx
  800420cb3a:	48 89 cf             	mov    %rcx,%rdi
  800420cb3d:	ff d0                	callq  *%rax
  800420cb3f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800420cb43:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420cb47:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800420cb4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb52:	48 89 ce             	mov    %rcx,%rsi
  800420cb55:	48 89 c7             	mov    %rax,%rdi
  800420cb58:	48 b8 d3 c1 20 04 80 	movabs $0x800420c1d3,%rax
  800420cb5f:	00 00 00 
  800420cb62:	ff d0                	callq  *%rax
  800420cb64:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800420cb68:	e9 50 03 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  800420cb6d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cb74:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cb78:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cb7f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cb83:	ba 04 00 00 00       	mov    $0x4,%edx
  800420cb88:	48 89 cf             	mov    %rcx,%rdi
  800420cb8b:	ff d0                	callq  *%rax
  800420cb8d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800420cb91:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420cb95:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800420cb9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cba0:	48 89 ce             	mov    %rcx,%rsi
  800420cba3:	48 89 c7             	mov    %rax,%rdi
  800420cba6:	48 b8 d3 c1 20 04 80 	movabs $0x800420c1d3,%rax
  800420cbad:	00 00 00 
  800420cbb0:	ff d0                	callq  *%rax
  800420cbb2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800420cbb6:	e9 02 03 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  800420cbbb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cbc2:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cbc6:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cbcd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cbd1:	ba 01 00 00 00       	mov    $0x1,%edx
  800420cbd6:	48 89 cf             	mov    %rcx,%rdi
  800420cbd9:	ff d0                	callq  *%rax
  800420cbdb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cbdf:	e9 d9 02 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  800420cbe4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cbeb:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cbef:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cbf6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cbfa:	ba 02 00 00 00       	mov    $0x2,%edx
  800420cbff:	48 89 cf             	mov    %rcx,%rdi
  800420cc02:	ff d0                	callq  *%rax
  800420cc04:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cc08:	e9 b0 02 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  800420cc0d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cc14:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cc18:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cc1f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cc23:	ba 04 00 00 00       	mov    $0x4,%edx
  800420cc28:	48 89 cf             	mov    %rcx,%rdi
  800420cc2b:	ff d0                	callq  *%rax
  800420cc2d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cc31:	e9 87 02 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  800420cc36:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cc3d:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cc41:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cc48:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cc4c:	ba 08 00 00 00       	mov    $0x8,%edx
  800420cc51:	48 89 cf             	mov    %rcx,%rdi
  800420cc54:	ff d0                	callq  *%rax
  800420cc56:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cc5a:	e9 5e 02 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  800420cc5f:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800420cc66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc6a:	48 89 d6             	mov    %rdx,%rsi
  800420cc6d:	48 89 c7             	mov    %rax,%rdi
  800420cc70:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420cc77:	00 00 00 
  800420cc7a:	ff d0                	callq  *%rax
  800420cc7c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  800420cc83:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  800420cc8a:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  800420cc91:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  800420cc98:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800420cc9f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cca6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420ccad:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  800420ccb4:	4d 89 c1             	mov    %r8,%r9
  800420ccb7:	49 89 f8             	mov    %rdi,%r8
  800420ccba:	48 89 c7             	mov    %rax,%rdi
  800420ccbd:	48 b8 5c c9 20 04 80 	movabs $0x800420c95c,%rax
  800420ccc4:	00 00 00 
  800420ccc7:	ff d0                	callq  *%rax
  800420ccc9:	e9 1d 03 00 00       	jmpq   800420cfeb <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  800420ccce:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420ccd5:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420ccd9:	66 83 f8 02          	cmp    $0x2,%ax
  800420ccdd:	75 2f                	jne    800420cd0e <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  800420ccdf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cce6:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420ccea:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800420ccf1:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  800420ccf5:	0f b6 d2             	movzbl %dl,%edx
  800420ccf8:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420ccff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cd03:	48 89 cf             	mov    %rcx,%rdi
  800420cd06:	ff d0                	callq  *%rax
  800420cd08:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420cd0c:	eb 39                	jmp    800420cd47 <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  800420cd0e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420cd15:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420cd19:	66 83 f8 03          	cmp    $0x3,%ax
  800420cd1d:	75 28                	jne    800420cd47 <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800420cd1f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cd26:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cd2a:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800420cd2e:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cd35:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cd39:	48 89 cf             	mov    %rcx,%rdi
  800420cd3c:	ff d0                	callq  *%rax
  800420cd3e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cd42:	e9 76 01 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
  800420cd47:	e9 71 01 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  800420cd4c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800420cd53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cd57:	48 89 d6             	mov    %rdx,%rsi
  800420cd5a:	48 89 c7             	mov    %rax,%rdi
  800420cd5d:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420cd64:	00 00 00 
  800420cd67:	ff d0                	callq  *%rax
  800420cd69:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cd6d:	e9 4b 01 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  800420cd72:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800420cd79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cd7d:	48 89 d6             	mov    %rdx,%rsi
  800420cd80:	48 89 c7             	mov    %rax,%rdi
  800420cd83:	48 b8 22 bf 20 04 80 	movabs $0x800420bf22,%rax
  800420cd8a:	00 00 00 
  800420cd8d:	ff d0                	callq  *%rax
  800420cd8f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cd93:	e9 25 01 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800420cd98:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cd9f:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cda3:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800420cda7:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420cdae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420cdb2:	48 89 cf             	mov    %rcx,%rdi
  800420cdb5:	ff d0                	callq  *%rax
  800420cdb7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cdbb:	e9 fd 00 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  800420cdc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420cdc4:	48 8b 48 18          	mov    0x18(%rax),%rcx
  800420cdc8:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800420cdcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cdd3:	48 89 ce             	mov    %rcx,%rsi
  800420cdd6:	48 89 c7             	mov    %rax,%rdi
  800420cdd9:	48 b8 44 c1 20 04 80 	movabs $0x800420c144,%rax
  800420cde0:	00 00 00 
  800420cde3:	ff d0                	callq  *%rax
  800420cde5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800420cde9:	e9 cf 00 00 00       	jmpq   800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800420cdee:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420cdf5:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cdf9:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800420cdfd:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800420ce04:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420ce08:	48 89 cf             	mov    %rcx,%rdi
  800420ce0b:	ff d0                	callq  *%rax
  800420ce0d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  800420ce11:	48 bf b2 36 21 04 80 	movabs $0x80042136b2,%rdi
  800420ce18:	00 00 00 
  800420ce1b:	48 b8 8b 0b 21 04 80 	movabs $0x8004210b8b,%rax
  800420ce22:	00 00 00 
  800420ce25:	ff d0                	callq  *%rax
  800420ce27:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  800420ce2b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420ce30:	75 35                	jne    800420ce67 <_dwarf_attr_init+0x50b>
  800420ce32:	48 b9 bd 36 21 04 80 	movabs $0x80042136bd,%rcx
  800420ce39:	00 00 00 
  800420ce3c:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420ce43:	00 00 00 
  800420ce46:	be 51 02 00 00       	mov    $0x251,%esi
  800420ce4b:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420ce52:	00 00 00 
  800420ce55:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce5a:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420ce61:	00 00 00 
  800420ce64:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  800420ce67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ce6b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420ce6f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420ce73:	48 01 d0             	add    %rdx,%rax
  800420ce76:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800420ce7a:	eb 41                	jmp    800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  800420ce7c:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  800420ce83:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  800420ce84:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420ce88:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800420ce8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ce93:	48 89 ce             	mov    %rcx,%rsi
  800420ce96:	48 89 c7             	mov    %rax,%rdi
  800420ce99:	48 b8 d3 c1 20 04 80 	movabs $0x800420c1d3,%rax
  800420cea0:	00 00 00 
  800420cea3:	ff d0                	callq  *%rax
  800420cea5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800420cea9:	eb 12                	jmp    800420cebd <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  800420ceab:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  800420ceb2:	00 
		break;
  800420ceb3:	eb 08                	jmp    800420cebd <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  800420ceb5:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  800420cebc:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  800420cebd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420cec1:	0f 85 21 01 00 00    	jne    800420cfe8 <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  800420cec7:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  800420cece:	09 
  800420cecf:	74 1e                	je     800420ceef <_dwarf_attr_init+0x593>
  800420ced1:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  800420ced8:	0a 
  800420ced9:	74 14                	je     800420ceef <_dwarf_attr_init+0x593>
  800420cedb:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  800420cee2:	03 
  800420cee3:	74 0a                	je     800420ceef <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  800420cee5:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  800420ceec:	04 
  800420ceed:	75 10                	jne    800420ceff <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  800420ceef:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420cef3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  800420cef7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420cefb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  800420ceff:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420cf03:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf07:	75 39                	jne    800420cf42 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  800420cf09:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420cf0d:	48 83 f8 08          	cmp    $0x8,%rax
  800420cf11:	74 1c                	je     800420cf2f <_dwarf_attr_init+0x5d3>
  800420cf13:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cf17:	74 02                	je     800420cf1b <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  800420cf19:	eb 27                	jmp    800420cf42 <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  800420cf1b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420cf1f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420cf26:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  800420cf2d:	eb 13                	jmp    800420cf42 <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  800420cf2f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420cf33:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420cf3a:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  800420cf41:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  800420cf42:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420cf49:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  800420cf50:	8d 48 01             	lea    0x1(%rax),%ecx
  800420cf53:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800420cf5a:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  800420cf60:	0f b6 c0             	movzbl %al,%eax
  800420cf63:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  800420cf6a:	48 63 d0             	movslq %eax,%rdx
  800420cf6d:	48 89 d0             	mov    %rdx,%rax
  800420cf70:	48 01 c0             	add    %rax,%rax
  800420cf73:	48 01 d0             	add    %rdx,%rax
  800420cf76:	48 c1 e0 05          	shl    $0x5,%rax
  800420cf7a:	48 01 c8             	add    %rcx,%rax
  800420cf7d:	48 05 70 03 00 00    	add    $0x370,%rax
  800420cf83:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800420cf8a:	48 89 10             	mov    %rdx,(%rax)
  800420cf8d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420cf94:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420cf98:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420cf9c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420cfa0:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800420cfa4:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800420cfa8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420cfac:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420cfb0:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420cfb4:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800420cfb8:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420cfbc:	48 89 50 30          	mov    %rdx,0x30(%rax)
  800420cfc0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420cfc4:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800420cfc8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420cfcc:	48 89 50 40          	mov    %rdx,0x40(%rax)
  800420cfd0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420cfd4:	48 89 50 48          	mov    %rdx,0x48(%rax)
  800420cfd8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420cfdc:	48 89 50 50          	mov    %rdx,0x50(%rax)
  800420cfe0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420cfe4:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  800420cfe8:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420cfeb:	c9                   	leaveq 
  800420cfec:	c3                   	retq   

000000800420cfed <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  800420cfed:	55                   	push   %rbp
  800420cfee:	48 89 e5             	mov    %rsp,%rbp
  800420cff1:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  800420cff8:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  800420cfff:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  800420d006:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  800420d00d:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  800420d013:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  800420d01a:	00 
  800420d01b:	75 35                	jne    800420d052 <dwarf_search_die_within_cu+0x65>
  800420d01d:	48 b9 d8 37 21 04 80 	movabs $0x80042137d8,%rcx
  800420d024:	00 00 00 
  800420d027:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d02e:	00 00 00 
  800420d031:	be 86 02 00 00       	mov    $0x286,%esi
  800420d036:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d03d:	00 00 00 
  800420d040:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d045:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d04c:	00 00 00 
  800420d04f:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  800420d052:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  800420d059:	00 
  800420d05a:	75 35                	jne    800420d091 <dwarf_search_die_within_cu+0xa4>
  800420d05c:	48 b9 dc 37 21 04 80 	movabs $0x80042137dc,%rcx
  800420d063:	00 00 00 
  800420d066:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d06d:	00 00 00 
  800420d070:	be 88 02 00 00       	mov    $0x288,%esi
  800420d075:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d07c:	00 00 00 
  800420d07f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d084:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d08b:	00 00 00 
  800420d08e:	41 ff d0             	callq  *%r8

	level = 1;
  800420d091:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  800420d098:	e9 17 02 00 00       	jmpq   800420d2b4 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  800420d09d:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800420d0a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  800420d0a8:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800420d0af:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420d0b3:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  800420d0ba:	48 89 d6             	mov    %rdx,%rsi
  800420d0bd:	48 89 c7             	mov    %rax,%rdi
  800420d0c0:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420d0c7:	00 00 00 
  800420d0ca:	ff d0                	callq  *%rax
  800420d0cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  800420d0d0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420d0d5:	75 22                	jne    800420d0f9 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  800420d0d7:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d0db:	74 09                	je     800420d0e6 <dwarf_search_die_within_cu+0xf9>
  800420d0dd:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  800420d0e4:	75 0a                	jne    800420d0f0 <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  800420d0e6:	b8 04 00 00 00       	mov    $0x4,%eax
  800420d0eb:	e9 f4 01 00 00       	jmpq   800420d2e4 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  800420d0f0:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  800420d0f4:	e9 bb 01 00 00       	jmpq   800420d2b4 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  800420d0f9:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  800420d100:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d104:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800420d10b:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  800420d10f:	48 89 34 24          	mov    %rsi,(%rsp)
  800420d113:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  800420d117:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  800420d11c:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  800420d120:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  800420d125:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  800420d129:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  800420d12e:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  800420d132:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  800420d137:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  800420d13b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  800420d140:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  800420d144:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  800420d149:	48 89 ce             	mov    %rcx,%rsi
  800420d14c:	48 89 c7             	mov    %rax,%rdi
  800420d14f:	48 b8 2b c8 20 04 80 	movabs $0x800420c82b,%rax
  800420d156:	00 00 00 
  800420d159:	ff d0                	callq  *%rax
  800420d15b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420d15e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420d162:	74 08                	je     800420d16c <dwarf_search_die_within_cu+0x17f>
			return (ret);
  800420d164:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d167:	e9 78 01 00 00       	jmpq   800420d2e4 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  800420d16c:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800420d173:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420d177:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  800420d17a:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800420d181:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d185:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  800420d189:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800420d190:	48 8d 78 20          	lea    0x20(%rax),%rdi
  800420d194:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  800420d19b:	b8 66 00 00 00       	mov    $0x66,%eax
  800420d1a0:	48 89 d6             	mov    %rdx,%rsi
  800420d1a3:	48 89 c1             	mov    %rax,%rcx
  800420d1a6:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  800420d1a9:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800420d1b0:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  800420d1b7:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  800420d1be:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800420d1c5:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  800420d1c9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800420d1d0:	e9 8e 00 00 00       	jmpq   800420d263 <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  800420d1d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800420d1d8:	48 63 d0             	movslq %eax,%rdx
  800420d1db:	48 89 d0             	mov    %rdx,%rax
  800420d1de:	48 01 c0             	add    %rax,%rax
  800420d1e1:	48 01 d0             	add    %rdx,%rax
  800420d1e4:	48 c1 e0 03          	shl    $0x3,%rax
  800420d1e8:	48 01 e8             	add    %rbp,%rax
  800420d1eb:	48 2d 18 03 00 00    	sub    $0x318,%rax
  800420d1f1:	48 8b 08             	mov    (%rax),%rcx
  800420d1f4:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  800420d1fb:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800420d1fe:	48 63 d0             	movslq %eax,%rdx
  800420d201:	48 89 d0             	mov    %rdx,%rax
  800420d204:	48 01 c0             	add    %rax,%rax
  800420d207:	48 01 d0             	add    %rdx,%rax
  800420d20a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d20e:	48 83 c0 30          	add    $0x30,%rax
  800420d212:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  800420d216:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  800420d21d:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  800420d224:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800420d22b:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  800420d232:	49 89 c9             	mov    %rcx,%r9
  800420d235:	49 89 f8             	mov    %rdi,%r8
  800420d238:	48 89 d1             	mov    %rdx,%rcx
  800420d23b:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  800420d23f:	48 89 c7             	mov    %rax,%rdi
  800420d242:	48 b8 5c c9 20 04 80 	movabs $0x800420c95c,%rax
  800420d249:	00 00 00 
  800420d24c:	ff d0                	callq  *%rax
  800420d24e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420d251:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420d255:	74 08                	je     800420d25f <dwarf_search_die_within_cu+0x272>
				return (ret);
  800420d257:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d25a:	e9 85 00 00 00       	jmpq   800420d2e4 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  800420d25f:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800420d263:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800420d266:	48 63 d0             	movslq %eax,%rdx
  800420d269:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  800420d270:	48 39 c2             	cmp    %rax,%rdx
  800420d273:	0f 82 5c ff ff ff    	jb     800420d1d5 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  800420d279:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  800420d280:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800420d287:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  800420d28b:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  800420d292:	74 19                	je     800420d2ad <dwarf_search_die_within_cu+0x2c0>
  800420d294:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d298:	7e 13                	jle    800420d2ad <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  800420d29a:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  800420d2a1:	3c 01                	cmp    $0x1,%al
  800420d2a3:	75 06                	jne    800420d2ab <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  800420d2a5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  800420d2a9:	eb 09                	jmp    800420d2b4 <dwarf_search_die_within_cu+0x2c7>
  800420d2ab:	eb 07                	jmp    800420d2b4 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  800420d2ad:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d2b2:	eb 30                	jmp    800420d2e4 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  800420d2b4:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  800420d2b8:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800420d2bf:	48 39 c2             	cmp    %rax,%rdx
  800420d2c2:	76 1b                	jbe    800420d2df <dwarf_search_die_within_cu+0x2f2>
  800420d2c4:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800420d2cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420d2cf:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800420d2d6:	48 39 c2             	cmp    %rax,%rdx
  800420d2d9:	0f 87 be fd ff ff    	ja     800420d09d <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  800420d2df:	b8 04 00 00 00       	mov    $0x4,%eax
}
  800420d2e4:	c9                   	leaveq 
  800420d2e5:	c3                   	retq   

000000800420d2e6 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  800420d2e6:	55                   	push   %rbp
  800420d2e7:	48 89 e5             	mov    %rsp,%rbp
  800420d2ea:	48 83 ec 60          	sub    $0x60,%rsp
  800420d2ee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d2f2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420d2f6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  800420d2fa:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420d2ff:	75 35                	jne    800420d336 <dwarf_offdie+0x50>
  800420d301:	48 b9 d8 37 21 04 80 	movabs $0x80042137d8,%rcx
  800420d308:	00 00 00 
  800420d30b:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d312:	00 00 00 
  800420d315:	be c4 02 00 00       	mov    $0x2c4,%esi
  800420d31a:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d321:	00 00 00 
  800420d324:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d329:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d330:	00 00 00 
  800420d333:	41 ff d0             	callq  *%r8
	assert(ret_die);
  800420d336:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420d33b:	75 35                	jne    800420d372 <dwarf_offdie+0x8c>
  800420d33d:	48 b9 dc 37 21 04 80 	movabs $0x80042137dc,%rcx
  800420d344:	00 00 00 
  800420d347:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d34e:	00 00 00 
  800420d351:	be c5 02 00 00       	mov    $0x2c5,%esi
  800420d356:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d35d:	00 00 00 
  800420d360:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d365:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d36c:	00 00 00 
  800420d36f:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  800420d372:	48 8b 45 30          	mov    0x30(%rbp),%rax
  800420d376:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800420d37a:	76 66                	jbe    800420d3e2 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  800420d37c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420d380:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420d384:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d388:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  800420d38c:	48 89 0c 24          	mov    %rcx,(%rsp)
  800420d390:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  800420d394:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800420d399:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  800420d39d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  800420d3a2:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800420d3a6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  800420d3ab:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  800420d3af:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  800420d3b4:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  800420d3b8:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  800420d3bd:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  800420d3c1:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  800420d3c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420d3cb:	48 89 c7             	mov    %rax,%rdi
  800420d3ce:	48 b8 ed cf 20 04 80 	movabs $0x800420cfed,%rax
  800420d3d5:	00 00 00 
  800420d3d8:	ff d0                	callq  *%rax
  800420d3da:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  800420d3dd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d3e0:	eb 05                	jmp    800420d3e7 <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  800420d3e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d3e7:	c9                   	leaveq 
  800420d3e8:	c3                   	retq   

000000800420d3e9 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  800420d3e9:	55                   	push   %rbp
  800420d3ea:	48 89 e5             	mov    %rsp,%rbp
  800420d3ed:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d3f1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d3f5:	89 f0                	mov    %esi,%eax
  800420d3f7:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  800420d3fb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420d402:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  800420d403:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800420d40a:	eb 57                	jmp    800420d463 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  800420d40c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d410:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d413:	48 63 d0             	movslq %eax,%rdx
  800420d416:	48 89 d0             	mov    %rdx,%rax
  800420d419:	48 01 c0             	add    %rax,%rax
  800420d41c:	48 01 d0             	add    %rdx,%rax
  800420d41f:	48 c1 e0 05          	shl    $0x5,%rax
  800420d423:	48 01 c8             	add    %rcx,%rax
  800420d426:	48 05 80 03 00 00    	add    $0x380,%rax
  800420d42c:	48 8b 10             	mov    (%rax),%rdx
  800420d42f:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  800420d433:	48 39 c2             	cmp    %rax,%rdx
  800420d436:	75 27                	jne    800420d45f <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  800420d438:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d43b:	48 63 d0             	movslq %eax,%rdx
  800420d43e:	48 89 d0             	mov    %rdx,%rax
  800420d441:	48 01 c0             	add    %rax,%rax
  800420d444:	48 01 d0             	add    %rdx,%rax
  800420d447:	48 c1 e0 05          	shl    $0x5,%rax
  800420d44b:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  800420d452:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d456:	48 01 d0             	add    %rdx,%rax
  800420d459:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  800420d45d:	eb 17                	jmp    800420d476 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  800420d45f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420d463:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d467:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  800420d46e:	0f b6 c0             	movzbl %al,%eax
  800420d471:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  800420d474:	7f 96                	jg     800420d40c <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  800420d476:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800420d47a:	c9                   	leaveq 
  800420d47b:	c3                   	retq   

000000800420d47c <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  800420d47c:	55                   	push   %rbp
  800420d47d:	48 89 e5             	mov    %rsp,%rbp
  800420d480:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420d484:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420d488:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420d48c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800420d490:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  800420d494:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420d499:	75 35                	jne    800420d4d0 <dwarf_siblingof+0x54>
  800420d49b:	48 b9 d8 37 21 04 80 	movabs $0x80042137d8,%rcx
  800420d4a2:	00 00 00 
  800420d4a5:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d4ac:	00 00 00 
  800420d4af:	be ec 02 00 00       	mov    $0x2ec,%esi
  800420d4b4:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d4bb:	00 00 00 
  800420d4be:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4c3:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d4ca:	00 00 00 
  800420d4cd:	41 ff d0             	callq  *%r8
	assert(ret_die);
  800420d4d0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420d4d5:	75 35                	jne    800420d50c <dwarf_siblingof+0x90>
  800420d4d7:	48 b9 dc 37 21 04 80 	movabs $0x80042137dc,%rcx
  800420d4de:	00 00 00 
  800420d4e1:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d4e8:	00 00 00 
  800420d4eb:	be ed 02 00 00       	mov    $0x2ed,%esi
  800420d4f0:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d4f7:	00 00 00 
  800420d4fa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4ff:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d506:	00 00 00 
  800420d509:	41 ff d0             	callq  *%r8
	assert(cu);
  800420d50c:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800420d511:	75 35                	jne    800420d548 <dwarf_siblingof+0xcc>
  800420d513:	48 b9 e4 37 21 04 80 	movabs $0x80042137e4,%rcx
  800420d51a:	00 00 00 
  800420d51d:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d524:	00 00 00 
  800420d527:	be ee 02 00 00       	mov    $0x2ee,%esi
  800420d52c:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d533:	00 00 00 
  800420d536:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d53b:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d542:	00 00 00 
  800420d545:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  800420d548:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420d54d:	75 65                	jne    800420d5b4 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  800420d54f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420d553:	48 8b 70 28          	mov    0x28(%rax),%rsi
  800420d557:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d55b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420d55f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420d563:	48 8b 38             	mov    (%rax),%rdi
  800420d566:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420d56a:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420d56e:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420d573:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420d577:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420d57c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420d580:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420d585:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420d589:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420d58e:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420d592:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420d597:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420d59b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420d5a0:	48 89 cf             	mov    %rcx,%rdi
  800420d5a3:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  800420d5aa:	00 00 00 
  800420d5ad:	ff d0                	callq  *%rax
  800420d5af:	e9 0a 01 00 00       	jmpq   800420d6be <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  800420d5b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  800420d5bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420d5bf:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  800420d5c3:	84 c0                	test   %al,%al
  800420d5c5:	75 0e                	jne    800420d5d5 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  800420d5c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420d5cb:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420d5cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420d5d3:	eb 6b                	jmp    800420d640 <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  800420d5d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420d5d9:	be 01 00 00 00       	mov    $0x1,%esi
  800420d5de:	48 89 c7             	mov    %rax,%rdi
  800420d5e1:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  800420d5e8:	00 00 00 
  800420d5eb:	ff d0                	callq  *%rax
  800420d5ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5f1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420d5f6:	74 35                	je     800420d62d <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  800420d5f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d5fc:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420d600:	48 83 f8 10          	cmp    $0x10,%rax
  800420d604:	74 19                	je     800420d61f <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  800420d606:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d60a:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420d60e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420d612:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420d616:	48 01 d0             	add    %rdx,%rax
  800420d619:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420d61d:	eb 21                	jmp    800420d640 <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  800420d61f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d623:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420d627:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420d62b:	eb 13                	jmp    800420d640 <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  800420d62d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420d631:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420d635:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  800420d639:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  800420d640:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800420d643:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d647:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420d64b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  800420d64f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420d653:	4c 8b 00             	mov    (%rax),%r8
  800420d656:	4c 89 04 24          	mov    %r8,(%rsp)
  800420d65a:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800420d65e:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  800420d663:	4c 8b 40 10          	mov    0x10(%rax),%r8
  800420d667:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  800420d66c:	4c 8b 40 18          	mov    0x18(%rax),%r8
  800420d670:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  800420d675:	4c 8b 40 20          	mov    0x20(%rax),%r8
  800420d679:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  800420d67e:	4c 8b 40 28          	mov    0x28(%rax),%r8
  800420d682:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  800420d687:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420d68b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420d690:	48 b8 ed cf 20 04 80 	movabs $0x800420cfed,%rax
  800420d697:	00 00 00 
  800420d69a:	ff d0                	callq  *%rax
  800420d69c:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  800420d69f:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  800420d6a3:	75 07                	jne    800420d6ac <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  800420d6a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420d6aa:	eb 12                	jmp    800420d6be <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  800420d6ac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420d6b0:	74 07                	je     800420d6b9 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  800420d6b2:	b8 01 00 00 00       	mov    $0x1,%eax
  800420d6b7:	eb 05                	jmp    800420d6be <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  800420d6b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d6be:	c9                   	leaveq 
  800420d6bf:	c3                   	retq   

000000800420d6c0 <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  800420d6c0:	55                   	push   %rbp
  800420d6c1:	48 89 e5             	mov    %rsp,%rbp
  800420d6c4:	48 83 ec 70          	sub    $0x70,%rsp
  800420d6c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d6cc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420d6d0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420d6d4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  800420d6d8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420d6dd:	75 35                	jne    800420d714 <dwarf_child+0x54>
  800420d6df:	48 b9 e7 37 21 04 80 	movabs $0x80042137e7,%rcx
  800420d6e6:	00 00 00 
  800420d6e9:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d6f0:	00 00 00 
  800420d6f3:	be 1c 03 00 00       	mov    $0x31c,%esi
  800420d6f8:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d6ff:	00 00 00 
  800420d702:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d707:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d70e:	00 00 00 
  800420d711:	41 ff d0             	callq  *%r8
	assert(ret_die);
  800420d714:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420d719:	75 35                	jne    800420d750 <dwarf_child+0x90>
  800420d71b:	48 b9 dc 37 21 04 80 	movabs $0x80042137dc,%rcx
  800420d722:	00 00 00 
  800420d725:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d72c:	00 00 00 
  800420d72f:	be 1d 03 00 00       	mov    $0x31d,%esi
  800420d734:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d73b:	00 00 00 
  800420d73e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d743:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d74a:	00 00 00 
  800420d74d:	41 ff d0             	callq  *%r8
	assert(dbg);
  800420d750:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420d755:	75 35                	jne    800420d78c <dwarf_child+0xcc>
  800420d757:	48 b9 d8 37 21 04 80 	movabs $0x80042137d8,%rcx
  800420d75e:	00 00 00 
  800420d761:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d768:	00 00 00 
  800420d76b:	be 1e 03 00 00       	mov    $0x31e,%esi
  800420d770:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d777:	00 00 00 
  800420d77a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d77f:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d786:	00 00 00 
  800420d789:	41 ff d0             	callq  *%r8
	assert(cu);
  800420d78c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420d791:	75 35                	jne    800420d7c8 <dwarf_child+0x108>
  800420d793:	48 b9 e4 37 21 04 80 	movabs $0x80042137e4,%rcx
  800420d79a:	00 00 00 
  800420d79d:	48 ba 4a 36 21 04 80 	movabs $0x800421364a,%rdx
  800420d7a4:	00 00 00 
  800420d7a7:	be 1f 03 00 00       	mov    $0x31f,%esi
  800420d7ac:	48 bf 5f 36 21 04 80 	movabs $0x800421365f,%rdi
  800420d7b3:	00 00 00 
  800420d7b6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d7bb:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420d7c2:	00 00 00 
  800420d7c5:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  800420d7c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d7cc:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  800420d7d0:	84 c0                	test   %al,%al
  800420d7d2:	75 0a                	jne    800420d7de <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  800420d7d4:	b8 04 00 00 00       	mov    $0x4,%eax
  800420d7d9:	e9 84 00 00 00       	jmpq   800420d862 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  800420d7de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d7e2:	48 8b 70 08          	mov    0x8(%rax),%rsi
  800420d7e6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420d7ea:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  800420d7ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d7f2:	48 8b 08             	mov    (%rax),%rcx
  800420d7f5:	48 89 0c 24          	mov    %rcx,(%rsp)
  800420d7f9:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800420d7fd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800420d802:	48 8b 48 10          	mov    0x10(%rax),%rcx
  800420d806:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  800420d80b:	48 8b 48 18          	mov    0x18(%rax),%rcx
  800420d80f:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  800420d814:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420d818:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  800420d81d:	48 8b 48 28          	mov    0x28(%rax),%rcx
  800420d821:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  800420d826:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420d82a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420d82f:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420d834:	48 b8 ed cf 20 04 80 	movabs $0x800420cfed,%rax
  800420d83b:	00 00 00 
  800420d83e:	ff d0                	callq  *%rax
  800420d840:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  800420d843:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  800420d847:	75 07                	jne    800420d850 <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  800420d849:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420d84e:	eb 12                	jmp    800420d862 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  800420d850:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d854:	74 07                	je     800420d85d <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  800420d856:	b8 01 00 00 00       	mov    $0x1,%eax
  800420d85b:	eb 05                	jmp    800420d862 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  800420d85d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d862:	c9                   	leaveq 
  800420d863:	c3                   	retq   

000000800420d864 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  800420d864:	55                   	push   %rbp
  800420d865:	48 89 e5             	mov    %rsp,%rbp
  800420d868:	48 83 ec 20          	sub    $0x20,%rsp
  800420d86c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  800420d870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d874:	48 8b 00             	mov    (%rax),%rax
  800420d877:	48 89 c7             	mov    %rax,%rdi
  800420d87a:	48 b8 8b 0b 21 04 80 	movabs $0x8004210b8b,%rax
  800420d881:	00 00 00 
  800420d884:	ff d0                	callq  *%rax
  800420d886:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  800420d88a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d88e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420d892:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d896:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  800420d89a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d89e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420d8a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d8a6:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  800420d8aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d8ae:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800420d8b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d8b6:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  800420d8ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420d8bf:	c9                   	leaveq 
  800420d8c0:	c3                   	retq   

000000800420d8c1 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  800420d8c1:	55                   	push   %rbp
  800420d8c2:	48 89 e5             	mov    %rsp,%rbp
  800420d8c5:	48 83 ec 08          	sub    $0x8,%rsp
  800420d8c9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  800420d8cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d8d1:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  800420d8d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d8db:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  800420d8e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d8e5:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  800420d8eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d8ef:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  800420d8f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d8f9:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  800420d8ff:	c9                   	leaveq 
  800420d900:	c3                   	retq   

000000800420d901 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  800420d901:	55                   	push   %rbp
  800420d902:	48 89 e5             	mov    %rsp,%rbp
  800420d905:	48 83 ec 40          	sub    $0x40,%rsp
  800420d909:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d90d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420d911:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420d915:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  800420d919:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  800420d91d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d921:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  800420d925:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d929:	ba 80 00 00 00       	mov    $0x80,%edx
  800420d92e:	be 00 00 00 00       	mov    $0x0,%esi
  800420d933:	48 89 c7             	mov    %rax,%rdi
  800420d936:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420d93d:	00 00 00 
  800420d940:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  800420d942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d946:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420d94a:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  800420d94e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420d953:	75 07                	jne    800420d95c <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  800420d955:	b8 01 00 00 00       	mov    $0x1,%eax
  800420d95a:	eb 75                	jmp    800420d9d1 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  800420d95c:	eb 59                	jmp    800420d9b7 <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  800420d95e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  800420d962:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d966:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d96a:	be 01 00 00 00       	mov    $0x1,%esi
  800420d96f:	48 89 c7             	mov    %rax,%rdi
  800420d972:	48 b8 16 fb 20 04 80 	movabs $0x800420fb16,%rax
  800420d979:	00 00 00 
  800420d97c:	ff d0                	callq  *%rax
  800420d97e:	85 c0                	test   %eax,%eax
  800420d980:	79 07                	jns    800420d989 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  800420d982:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420d987:	eb 48                	jmp    800420d9d1 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  800420d989:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d98d:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420d991:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800420d995:	77 20                	ja     800420d9b7 <dwarf_get_fde_at_pc+0xb6>
  800420d997:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d99b:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  800420d99f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d9a3:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  800420d9a7:	48 01 d0             	add    %rdx,%rax
  800420d9aa:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800420d9ae:	76 07                	jbe    800420d9b7 <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  800420d9b0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9b5:	eb 1a                	jmp    800420d9d1 <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  800420d9b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d9bb:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420d9bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d9c3:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420d9c7:	48 39 c2             	cmp    %rax,%rdx
  800420d9ca:	72 92                	jb     800420d95e <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  800420d9cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  800420d9d1:	c9                   	leaveq 
  800420d9d2:	c3                   	retq   

000000800420d9d3 <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  800420d9d3:	55                   	push   %rbp
  800420d9d4:	48 89 e5             	mov    %rsp,%rbp
  800420d9d7:	53                   	push   %rbx
  800420d9d8:	48 83 ec 38          	sub    $0x38,%rsp
  800420d9dc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420d9e0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420d9e4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800420d9e8:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  800420d9ec:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420d9f1:	75 35                	jne    800420da28 <_dwarf_frame_regtable_copy+0x55>
  800420d9f3:	48 b9 fa 37 21 04 80 	movabs $0x80042137fa,%rcx
  800420d9fa:	00 00 00 
  800420d9fd:	48 ba 07 38 21 04 80 	movabs $0x8004213807,%rdx
  800420da04:	00 00 00 
  800420da07:	be 57 00 00 00       	mov    $0x57,%esi
  800420da0c:	48 bf 1c 38 21 04 80 	movabs $0x800421381c,%rdi
  800420da13:	00 00 00 
  800420da16:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da1b:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420da22:	00 00 00 
  800420da25:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  800420da28:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420da2d:	75 35                	jne    800420da64 <_dwarf_frame_regtable_copy+0x91>
  800420da2f:	48 b9 32 38 21 04 80 	movabs $0x8004213832,%rcx
  800420da36:	00 00 00 
  800420da39:	48 ba 07 38 21 04 80 	movabs $0x8004213807,%rdx
  800420da40:	00 00 00 
  800420da43:	be 58 00 00 00       	mov    $0x58,%esi
  800420da48:	48 bf 1c 38 21 04 80 	movabs $0x800421381c,%rdi
  800420da4f:	00 00 00 
  800420da52:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da57:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420da5e:	00 00 00 
  800420da61:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  800420da64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420da68:	48 8b 00             	mov    (%rax),%rax
  800420da6b:	48 85 c0             	test   %rax,%rax
  800420da6e:	75 39                	jne    800420daa9 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  800420da70:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420da74:	48 bb 20 d6 2b 04 80 	movabs $0x80042bd620,%rbx
  800420da7b:	00 00 00 
  800420da7e:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  800420da81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420da85:	48 8b 00             	mov    (%rax),%rax
  800420da88:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420da8c:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  800420da90:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  800420da94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420da98:	48 8b 00             	mov    (%rax),%rax
  800420da9b:	48 bb 60 d8 2b 04 80 	movabs $0x80042bd860,%rbx
  800420daa2:	00 00 00 
  800420daa5:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  800420daa9:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800420daad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420dab1:	48 8b 00             	mov    (%rax),%rax
  800420dab4:	ba 18 00 00 00       	mov    $0x18,%edx
  800420dab9:	48 89 ce             	mov    %rcx,%rsi
  800420dabc:	48 89 c7             	mov    %rax,%rdi
  800420dabf:	48 b8 56 b6 20 04 80 	movabs $0x800420b656,%rax
  800420dac6:	00 00 00 
  800420dac9:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800420dacb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420dad2:	eb 5a                	jmp    800420db2e <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  800420dad4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420dad8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420dadc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dadf:	48 63 d0             	movslq %eax,%rdx
  800420dae2:	48 89 d0             	mov    %rdx,%rax
  800420dae5:	48 01 c0             	add    %rax,%rax
  800420dae8:	48 01 d0             	add    %rdx,%rax
  800420daeb:	48 c1 e0 03          	shl    $0x3,%rax
  800420daef:	48 01 c1             	add    %rax,%rcx
  800420daf2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420daf6:	48 8b 00             	mov    (%rax),%rax
  800420daf9:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800420dafd:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420db00:	48 63 d0             	movslq %eax,%rdx
  800420db03:	48 89 d0             	mov    %rdx,%rax
  800420db06:	48 01 c0             	add    %rax,%rax
  800420db09:	48 01 d0             	add    %rdx,%rax
  800420db0c:	48 c1 e0 03          	shl    $0x3,%rax
  800420db10:	48 01 f0             	add    %rsi,%rax
  800420db13:	ba 18 00 00 00       	mov    $0x18,%edx
  800420db18:	48 89 ce             	mov    %rcx,%rsi
  800420db1b:	48 89 c7             	mov    %rax,%rdi
  800420db1e:	48 b8 56 b6 20 04 80 	movabs $0x800420b656,%rax
  800420db25:	00 00 00 
  800420db28:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  800420db2a:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800420db2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420db32:	48 8b 00             	mov    (%rax),%rax
  800420db35:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420db39:	0f b7 c0             	movzwl %ax,%eax
  800420db3c:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800420db3f:	7e 10                	jle    800420db51 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  800420db41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420db45:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420db49:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  800420db4c:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800420db4f:	7f 83                	jg     800420dad4 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800420db51:	eb 32                	jmp    800420db85 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  800420db53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420db57:	48 8b 00             	mov    (%rax),%rax
  800420db5a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420db5e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420db61:	48 63 d0             	movslq %eax,%rdx
  800420db64:	48 89 d0             	mov    %rdx,%rax
  800420db67:	48 01 c0             	add    %rax,%rax
  800420db6a:	48 01 d0             	add    %rdx,%rax
  800420db6d:	48 c1 e0 03          	shl    $0x3,%rax
  800420db71:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  800420db75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420db79:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  800420db7d:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800420db81:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420db85:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420db89:	48 8b 00             	mov    (%rax),%rax
  800420db8c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420db90:	0f b7 c0             	movzwl %ax,%eax
  800420db93:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800420db96:	7f bb                	jg     800420db53 <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  800420db98:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420db9d:	48 83 c4 38          	add    $0x38,%rsp
  800420dba1:	5b                   	pop    %rbx
  800420dba2:	5d                   	pop    %rbp
  800420dba3:	c3                   	retq   

000000800420dba4 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  800420dba4:	55                   	push   %rbp
  800420dba5:	48 89 e5             	mov    %rsp,%rbp
  800420dba8:	53                   	push   %rbx
  800420dba9:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  800420dbb0:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800420dbb4:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  800420dbb8:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  800420dbbc:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  800420dbc0:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  800420dbc7:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  800420dbce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  800420dbd5:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  800420dbdc:	00 
  800420dbdd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420dbe1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  800420dbe5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420dbe9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420dbed:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  800420dbf0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420dbf4:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800420dbf8:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  800420dbfc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420dc00:	48 89 c7             	mov    %rax,%rdi
  800420dc03:	48 b8 d3 d9 20 04 80 	movabs $0x800420d9d3,%rax
  800420dc0a:	00 00 00 
  800420dc0d:	ff d0                	callq  *%rax
	p = insts;
  800420dc0f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420dc13:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  800420dc17:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420dc1b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420dc1f:	48 01 d0             	add    %rdx,%rax
  800420dc22:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  800420dc26:	e9 3a 0d 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  800420dc2b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420dc2f:	0f b6 00             	movzbl (%rax),%eax
  800420dc32:	84 c0                	test   %al,%al
  800420dc34:	75 11                	jne    800420dc47 <_dwarf_frame_run_inst+0xa3>
			p++;
  800420dc36:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420dc3a:	48 83 c0 01          	add    $0x1,%rax
  800420dc3e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  800420dc42:	e9 1e 0d 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  800420dc47:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420dc4b:	0f b6 00             	movzbl (%rax),%eax
  800420dc4e:	83 e0 c0             	and    $0xffffffc0,%eax
  800420dc51:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  800420dc54:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420dc58:	0f b6 00             	movzbl (%rax),%eax
  800420dc5b:	83 e0 3f             	and    $0x3f,%eax
  800420dc5e:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  800420dc61:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420dc65:	48 83 c0 01          	add    $0x1,%rax
  800420dc69:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  800420dc6d:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  800420dc71:	0f 84 a1 01 00 00    	je     800420de18 <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  800420dc77:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800420dc7b:	3d 80 00 00 00       	cmp    $0x80,%eax
  800420dc80:	74 38                	je     800420dcba <_dwarf_frame_run_inst+0x116>
  800420dc82:	3d c0 00 00 00       	cmp    $0xc0,%eax
  800420dc87:	0f 84 01 01 00 00    	je     800420dd8e <_dwarf_frame_run_inst+0x1ea>
  800420dc8d:	83 f8 40             	cmp    $0x40,%eax
  800420dc90:	0f 85 71 01 00 00    	jne    800420de07 <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  800420dc96:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800420dc9a:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800420dca1:	ff 
  800420dca2:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  800420dca6:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800420dcaa:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800420dcae:	73 05                	jae    800420dcb5 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  800420dcb0:	e9 be 0c 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			        break;
  800420dcb5:	e9 59 01 00 00       	jmpq   800420de13 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  800420dcba:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420dcbe:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420dcc2:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  800420dcc5:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800420dcc9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420dccd:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420dcd1:	66 39 c2             	cmp    %ax,%dx
  800420dcd4:	72 0c                	jb     800420dce2 <_dwarf_frame_run_inst+0x13e>
  800420dcd6:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420dcdd:	e9 91 0c 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  800420dce2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420dce6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420dcea:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800420dcee:	48 89 d0             	mov    %rdx,%rax
  800420dcf1:	48 01 c0             	add    %rax,%rax
  800420dcf4:	48 01 d0             	add    %rdx,%rax
  800420dcf7:	48 c1 e0 03          	shl    $0x3,%rax
  800420dcfb:	48 01 c8             	add    %rcx,%rax
  800420dcfe:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  800420dd01:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420dd05:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420dd09:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800420dd0d:	48 89 d0             	mov    %rdx,%rax
  800420dd10:	48 01 c0             	add    %rax,%rax
  800420dd13:	48 01 d0             	add    %rdx,%rax
  800420dd16:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd1a:	48 01 c8             	add    %rcx,%rax
  800420dd1d:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  800420dd21:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420dd25:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420dd29:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800420dd2d:	48 89 d0             	mov    %rdx,%rax
  800420dd30:	48 01 c0             	add    %rax,%rax
  800420dd33:	48 01 d0             	add    %rdx,%rax
  800420dd36:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd3a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420dd3e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420dd42:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800420dd46:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  800420dd4a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420dd4e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420dd52:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800420dd56:	48 89 d0             	mov    %rdx,%rax
  800420dd59:	48 01 c0             	add    %rax,%rax
  800420dd5c:	48 01 d0             	add    %rdx,%rax
  800420dd5f:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd63:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  800420dd67:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420dd6b:	48 89 c7             	mov    %rax,%rdi
  800420dd6e:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420dd75:	00 00 00 
  800420dd78:	ff d0                	callq  *%rax
  800420dd7a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800420dd81:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  800420dd85:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  800420dd89:	e9 85 00 00 00       	jmpq   800420de13 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  800420dd8e:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420dd92:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420dd96:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  800420dd99:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800420dd9d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420dda1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420dda5:	66 39 c2             	cmp    %ax,%dx
  800420dda8:	72 0c                	jb     800420ddb6 <_dwarf_frame_run_inst+0x212>
  800420ddaa:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420ddb1:	e9 bd 0b 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  800420ddb6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420ddba:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420ddbe:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800420ddc2:	48 89 d0             	mov    %rdx,%rax
  800420ddc5:	48 01 c0             	add    %rax,%rax
  800420ddc8:	48 01 d0             	add    %rdx,%rax
  800420ddcb:	48 c1 e0 03          	shl    $0x3,%rax
  800420ddcf:	48 01 c1             	add    %rax,%rcx
  800420ddd2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420ddd6:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800420ddda:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800420ddde:	48 89 d0             	mov    %rdx,%rax
  800420dde1:	48 01 c0             	add    %rax,%rax
  800420dde4:	48 01 d0             	add    %rdx,%rax
  800420dde7:	48 c1 e0 03          	shl    $0x3,%rax
  800420ddeb:	48 01 f0             	add    %rsi,%rax
  800420ddee:	ba 18 00 00 00       	mov    $0x18,%edx
  800420ddf3:	48 89 ce             	mov    %rcx,%rsi
  800420ddf6:	48 89 c7             	mov    %rax,%rdi
  800420ddf9:	48 b8 56 b6 20 04 80 	movabs $0x800420b656,%rax
  800420de00:	00 00 00 
  800420de03:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  800420de05:	eb 0c                	jmp    800420de13 <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  800420de07:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  800420de0e:	e9 60 0b 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  800420de13:	e9 4d 0b 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  800420de18:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800420de1c:	83 f8 16             	cmp    $0x16,%eax
  800420de1f:	0f 87 37 0b 00 00    	ja     800420e95c <_dwarf_frame_run_inst+0xdb8>
  800420de25:	89 c0                	mov    %eax,%eax
  800420de27:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420de2e:	00 
  800420de2f:	48 b8 40 38 21 04 80 	movabs $0x8004213840,%rax
  800420de36:	00 00 00 
  800420de39:	48 01 d0             	add    %rdx,%rax
  800420de3c:	48 8b 00             	mov    (%rax),%rax
  800420de3f:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  800420de41:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420de45:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420de49:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420de4d:	8b 4a 28             	mov    0x28(%rdx),%ecx
  800420de50:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800420de54:	89 ce                	mov    %ecx,%esi
  800420de56:	48 89 d7             	mov    %rdx,%rdi
  800420de59:	ff d0                	callq  *%rax
  800420de5b:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  800420de5f:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800420de63:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800420de67:	73 05                	jae    800420de6e <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  800420de69:	e9 05 0b 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			break;
  800420de6e:	e9 f2 0a 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  800420de73:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420de77:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420de7b:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800420de7f:	be 01 00 00 00       	mov    $0x1,%esi
  800420de84:	48 89 d7             	mov    %rdx,%rdi
  800420de87:	ff d0                	callq  *%rax
  800420de89:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800420de90:	ff 
  800420de91:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  800420de95:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800420de99:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800420de9d:	73 05                	jae    800420dea4 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  800420de9f:	e9 cf 0a 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			break;
  800420dea4:	e9 bc 0a 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  800420dea9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420dead:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420deb1:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800420deb5:	be 02 00 00 00       	mov    $0x2,%esi
  800420deba:	48 89 d7             	mov    %rdx,%rdi
  800420debd:	ff d0                	callq  *%rax
  800420debf:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800420dec6:	ff 
  800420dec7:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  800420decb:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800420decf:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800420ded3:	73 05                	jae    800420deda <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  800420ded5:	e9 99 0a 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			break;
  800420deda:	e9 86 0a 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  800420dedf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420dee3:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420dee7:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800420deeb:	be 04 00 00 00       	mov    $0x4,%esi
  800420def0:	48 89 d7             	mov    %rdx,%rdi
  800420def3:	ff d0                	callq  *%rax
  800420def5:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800420defc:	ff 
  800420defd:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  800420df01:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800420df05:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800420df09:	73 05                	jae    800420df10 <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  800420df0b:	e9 63 0a 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			break;
  800420df10:	e9 50 0a 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  800420df15:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420df19:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420df1d:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420df20:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420df24:	48 89 c7             	mov    %rax,%rdi
  800420df27:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420df2e:	00 00 00 
  800420df31:	ff d0                	callq  *%rax
  800420df33:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800420df37:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420df3b:	48 89 c7             	mov    %rax,%rdi
  800420df3e:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420df45:	00 00 00 
  800420df48:	ff d0                	callq  *%rax
  800420df4a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420df4e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420df52:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420df56:	0f b7 c0             	movzwl %ax,%eax
  800420df59:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420df5d:	77 0c                	ja     800420df6b <_dwarf_frame_run_inst+0x3c7>
  800420df5f:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420df66:	e9 08 0a 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800420df6b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420df6f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420df73:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420df77:	48 89 d0             	mov    %rdx,%rax
  800420df7a:	48 01 c0             	add    %rax,%rax
  800420df7d:	48 01 d0             	add    %rdx,%rax
  800420df80:	48 c1 e0 03          	shl    $0x3,%rax
  800420df84:	48 01 c8             	add    %rcx,%rax
  800420df87:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  800420df8a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420df8e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420df92:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420df96:	48 89 d0             	mov    %rdx,%rax
  800420df99:	48 01 c0             	add    %rax,%rax
  800420df9c:	48 01 d0             	add    %rdx,%rax
  800420df9f:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfa3:	48 01 c8             	add    %rcx,%rax
  800420dfa6:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  800420dfaa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420dfae:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420dfb2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420dfb6:	48 89 d0             	mov    %rdx,%rax
  800420dfb9:	48 01 c0             	add    %rax,%rax
  800420dfbc:	48 01 d0             	add    %rdx,%rax
  800420dfbf:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfc3:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420dfc7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420dfcb:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800420dfcf:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  800420dfd3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420dfd7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420dfdb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420dfdf:	48 89 d0             	mov    %rdx,%rax
  800420dfe2:	48 01 c0             	add    %rax,%rax
  800420dfe5:	48 01 d0             	add    %rdx,%rax
  800420dfe8:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfec:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420dff0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420dff7:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  800420dffc:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800420e000:	e9 60 09 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  800420e005:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e009:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e00d:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e010:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e014:	48 89 c7             	mov    %rax,%rdi
  800420e017:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e01e:	00 00 00 
  800420e021:	ff d0                	callq  *%rax
  800420e023:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e027:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e02b:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e02f:	0f b7 c0             	movzwl %ax,%eax
  800420e032:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e036:	77 0c                	ja     800420e044 <_dwarf_frame_run_inst+0x4a0>
  800420e038:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e03f:	e9 2f 09 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  800420e044:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e048:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e04c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e050:	48 89 d0             	mov    %rdx,%rax
  800420e053:	48 01 c0             	add    %rax,%rax
  800420e056:	48 01 d0             	add    %rdx,%rax
  800420e059:	48 c1 e0 03          	shl    $0x3,%rax
  800420e05d:	48 01 c1             	add    %rax,%rcx
  800420e060:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e064:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800420e068:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e06c:	48 89 d0             	mov    %rdx,%rax
  800420e06f:	48 01 c0             	add    %rax,%rax
  800420e072:	48 01 d0             	add    %rdx,%rax
  800420e075:	48 c1 e0 03          	shl    $0x3,%rax
  800420e079:	48 01 f0             	add    %rsi,%rax
  800420e07c:	ba 18 00 00 00       	mov    $0x18,%edx
  800420e081:	48 89 ce             	mov    %rcx,%rsi
  800420e084:	48 89 c7             	mov    %rax,%rdi
  800420e087:	48 b8 56 b6 20 04 80 	movabs $0x800420b656,%rax
  800420e08e:	00 00 00 
  800420e091:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  800420e093:	e9 cd 08 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  800420e098:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e09c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e0a0:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e0a3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e0a7:	48 89 c7             	mov    %rax,%rdi
  800420e0aa:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e0b1:	00 00 00 
  800420e0b4:	ff d0                	callq  *%rax
  800420e0b6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e0ba:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e0be:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e0c2:	0f b7 c0             	movzwl %ax,%eax
  800420e0c5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e0c9:	77 0c                	ja     800420e0d7 <_dwarf_frame_run_inst+0x533>
  800420e0cb:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e0d2:	e9 9c 08 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800420e0d7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e0db:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e0df:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e0e3:	48 89 d0             	mov    %rdx,%rax
  800420e0e6:	48 01 c0             	add    %rax,%rax
  800420e0e9:	48 01 d0             	add    %rdx,%rax
  800420e0ec:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0f0:	48 01 c8             	add    %rcx,%rax
  800420e0f3:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  800420e0f6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e0fa:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e0fe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e102:	48 89 d0             	mov    %rdx,%rax
  800420e105:	48 01 c0             	add    %rax,%rax
  800420e108:	48 01 d0             	add    %rdx,%rax
  800420e10b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e10f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e113:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420e117:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  800420e11b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  800420e11f:	e9 41 08 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  800420e124:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e128:	48 89 c7             	mov    %rax,%rdi
  800420e12b:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e132:	00 00 00 
  800420e135:	ff d0                	callq  *%rax
  800420e137:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e13b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e13f:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e143:	0f b7 c0             	movzwl %ax,%eax
  800420e146:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e14a:	77 0c                	ja     800420e158 <_dwarf_frame_run_inst+0x5b4>
  800420e14c:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e153:	e9 1b 08 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800420e158:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e15c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e160:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e164:	48 89 d0             	mov    %rdx,%rax
  800420e167:	48 01 c0             	add    %rax,%rax
  800420e16a:	48 01 d0             	add    %rdx,%rax
  800420e16d:	48 c1 e0 03          	shl    $0x3,%rax
  800420e171:	48 01 c8             	add    %rcx,%rax
  800420e174:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  800420e177:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e17b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e17f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e183:	48 89 d0             	mov    %rdx,%rax
  800420e186:	48 01 c0             	add    %rax,%rax
  800420e189:	48 01 d0             	add    %rdx,%rax
  800420e18c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e190:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e194:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420e198:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  800420e19c:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  800420e1a0:	e9 c0 07 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  800420e1a5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e1a9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e1ad:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e1b0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e1b4:	48 89 c7             	mov    %rax,%rdi
  800420e1b7:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e1be:	00 00 00 
  800420e1c1:	ff d0                	callq  *%rax
  800420e1c3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  800420e1c7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e1cb:	48 89 c7             	mov    %rax,%rdi
  800420e1ce:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e1d5:	00 00 00 
  800420e1d8:	ff d0                	callq  *%rax
  800420e1da:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e1de:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e1e2:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e1e6:	0f b7 c0             	movzwl %ax,%eax
  800420e1e9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e1ed:	77 0c                	ja     800420e1fb <_dwarf_frame_run_inst+0x657>
  800420e1ef:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e1f6:	e9 78 07 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800420e1fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e1ff:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e203:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e207:	48 89 d0             	mov    %rdx,%rax
  800420e20a:	48 01 c0             	add    %rax,%rax
  800420e20d:	48 01 d0             	add    %rdx,%rax
  800420e210:	48 c1 e0 03          	shl    $0x3,%rax
  800420e214:	48 01 c8             	add    %rcx,%rax
  800420e217:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  800420e21a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e21e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e222:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e226:	48 89 d0             	mov    %rdx,%rax
  800420e229:	48 01 c0             	add    %rax,%rax
  800420e22c:	48 01 d0             	add    %rdx,%rax
  800420e22f:	48 c1 e0 03          	shl    $0x3,%rax
  800420e233:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e237:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420e23b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  800420e23f:	e9 21 07 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  800420e244:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420e248:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800420e24c:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  800420e250:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420e254:	48 89 c7             	mov    %rax,%rdi
  800420e257:	48 b8 d3 d9 20 04 80 	movabs $0x800420d9d3,%rax
  800420e25e:	00 00 00 
  800420e261:	ff d0                	callq  *%rax
			break;
  800420e263:	e9 fd 06 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  800420e268:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e26c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e270:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  800420e273:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e277:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800420e27b:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420e27f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420e283:	48 89 c7             	mov    %rax,%rdi
  800420e286:	48 b8 d3 d9 20 04 80 	movabs $0x800420d9d3,%rax
  800420e28d:	00 00 00 
  800420e290:	ff d0                	callq  *%rax
			break;
  800420e292:	e9 ce 06 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  800420e297:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e29b:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e29f:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e2a2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e2a6:	48 89 c7             	mov    %rax,%rdi
  800420e2a9:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e2b0:	00 00 00 
  800420e2b3:	ff d0                	callq  *%rax
  800420e2b5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800420e2b9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e2bd:	48 89 c7             	mov    %rax,%rdi
  800420e2c0:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e2c7:	00 00 00 
  800420e2ca:	ff d0                	callq  *%rax
  800420e2cc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  800420e2d0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e2d4:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800420e2d7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e2db:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  800420e2df:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e2e3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e2e7:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  800420e2eb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e2ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420e2f3:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800420e2f7:	e9 69 06 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  800420e2fc:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e300:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e304:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e307:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e30b:	48 89 c7             	mov    %rax,%rdi
  800420e30e:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e315:	00 00 00 
  800420e318:	ff d0                	callq  *%rax
  800420e31a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  800420e31e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e322:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e326:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  800420e32a:	e9 36 06 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  800420e32f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e333:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e337:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  800420e33a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e33e:	48 89 c7             	mov    %rax,%rdi
  800420e341:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e348:	00 00 00 
  800420e34b:	ff d0                	callq  *%rax
  800420e34d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  800420e351:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e355:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800420e358:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e35c:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  800420e360:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e364:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420e368:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800420e36c:	e9 f4 05 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  800420e371:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e375:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e379:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  800420e37c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e380:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  800420e383:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e387:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  800420e38b:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  800420e38f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e393:	48 89 c7             	mov    %rax,%rdi
  800420e396:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e39d:	00 00 00 
  800420e3a0:	ff d0                	callq  *%rax
  800420e3a2:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  800420e3a6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e3aa:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420e3ae:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  800420e3b2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420e3b6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e3ba:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420e3be:	48 01 d0             	add    %rdx,%rax
  800420e3c1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800420e3c5:	e9 9b 05 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  800420e3ca:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e3ce:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e3d2:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e3d5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e3d9:	48 89 c7             	mov    %rax,%rdi
  800420e3dc:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e3e3:	00 00 00 
  800420e3e6:	ff d0                	callq  *%rax
  800420e3e8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e3ec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e3f0:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e3f4:	0f b7 c0             	movzwl %ax,%eax
  800420e3f7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e3fb:	77 0c                	ja     800420e409 <_dwarf_frame_run_inst+0x865>
  800420e3fd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e404:	e9 6a 05 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800420e409:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e40d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e411:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e415:	48 89 d0             	mov    %rdx,%rax
  800420e418:	48 01 c0             	add    %rax,%rax
  800420e41b:	48 01 d0             	add    %rdx,%rax
  800420e41e:	48 c1 e0 03          	shl    $0x3,%rax
  800420e422:	48 01 c8             	add    %rcx,%rax
  800420e425:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  800420e428:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e42c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e430:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e434:	48 89 d0             	mov    %rdx,%rax
  800420e437:	48 01 c0             	add    %rax,%rax
  800420e43a:	48 01 d0             	add    %rdx,%rax
  800420e43d:	48 c1 e0 03          	shl    $0x3,%rax
  800420e441:	48 01 c8             	add    %rcx,%rax
  800420e444:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  800420e448:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e44c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e450:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e454:	48 89 d0             	mov    %rdx,%rax
  800420e457:	48 01 c0             	add    %rax,%rax
  800420e45a:	48 01 d0             	add    %rdx,%rax
  800420e45d:	48 c1 e0 03          	shl    $0x3,%rax
  800420e461:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  800420e465:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e469:	48 89 c7             	mov    %rax,%rdi
  800420e46c:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e473:	00 00 00 
  800420e476:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  800420e478:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  800420e47c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e480:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e484:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e488:	48 89 d0             	mov    %rdx,%rax
  800420e48b:	48 01 c0             	add    %rax,%rax
  800420e48e:	48 01 d0             	add    %rdx,%rax
  800420e491:	48 c1 e0 03          	shl    $0x3,%rax
  800420e495:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e499:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420e49d:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  800420e4a1:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420e4a5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e4a9:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800420e4ad:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e4b1:	48 89 d0             	mov    %rdx,%rax
  800420e4b4:	48 01 c0             	add    %rax,%rax
  800420e4b7:	48 01 d0             	add    %rdx,%rax
  800420e4ba:	48 c1 e0 03          	shl    $0x3,%rax
  800420e4be:	48 01 f0             	add    %rsi,%rax
  800420e4c1:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420e4c5:	48 01 c8             	add    %rcx,%rax
  800420e4c8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800420e4cc:	e9 94 04 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  800420e4d1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e4d5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e4d9:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e4dc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e4e0:	48 89 c7             	mov    %rax,%rdi
  800420e4e3:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e4ea:	00 00 00 
  800420e4ed:	ff d0                	callq  *%rax
  800420e4ef:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800420e4f3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e4f7:	48 89 c7             	mov    %rax,%rdi
  800420e4fa:	48 b8 45 c0 20 04 80 	movabs $0x800420c045,%rax
  800420e501:	00 00 00 
  800420e504:	ff d0                	callq  *%rax
  800420e506:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e50a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e50e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e512:	0f b7 c0             	movzwl %ax,%eax
  800420e515:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e519:	77 0c                	ja     800420e527 <_dwarf_frame_run_inst+0x983>
  800420e51b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e522:	e9 4c 04 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800420e527:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e52b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e52f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e533:	48 89 d0             	mov    %rdx,%rax
  800420e536:	48 01 c0             	add    %rax,%rax
  800420e539:	48 01 d0             	add    %rdx,%rax
  800420e53c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e540:	48 01 c8             	add    %rcx,%rax
  800420e543:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  800420e546:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e54a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e54e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e552:	48 89 d0             	mov    %rdx,%rax
  800420e555:	48 01 c0             	add    %rax,%rax
  800420e558:	48 01 d0             	add    %rdx,%rax
  800420e55b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e55f:	48 01 c8             	add    %rcx,%rax
  800420e562:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  800420e566:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e56a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e56e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e572:	48 89 d0             	mov    %rdx,%rax
  800420e575:	48 01 c0             	add    %rax,%rax
  800420e578:	48 01 d0             	add    %rdx,%rax
  800420e57b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e57f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e583:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420e587:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800420e58b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  800420e58f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e593:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e597:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e59b:	48 89 d0             	mov    %rdx,%rax
  800420e59e:	48 01 c0             	add    %rax,%rax
  800420e5a1:	48 01 d0             	add    %rdx,%rax
  800420e5a4:	48 c1 e0 03          	shl    $0x3,%rax
  800420e5a8:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e5ac:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420e5b3:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  800420e5b8:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800420e5bc:	e9 a4 03 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  800420e5c1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e5c5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e5c9:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e5cc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e5d0:	48 89 c7             	mov    %rax,%rdi
  800420e5d3:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e5da:	00 00 00 
  800420e5dd:	ff d0                	callq  *%rax
  800420e5df:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800420e5e3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e5e7:	48 89 c7             	mov    %rax,%rdi
  800420e5ea:	48 b8 45 c0 20 04 80 	movabs $0x800420c045,%rax
  800420e5f1:	00 00 00 
  800420e5f4:	ff d0                	callq  *%rax
  800420e5f6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  800420e5fa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e5fe:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800420e601:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e605:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  800420e609:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e60d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e611:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  800420e615:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e619:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800420e620:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  800420e625:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800420e629:	e9 37 03 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  800420e62e:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e632:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e636:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  800420e639:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e63d:	48 89 c7             	mov    %rax,%rdi
  800420e640:	48 b8 45 c0 20 04 80 	movabs $0x800420c045,%rax
  800420e647:	00 00 00 
  800420e64a:	ff d0                	callq  *%rax
  800420e64c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  800420e650:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e654:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800420e657:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e65b:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  800420e65f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e663:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800420e66a:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  800420e66f:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800420e673:	e9 ed 02 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  800420e678:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e67c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e680:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e683:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e687:	48 89 c7             	mov    %rax,%rdi
  800420e68a:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e691:	00 00 00 
  800420e694:	ff d0                	callq  *%rax
  800420e696:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800420e69a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e69e:	48 89 c7             	mov    %rax,%rdi
  800420e6a1:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e6a8:	00 00 00 
  800420e6ab:	ff d0                	callq  *%rax
  800420e6ad:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e6b1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e6b5:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e6b9:	0f b7 c0             	movzwl %ax,%eax
  800420e6bc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e6c0:	77 0c                	ja     800420e6ce <_dwarf_frame_run_inst+0xb2a>
  800420e6c2:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e6c9:	e9 a5 02 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800420e6ce:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e6d2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e6d6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e6da:	48 89 d0             	mov    %rdx,%rax
  800420e6dd:	48 01 c0             	add    %rax,%rax
  800420e6e0:	48 01 d0             	add    %rdx,%rax
  800420e6e3:	48 c1 e0 03          	shl    $0x3,%rax
  800420e6e7:	48 01 c8             	add    %rcx,%rax
  800420e6ea:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  800420e6ed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e6f1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e6f5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e6f9:	48 89 d0             	mov    %rdx,%rax
  800420e6fc:	48 01 c0             	add    %rax,%rax
  800420e6ff:	48 01 d0             	add    %rdx,%rax
  800420e702:	48 c1 e0 03          	shl    $0x3,%rax
  800420e706:	48 01 c8             	add    %rcx,%rax
  800420e709:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  800420e70d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e711:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e715:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e719:	48 89 d0             	mov    %rdx,%rax
  800420e71c:	48 01 c0             	add    %rax,%rax
  800420e71f:	48 01 d0             	add    %rdx,%rax
  800420e722:	48 c1 e0 03          	shl    $0x3,%rax
  800420e726:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e72a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420e72e:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800420e732:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  800420e736:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e73a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e73e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e742:	48 89 d0             	mov    %rdx,%rax
  800420e745:	48 01 c0             	add    %rax,%rax
  800420e748:	48 01 d0             	add    %rdx,%rax
  800420e74b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e74f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e753:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420e75a:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  800420e75f:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800420e763:	e9 fd 01 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  800420e768:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e76c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e770:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e773:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e777:	48 89 c7             	mov    %rax,%rdi
  800420e77a:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e781:	00 00 00 
  800420e784:	ff d0                	callq  *%rax
  800420e786:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800420e78a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e78e:	48 89 c7             	mov    %rax,%rdi
  800420e791:	48 b8 45 c0 20 04 80 	movabs $0x800420c045,%rax
  800420e798:	00 00 00 
  800420e79b:	ff d0                	callq  *%rax
  800420e79d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e7a1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e7a5:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e7a9:	0f b7 c0             	movzwl %ax,%eax
  800420e7ac:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e7b0:	77 0c                	ja     800420e7be <_dwarf_frame_run_inst+0xc1a>
  800420e7b2:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e7b9:	e9 b5 01 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800420e7be:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e7c2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e7c6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e7ca:	48 89 d0             	mov    %rdx,%rax
  800420e7cd:	48 01 c0             	add    %rax,%rax
  800420e7d0:	48 01 d0             	add    %rdx,%rax
  800420e7d3:	48 c1 e0 03          	shl    $0x3,%rax
  800420e7d7:	48 01 c8             	add    %rcx,%rax
  800420e7da:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  800420e7dd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e7e1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e7e5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e7e9:	48 89 d0             	mov    %rdx,%rax
  800420e7ec:	48 01 c0             	add    %rax,%rax
  800420e7ef:	48 01 d0             	add    %rdx,%rax
  800420e7f2:	48 c1 e0 03          	shl    $0x3,%rax
  800420e7f6:	48 01 c8             	add    %rcx,%rax
  800420e7f9:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  800420e7fd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e801:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e805:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e809:	48 89 d0             	mov    %rdx,%rax
  800420e80c:	48 01 c0             	add    %rax,%rax
  800420e80f:	48 01 d0             	add    %rdx,%rax
  800420e812:	48 c1 e0 03          	shl    $0x3,%rax
  800420e816:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e81a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420e81e:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800420e822:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  800420e826:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e82a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e82e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e832:	48 89 d0             	mov    %rdx,%rax
  800420e835:	48 01 c0             	add    %rax,%rax
  800420e838:	48 01 d0             	add    %rdx,%rax
  800420e83b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e83f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e843:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800420e84a:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  800420e84f:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800420e853:	e9 0d 01 00 00       	jmpq   800420e965 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  800420e858:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800420e85c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800420e860:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800420e863:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e867:	48 89 c7             	mov    %rax,%rdi
  800420e86a:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e871:	00 00 00 
  800420e874:	ff d0                	callq  *%rax
  800420e876:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800420e87a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e87e:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420e882:	0f b7 c0             	movzwl %ax,%eax
  800420e885:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420e889:	77 0c                	ja     800420e897 <_dwarf_frame_run_inst+0xcf3>
  800420e88b:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800420e892:	e9 dc 00 00 00       	jmpq   800420e973 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800420e897:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e89b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e89f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e8a3:	48 89 d0             	mov    %rdx,%rax
  800420e8a6:	48 01 c0             	add    %rax,%rax
  800420e8a9:	48 01 d0             	add    %rdx,%rax
  800420e8ac:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8b0:	48 01 c8             	add    %rcx,%rax
  800420e8b3:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  800420e8b6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e8ba:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e8be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e8c2:	48 89 d0             	mov    %rdx,%rax
  800420e8c5:	48 01 c0             	add    %rax,%rax
  800420e8c8:	48 01 d0             	add    %rdx,%rax
  800420e8cb:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8cf:	48 01 c8             	add    %rcx,%rax
  800420e8d2:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  800420e8d6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e8da:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e8de:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e8e2:	48 89 d0             	mov    %rdx,%rax
  800420e8e5:	48 01 c0             	add    %rax,%rax
  800420e8e8:	48 01 d0             	add    %rdx,%rax
  800420e8eb:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8ef:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  800420e8f3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420e8f7:	48 89 c7             	mov    %rax,%rdi
  800420e8fa:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420e901:	00 00 00 
  800420e904:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  800420e906:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  800420e90a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e90e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420e912:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e916:	48 89 d0             	mov    %rdx,%rax
  800420e919:	48 01 c0             	add    %rax,%rax
  800420e91c:	48 01 d0             	add    %rdx,%rax
  800420e91f:	48 c1 e0 03          	shl    $0x3,%rax
  800420e923:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420e927:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420e92b:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  800420e92f:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420e933:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420e937:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800420e93b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e93f:	48 89 d0             	mov    %rdx,%rax
  800420e942:	48 01 c0             	add    %rax,%rax
  800420e945:	48 01 d0             	add    %rdx,%rax
  800420e948:	48 c1 e0 03          	shl    $0x3,%rax
  800420e94c:	48 01 f0             	add    %rsi,%rax
  800420e94f:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420e953:	48 01 c8             	add    %rcx,%rax
  800420e956:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800420e95a:	eb 09                	jmp    800420e965 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  800420e95c:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  800420e963:	eb 0e                	jmp    800420e973 <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  800420e965:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420e969:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800420e96d:	0f 82 b8 f2 ff ff    	jb     800420dc2b <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  800420e973:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  800420e976:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  800420e97d:	5b                   	pop    %rbx
  800420e97e:	5d                   	pop    %rbp
  800420e97f:	c3                   	retq   

000000800420e980 <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  800420e980:	55                   	push   %rbp
  800420e981:	48 89 e5             	mov    %rsp,%rbp
  800420e984:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420e988:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420e98c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800420e990:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420e994:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800420e998:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  800420e99c:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  800420e9a0:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  800420e9a5:	75 35                	jne    800420e9dc <_dwarf_frame_get_internal_table+0x5c>
  800420e9a7:	48 b9 f8 38 21 04 80 	movabs $0x80042138f8,%rcx
  800420e9ae:	00 00 00 
  800420e9b1:	48 ba 07 38 21 04 80 	movabs $0x8004213807,%rdx
  800420e9b8:	00 00 00 
  800420e9bb:	be 83 01 00 00       	mov    $0x183,%esi
  800420e9c0:	48 bf 1c 38 21 04 80 	movabs $0x800421381c,%rdi
  800420e9c7:	00 00 00 
  800420e9ca:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e9cf:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420e9d6:	00 00 00 
  800420e9d9:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  800420e9dc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420e9e1:	75 35                	jne    800420ea18 <_dwarf_frame_get_internal_table+0x98>
  800420e9e3:	48 b9 07 39 21 04 80 	movabs $0x8004213907,%rcx
  800420e9ea:	00 00 00 
  800420e9ed:	48 ba 07 38 21 04 80 	movabs $0x8004213807,%rdx
  800420e9f4:	00 00 00 
  800420e9f7:	be 86 01 00 00       	mov    $0x186,%esi
  800420e9fc:	48 bf 1c 38 21 04 80 	movabs $0x800421381c,%rdi
  800420ea03:	00 00 00 
  800420ea06:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea0b:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420ea12:	00 00 00 
  800420ea15:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  800420ea18:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ea1c:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420ea20:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  800420ea24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ea28:	ba 18 00 00 00       	mov    $0x18,%edx
  800420ea2d:	be 00 00 00 00       	mov    $0x0,%esi
  800420ea32:	48 89 c7             	mov    %rax,%rdi
  800420ea35:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420ea3c:	00 00 00 
  800420ea3f:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  800420ea41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ea45:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420ea49:	0f b7 d0             	movzwl %ax,%edx
  800420ea4c:	48 89 d0             	mov    %rdx,%rax
  800420ea4f:	48 01 c0             	add    %rax,%rax
  800420ea52:	48 01 d0             	add    %rdx,%rax
  800420ea55:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea59:	48 89 c2             	mov    %rax,%rdx
  800420ea5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ea60:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420ea64:	be 00 00 00 00       	mov    $0x0,%esi
  800420ea69:	48 89 c7             	mov    %rax,%rdi
  800420ea6c:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  800420ea73:	00 00 00 
  800420ea76:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800420ea78:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420ea7f:	eb 2f                	jmp    800420eab0 <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  800420ea81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ea85:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420ea89:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ea8c:	48 63 d0             	movslq %eax,%rdx
  800420ea8f:	48 89 d0             	mov    %rdx,%rax
  800420ea92:	48 01 c0             	add    %rax,%rax
  800420ea95:	48 01 d0             	add    %rdx,%rax
  800420ea98:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea9c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800420eaa0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420eaa4:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  800420eaa8:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800420eaac:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420eab0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eab4:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800420eab8:	0f b7 c0             	movzwl %ax,%eax
  800420eabb:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420eabe:	7f c1                	jg     800420ea81 <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  800420eac0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420eac4:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420eac8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  800420eacc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ead1:	75 35                	jne    800420eb08 <_dwarf_frame_get_internal_table+0x188>
  800420ead3:	48 b9 13 39 21 04 80 	movabs $0x8004213913,%rcx
  800420eada:	00 00 00 
  800420eadd:	48 ba 07 38 21 04 80 	movabs $0x8004213807,%rdx
  800420eae4:	00 00 00 
  800420eae7:	be 95 01 00 00       	mov    $0x195,%esi
  800420eaec:	48 bf 1c 38 21 04 80 	movabs $0x800421381c,%rdi
  800420eaf3:	00 00 00 
  800420eaf6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eafb:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420eb02:	00 00 00 
  800420eb05:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  800420eb08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb0c:	4c 8b 48 40          	mov    0x40(%rax),%r9
  800420eb10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb14:	4c 8b 40 38          	mov    0x38(%rax),%r8
  800420eb18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb1c:	48 8b 48 70          	mov    0x70(%rax),%rcx
  800420eb20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb24:	48 8b 50 68          	mov    0x68(%rax),%rdx
  800420eb28:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420eb2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420eb30:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  800420eb34:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420eb39:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  800420eb3d:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420eb42:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  800420eb49:	ff ff 
  800420eb4b:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  800420eb52:	00 
  800420eb53:	48 89 c7             	mov    %rax,%rdi
  800420eb56:	48 b8 a4 db 20 04 80 	movabs $0x800420dba4,%rax
  800420eb5d:	00 00 00 
  800420eb60:	ff d0                	callq  *%rax
  800420eb62:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  800420eb65:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420eb69:	74 08                	je     800420eb73 <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  800420eb6b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420eb6e:	e9 98 00 00 00       	jmpq   800420ec0b <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  800420eb73:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420eb77:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420eb7b:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  800420eb7f:	77 6f                	ja     800420ebf0 <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  800420eb81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420eb85:	48 8b 78 30          	mov    0x30(%rax),%rdi
  800420eb89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb8d:	4c 8b 48 40          	mov    0x40(%rax),%r9
  800420eb91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eb95:	4c 8b 50 38          	mov    0x38(%rax),%r10
  800420eb99:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420eb9d:	48 8b 48 58          	mov    0x58(%rax),%rcx
  800420eba1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420eba5:	48 8b 50 50          	mov    0x50(%rax),%rdx
  800420eba9:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420ebad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ebb1:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  800420ebb5:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  800420ebba:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  800420ebbe:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  800420ebc3:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  800420ebc7:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  800420ebcc:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420ebd0:	4d 89 d0             	mov    %r10,%r8
  800420ebd3:	48 89 c7             	mov    %rax,%rdi
  800420ebd6:	48 b8 a4 db 20 04 80 	movabs $0x800420dba4,%rax
  800420ebdd:	00 00 00 
  800420ebe0:	ff d0                	callq  *%rax
  800420ebe2:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  800420ebe5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420ebe9:	74 05                	je     800420ebf0 <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  800420ebeb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420ebee:	eb 1b                	jmp    800420ec0b <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  800420ebf0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420ebf4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ebf8:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  800420ebfb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420ebff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ec03:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  800420ec06:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420ec0b:	c9                   	leaveq 
  800420ec0c:	c3                   	retq   

000000800420ec0d <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  800420ec0d:	55                   	push   %rbp
  800420ec0e:	48 89 e5             	mov    %rsp,%rbp
  800420ec11:	48 83 ec 50          	sub    $0x50,%rsp
  800420ec15:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420ec19:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420ec1d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800420ec21:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  800420ec25:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  800420ec29:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  800420ec2d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420ec32:	74 07                	je     800420ec3b <dwarf_get_fde_info_for_all_regs+0x2e>
  800420ec34:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800420ec39:	75 0a                	jne    800420ec45 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800420ec3b:	b8 01 00 00 00       	mov    $0x1,%eax
  800420ec40:	e9 eb 02 00 00       	jmpq   800420ef30 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  800420ec45:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420ec4a:	75 35                	jne    800420ec81 <dwarf_get_fde_info_for_all_regs+0x74>
  800420ec4c:	48 b9 07 39 21 04 80 	movabs $0x8004213907,%rcx
  800420ec53:	00 00 00 
  800420ec56:	48 ba 07 38 21 04 80 	movabs $0x8004213807,%rdx
  800420ec5d:	00 00 00 
  800420ec60:	be bf 01 00 00       	mov    $0x1bf,%esi
  800420ec65:	48 bf 1c 38 21 04 80 	movabs $0x800421381c,%rdi
  800420ec6c:	00 00 00 
  800420ec6f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec74:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420ec7b:	00 00 00 
  800420ec7e:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  800420ec81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ec85:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420ec89:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420ec8d:	77 19                	ja     800420eca8 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  800420ec8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ec93:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420ec97:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ec9b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420ec9f:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  800420eca2:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420eca6:	77 0a                	ja     800420ecb2 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  800420eca8:	b8 01 00 00 00       	mov    $0x1,%eax
  800420ecad:	e9 7e 02 00 00       	jmpq   800420ef30 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  800420ecb2:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  800420ecb6:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  800420ecba:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420ecbe:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420ecc2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420ecc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ecca:	4d 89 c1             	mov    %r8,%r9
  800420eccd:	49 89 f8             	mov    %rdi,%r8
  800420ecd0:	48 89 c7             	mov    %rax,%rdi
  800420ecd3:	48 b8 80 e9 20 04 80 	movabs $0x800420e980,%rax
  800420ecda:	00 00 00 
  800420ecdd:	ff d0                	callq  *%rax
  800420ecdf:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  800420ece2:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420ece6:	74 0a                	je     800420ecf2 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  800420ece8:	b8 01 00 00 00       	mov    $0x1,%eax
  800420eced:	e9 3e 02 00 00       	jmpq   800420ef30 <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  800420ecf2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ecf6:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800420ecfa:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  800420ecfe:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  800420ed03:	0f 87 b1 00 00 00    	ja     800420edba <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  800420ed09:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  800420ed0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ed11:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  800420ed14:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ed18:	48 63 c9             	movslq %ecx,%rcx
  800420ed1b:	48 83 c1 01          	add    $0x1,%rcx
  800420ed1f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed23:	48 01 ca             	add    %rcx,%rdx
  800420ed26:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  800420ed28:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800420ed2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ed30:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  800420ed34:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ed38:	48 63 c9             	movslq %ecx,%rcx
  800420ed3b:	48 83 c1 01          	add    $0x1,%rcx
  800420ed3f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed43:	48 01 ca             	add    %rcx,%rdx
  800420ed46:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  800420ed49:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800420ed4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ed51:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800420ed55:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ed59:	48 63 c9             	movslq %ecx,%rcx
  800420ed5c:	48 83 c1 01          	add    $0x1,%rcx
  800420ed60:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed64:	48 01 ca             	add    %rcx,%rdx
  800420ed67:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  800420ed6b:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800420ed6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ed73:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ed77:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ed7b:	48 63 c9             	movslq %ecx,%rcx
  800420ed7e:	48 83 c1 01          	add    $0x1,%rcx
  800420ed82:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed86:	48 01 ca             	add    %rcx,%rdx
  800420ed89:	48 83 c2 08          	add    $0x8,%rdx
  800420ed8d:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  800420ed90:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  800420ed94:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420ed98:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420ed9c:	48 63 d2             	movslq %edx,%rdx
  800420ed9f:	48 83 c2 01          	add    $0x1,%rdx
  800420eda3:	48 c1 e2 04          	shl    $0x4,%rdx
  800420eda7:	48 01 d0             	add    %rdx,%rax
  800420edaa:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420edae:	48 8b 00             	mov    (%rax),%rax
  800420edb1:	48 89 01             	mov    %rax,(%rcx)
  800420edb4:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  800420edb8:	eb 3c                	jmp    800420edf6 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  800420edba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420edbe:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  800420edc1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420edc5:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  800420edc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420edcb:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  800420edcf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420edd3:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  800420edd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420edda:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  800420edde:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420ede2:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  800420ede6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420edea:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420edee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420edf2:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  800420edf6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420edfd:	e9 fd 00 00 00       	jmpq   800420eeff <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  800420ee02:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  800420ee06:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420ee09:	75 05                	jne    800420ee10 <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  800420ee0b:	e9 eb 00 00 00       	jmpq   800420eefb <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  800420ee10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ee14:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420ee18:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ee1b:	48 63 d0             	movslq %eax,%rdx
  800420ee1e:	48 89 d0             	mov    %rdx,%rax
  800420ee21:	48 01 c0             	add    %rax,%rax
  800420ee24:	48 01 d0             	add    %rdx,%rax
  800420ee27:	48 c1 e0 03          	shl    $0x3,%rax
  800420ee2b:	48 01 c8             	add    %rcx,%rax
  800420ee2e:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  800420ee31:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ee35:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800420ee38:	48 63 c9             	movslq %ecx,%rcx
  800420ee3b:	48 83 c1 01          	add    $0x1,%rcx
  800420ee3f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ee43:	48 01 ca             	add    %rcx,%rdx
  800420ee46:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  800420ee48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ee4c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420ee50:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ee53:	48 63 d0             	movslq %eax,%rdx
  800420ee56:	48 89 d0             	mov    %rdx,%rax
  800420ee59:	48 01 c0             	add    %rax,%rax
  800420ee5c:	48 01 d0             	add    %rdx,%rax
  800420ee5f:	48 c1 e0 03          	shl    $0x3,%rax
  800420ee63:	48 01 c8             	add    %rcx,%rax
  800420ee66:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  800420ee6a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ee6e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800420ee71:	48 63 c9             	movslq %ecx,%rcx
  800420ee74:	48 83 c1 01          	add    $0x1,%rcx
  800420ee78:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ee7c:	48 01 ca             	add    %rcx,%rdx
  800420ee7f:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  800420ee82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ee86:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420ee8a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ee8d:	48 63 d0             	movslq %eax,%rdx
  800420ee90:	48 89 d0             	mov    %rdx,%rax
  800420ee93:	48 01 c0             	add    %rax,%rax
  800420ee96:	48 01 d0             	add    %rdx,%rax
  800420ee99:	48 c1 e0 03          	shl    $0x3,%rax
  800420ee9d:	48 01 c8             	add    %rcx,%rax
  800420eea0:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800420eea4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420eea8:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800420eeab:	48 63 c9             	movslq %ecx,%rcx
  800420eeae:	48 83 c1 01          	add    $0x1,%rcx
  800420eeb2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eeb6:	48 01 ca             	add    %rcx,%rdx
  800420eeb9:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  800420eebd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eec1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800420eec5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420eec8:	48 63 d0             	movslq %eax,%rdx
  800420eecb:	48 89 d0             	mov    %rdx,%rax
  800420eece:	48 01 c0             	add    %rax,%rax
  800420eed1:	48 01 d0             	add    %rdx,%rax
  800420eed4:	48 c1 e0 03          	shl    $0x3,%rax
  800420eed8:	48 01 c8             	add    %rcx,%rax
  800420eedb:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  800420eedf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420eee3:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800420eee6:	48 63 c9             	movslq %ecx,%rcx
  800420eee9:	48 83 c1 01          	add    $0x1,%rcx
  800420eeed:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eef1:	48 01 ca             	add    %rcx,%rdx
  800420eef4:	48 83 c2 08          	add    $0x8,%rdx
  800420eef8:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  800420eefb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  800420eeff:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  800420ef03:	7f 14                	jg     800420ef19 <dwarf_get_fde_info_for_all_regs+0x30c>
  800420ef05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ef09:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  800420ef0d:	0f b7 c0             	movzwl %ax,%eax
  800420ef10:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420ef13:	0f 8f e9 fe ff ff    	jg     800420ee02 <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  800420ef19:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  800420ef1e:	74 0b                	je     800420ef2b <dwarf_get_fde_info_for_all_regs+0x31e>
  800420ef20:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ef24:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420ef28:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  800420ef2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420ef30:	c9                   	leaveq 
  800420ef31:	c3                   	retq   

000000800420ef32 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  800420ef32:	55                   	push   %rbp
  800420ef33:	48 89 e5             	mov    %rsp,%rbp
  800420ef36:	48 83 ec 40          	sub    $0x40,%rsp
  800420ef3a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ef3e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420ef42:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420ef46:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  800420ef4a:	44 89 c0             	mov    %r8d,%eax
  800420ef4d:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  800420ef51:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  800420ef54:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  800420ef58:	75 0a                	jne    800420ef64 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  800420ef5a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ef5f:	e9 e6 01 00 00       	jmpq   800420f14a <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  800420ef64:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800420ef68:	83 e0 f0             	and    $0xfffffff0,%eax
  800420ef6b:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  800420ef6e:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  800420ef72:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800420ef76:	83 f8 0c             	cmp    $0xc,%eax
  800420ef79:	0f 87 72 01 00 00    	ja     800420f0f1 <_dwarf_frame_read_lsb_encoded+0x1bf>
  800420ef7f:	89 c0                	mov    %eax,%eax
  800420ef81:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420ef88:	00 
  800420ef89:	48 b8 20 39 21 04 80 	movabs $0x8004213920,%rax
  800420ef90:	00 00 00 
  800420ef93:	48 01 d0             	add    %rdx,%rax
  800420ef96:	48 8b 00             	mov    (%rax),%rax
  800420ef99:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  800420ef9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ef9f:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420efa3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420efa7:	8b 52 28             	mov    0x28(%rdx),%edx
  800420efaa:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420efae:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420efb2:	48 89 cf             	mov    %rcx,%rdi
  800420efb5:	ff d0                	callq  *%rax
  800420efb7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420efbb:	48 89 02             	mov    %rax,(%rdx)
		break;
  800420efbe:	e9 35 01 00 00       	jmpq   800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  800420efc3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420efc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420efcb:	48 89 d6             	mov    %rdx,%rsi
  800420efce:	48 89 c7             	mov    %rax,%rdi
  800420efd1:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420efd8:	00 00 00 
  800420efdb:	ff d0                	callq  *%rax
  800420efdd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420efe1:	48 89 02             	mov    %rax,(%rdx)
		break;
  800420efe4:	e9 0f 01 00 00       	jmpq   800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  800420efe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420efed:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420eff1:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420eff5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420eff9:	ba 02 00 00 00       	mov    $0x2,%edx
  800420effe:	48 89 cf             	mov    %rcx,%rdi
  800420f001:	ff d0                	callq  *%rax
  800420f003:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f007:	48 89 02             	mov    %rax,(%rdx)
		break;
  800420f00a:	e9 e9 00 00 00       	jmpq   800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  800420f00f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f013:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f017:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420f01b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f01f:	ba 04 00 00 00       	mov    $0x4,%edx
  800420f024:	48 89 cf             	mov    %rcx,%rdi
  800420f027:	ff d0                	callq  *%rax
  800420f029:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f02d:	48 89 02             	mov    %rax,(%rdx)
		break;
  800420f030:	e9 c3 00 00 00       	jmpq   800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  800420f035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f039:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f03d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420f041:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f045:	ba 08 00 00 00       	mov    $0x8,%edx
  800420f04a:	48 89 cf             	mov    %rcx,%rdi
  800420f04d:	ff d0                	callq  *%rax
  800420f04f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f053:	48 89 02             	mov    %rax,(%rdx)
		break;
  800420f056:	e9 9d 00 00 00       	jmpq   800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  800420f05b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f05f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f063:	48 89 d6             	mov    %rdx,%rsi
  800420f066:	48 89 c7             	mov    %rax,%rdi
  800420f069:	48 b8 22 bf 20 04 80 	movabs $0x800420bf22,%rax
  800420f070:	00 00 00 
  800420f073:	ff d0                	callq  *%rax
  800420f075:	48 89 c2             	mov    %rax,%rdx
  800420f078:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f07c:	48 89 10             	mov    %rdx,(%rax)
		break;
  800420f07f:	eb 77                	jmp    800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  800420f081:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f085:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f089:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420f08d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f091:	ba 02 00 00 00       	mov    $0x2,%edx
  800420f096:	48 89 cf             	mov    %rcx,%rdi
  800420f099:	ff d0                	callq  *%rax
  800420f09b:	48 0f bf d0          	movswq %ax,%rdx
  800420f09f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f0a3:	48 89 10             	mov    %rdx,(%rax)
		break;
  800420f0a6:	eb 50                	jmp    800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  800420f0a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f0ac:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f0b0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420f0b4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f0b8:	ba 04 00 00 00       	mov    $0x4,%edx
  800420f0bd:	48 89 cf             	mov    %rcx,%rdi
  800420f0c0:	ff d0                	callq  *%rax
  800420f0c2:	48 63 d0             	movslq %eax,%rdx
  800420f0c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f0c9:	48 89 10             	mov    %rdx,(%rax)
		break;
  800420f0cc:	eb 2a                	jmp    800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  800420f0ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f0d2:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f0d6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420f0da:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f0de:	ba 08 00 00 00       	mov    $0x8,%edx
  800420f0e3:	48 89 cf             	mov    %rcx,%rdi
  800420f0e6:	ff d0                	callq  *%rax
  800420f0e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f0ec:	48 89 02             	mov    %rax,(%rdx)
		break;
  800420f0ef:	eb 07                	jmp    800420f0f8 <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  800420f0f1:	b8 14 00 00 00       	mov    $0x14,%eax
  800420f0f6:	eb 52                	jmp    800420f14a <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  800420f0f8:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  800420f0fc:	75 47                	jne    800420f145 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  800420f0fe:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800420f102:	83 f8 01             	cmp    $0x1,%eax
  800420f105:	7c 3d                	jl     800420f144 <_dwarf_frame_read_lsb_encoded+0x212>
  800420f107:	83 f8 04             	cmp    $0x4,%eax
  800420f10a:	7e 0a                	jle    800420f116 <_dwarf_frame_read_lsb_encoded+0x1e4>
  800420f10c:	83 e8 09             	sub    $0x9,%eax
  800420f10f:	83 f8 03             	cmp    $0x3,%eax
  800420f112:	77 30                	ja     800420f144 <_dwarf_frame_read_lsb_encoded+0x212>
  800420f114:	eb 17                	jmp    800420f12d <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  800420f116:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f11a:	48 8b 10             	mov    (%rax),%rdx
  800420f11d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f121:	48 01 c2             	add    %rax,%rdx
  800420f124:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f128:	48 89 10             	mov    %rdx,(%rax)
			break;
  800420f12b:	eb 18                	jmp    800420f145 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  800420f12d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f131:	48 8b 10             	mov    (%rax),%rdx
  800420f134:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f138:	48 01 c2             	add    %rax,%rdx
  800420f13b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f13f:	48 89 10             	mov    %rdx,(%rax)
			break;
  800420f142:	eb 01                	jmp    800420f145 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  800420f144:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  800420f145:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420f14a:	c9                   	leaveq 
  800420f14b:	c3                   	retq   

000000800420f14c <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  800420f14c:	55                   	push   %rbp
  800420f14d:	48 89 e5             	mov    %rsp,%rbp
  800420f150:	48 83 ec 50          	sub    $0x50,%rsp
  800420f154:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420f158:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800420f15c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  800420f160:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f164:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f168:	48 85 c0             	test   %rax,%rax
  800420f16b:	74 0f                	je     800420f17c <_dwarf_frame_parse_lsb_cie_augment+0x30>
  800420f16d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f171:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f175:	0f b6 00             	movzbl (%rax),%eax
  800420f178:	3c 7a                	cmp    $0x7a,%al
  800420f17a:	74 35                	je     800420f1b1 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  800420f17c:	48 b9 88 39 21 04 80 	movabs $0x8004213988,%rcx
  800420f183:	00 00 00 
  800420f186:	48 ba 07 38 21 04 80 	movabs $0x8004213807,%rdx
  800420f18d:	00 00 00 
  800420f190:	be 4a 02 00 00       	mov    $0x24a,%esi
  800420f195:	48 bf 1c 38 21 04 80 	movabs $0x800421381c,%rdi
  800420f19c:	00 00 00 
  800420f19f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f1a4:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420f1ab:	00 00 00 
  800420f1ae:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  800420f1b1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f1b5:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f1b9:	48 83 c0 01          	add    $0x1,%rax
  800420f1bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  800420f1c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f1c5:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420f1c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  800420f1cd:	e9 af 00 00 00       	jmpq   800420f281 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  800420f1d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f1d6:	0f b6 00             	movzbl (%rax),%eax
  800420f1d9:	0f b6 c0             	movzbl %al,%eax
  800420f1dc:	83 f8 50             	cmp    $0x50,%eax
  800420f1df:	74 18                	je     800420f1f9 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  800420f1e1:	83 f8 52             	cmp    $0x52,%eax
  800420f1e4:	74 77                	je     800420f25d <_dwarf_frame_parse_lsb_cie_augment+0x111>
  800420f1e6:	83 f8 4c             	cmp    $0x4c,%eax
  800420f1e9:	0f 85 86 00 00 00    	jne    800420f275 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  800420f1ef:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  800420f1f4:	e9 83 00 00 00       	jmpq   800420f27c <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  800420f1f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f1fd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f201:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  800420f205:	0f b6 00             	movzbl (%rax),%eax
  800420f208:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  800420f20b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800420f212:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800420f213:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  800420f218:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420f21c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f220:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  800420f224:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f228:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800420f22c:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f230:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420f236:	48 89 c7             	mov    %rax,%rdi
  800420f239:	48 b8 32 ef 20 04 80 	movabs $0x800420ef32,%rax
  800420f240:	00 00 00 
  800420f243:	ff d0                	callq  *%rax
  800420f245:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  800420f248:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  800420f24c:	74 05                	je     800420f253 <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  800420f24e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420f251:	eb 42                	jmp    800420f295 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  800420f253:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f257:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  800420f25b:	eb 1f                	jmp    800420f27c <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  800420f25d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f261:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f265:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  800420f269:	0f b6 10             	movzbl (%rax),%edx
  800420f26c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f270:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  800420f273:	eb 07                	jmp    800420f27c <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  800420f275:	b8 14 00 00 00       	mov    $0x14,%eax
  800420f27a:	eb 19                	jmp    800420f295 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  800420f27c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  800420f281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f285:	0f b6 00             	movzbl (%rax),%eax
  800420f288:	84 c0                	test   %al,%al
  800420f28a:	0f 85 42 ff ff ff    	jne    800420f1d2 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  800420f290:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420f295:	c9                   	leaveq 
  800420f296:	c3                   	retq   

000000800420f297 <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  800420f297:	55                   	push   %rbp
  800420f298:	48 89 e5             	mov    %rsp,%rbp
  800420f29b:	48 83 ec 60          	sub    $0x60,%rsp
  800420f29f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420f2a3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800420f2a7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420f2ab:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800420f2af:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  800420f2b3:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  800420f2b8:	75 35                	jne    800420f2ef <_dwarf_frame_set_cie+0x58>
  800420f2ba:	48 b9 bd 39 21 04 80 	movabs $0x80042139bd,%rcx
  800420f2c1:	00 00 00 
  800420f2c4:	48 ba 07 38 21 04 80 	movabs $0x8004213807,%rdx
  800420f2cb:	00 00 00 
  800420f2ce:	be 7b 02 00 00       	mov    $0x27b,%esi
  800420f2d3:	48 bf 1c 38 21 04 80 	movabs $0x800421381c,%rdi
  800420f2da:	00 00 00 
  800420f2dd:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f2e2:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800420f2e9:	00 00 00 
  800420f2ec:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  800420f2ef:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f2f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  800420f2f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2fb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f2ff:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  800420f302:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f306:	48 8b 10             	mov    (%rax),%rdx
  800420f309:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f30d:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  800420f311:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f315:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f319:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f31d:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f321:	48 89 d1             	mov    %rdx,%rcx
  800420f324:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800420f328:	ba 04 00 00 00       	mov    $0x4,%edx
  800420f32d:	48 89 cf             	mov    %rcx,%rdi
  800420f330:	ff d0                	callq  *%rax
  800420f332:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  800420f336:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f33b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800420f33f:	75 2e                	jne    800420f36f <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  800420f341:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  800420f348:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f34c:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f350:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f354:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f358:	48 89 d1             	mov    %rdx,%rcx
  800420f35b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800420f35f:	ba 08 00 00 00       	mov    $0x8,%edx
  800420f364:	48 89 cf             	mov    %rcx,%rdi
  800420f367:	ff d0                	callq  *%rax
  800420f369:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f36d:	eb 07                	jmp    800420f376 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  800420f36f:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  800420f376:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f37a:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800420f37e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f382:	48 8b 00             	mov    (%rax),%rax
  800420f385:	48 29 c2             	sub    %rax,%rdx
  800420f388:	48 89 d0             	mov    %rdx,%rax
  800420f38b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420f38f:	73 0a                	jae    800420f39b <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  800420f391:	b8 12 00 00 00       	mov    $0x12,%eax
  800420f396:	e9 5d 03 00 00       	jmpq   800420f6f8 <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  800420f39b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f39f:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f3a3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f3a7:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f3ab:	48 89 d1             	mov    %rdx,%rcx
  800420f3ae:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420f3b1:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800420f3b5:	48 89 cf             	mov    %rcx,%rdi
  800420f3b8:	ff d0                	callq  *%rax
	cie->cie_length = length;
  800420f3ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420f3c2:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  800420f3c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f3ca:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f3ce:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f3d2:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f3d6:	48 89 d1             	mov    %rdx,%rcx
  800420f3d9:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800420f3dd:	ba 01 00 00 00       	mov    $0x1,%edx
  800420f3e2:	48 89 cf             	mov    %rcx,%rdi
  800420f3e5:	ff d0                	callq  *%rax
  800420f3e7:	89 c2                	mov    %eax,%edx
  800420f3e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3ed:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  800420f3f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3f5:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  800420f3f9:	66 83 f8 01          	cmp    $0x1,%ax
  800420f3fd:	74 26                	je     800420f425 <_dwarf_frame_set_cie+0x18e>
  800420f3ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f403:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  800420f407:	66 83 f8 03          	cmp    $0x3,%ax
  800420f40b:	74 18                	je     800420f425 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  800420f40d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f411:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  800420f415:	66 83 f8 04          	cmp    $0x4,%ax
  800420f419:	74 0a                	je     800420f425 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  800420f41b:	b8 16 00 00 00       	mov    $0x16,%eax
  800420f420:	e9 d3 02 00 00       	jmpq   800420f6f8 <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  800420f425:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f429:	48 8b 10             	mov    (%rax),%rdx
  800420f42c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f430:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f434:	48 01 d0             	add    %rdx,%rax
  800420f437:	48 89 c2             	mov    %rax,%rdx
  800420f43a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f43e:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  800420f442:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f446:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f44a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  800420f44e:	90                   	nop
  800420f44f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f453:	48 8b 00             	mov    (%rax),%rax
  800420f456:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800420f45a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420f45e:	48 89 0a             	mov    %rcx,(%rdx)
  800420f461:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f465:	48 01 d0             	add    %rdx,%rax
  800420f468:	0f b6 00             	movzbl (%rax),%eax
  800420f46b:	84 c0                	test   %al,%al
  800420f46d:	75 e0                	jne    800420f44f <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  800420f46f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f473:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f477:	0f b6 00             	movzbl (%rax),%eax
  800420f47a:	84 c0                	test   %al,%al
  800420f47c:	74 48                	je     800420f4c6 <_dwarf_frame_set_cie+0x22f>
  800420f47e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f482:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f486:	0f b6 00             	movzbl (%rax),%eax
  800420f489:	3c 7a                	cmp    $0x7a,%al
  800420f48b:	74 39                	je     800420f4c6 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  800420f48d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f491:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f495:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800420f499:	75 07                	jne    800420f4a2 <_dwarf_frame_set_cie+0x20b>
  800420f49b:	b8 04 00 00 00       	mov    $0x4,%eax
  800420f4a0:	eb 05                	jmp    800420f4a7 <_dwarf_frame_set_cie+0x210>
  800420f4a2:	b8 0c 00 00 00       	mov    $0xc,%eax
  800420f4a7:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  800420f4aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4ae:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  800420f4b2:	48 01 c2             	add    %rax,%rdx
  800420f4b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f4b9:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  800420f4bc:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f4c1:	e9 32 02 00 00       	jmpq   800420f6f8 <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  800420f4c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4ca:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f4ce:	48 be c5 39 21 04 80 	movabs $0x80042139c5,%rsi
  800420f4d5:	00 00 00 
  800420f4d8:	48 89 c7             	mov    %rax,%rdi
  800420f4db:	48 b8 d9 b8 20 04 80 	movabs $0x800420b8d9,%rax
  800420f4e2:	00 00 00 
  800420f4e5:	ff d0                	callq  *%rax
  800420f4e7:	48 85 c0             	test   %rax,%rax
  800420f4ea:	74 28                	je     800420f514 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800420f4ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f4f0:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f4f4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f4f8:	8b 52 28             	mov    0x28(%rdx),%edx
  800420f4fb:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800420f4ff:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800420f503:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800420f507:	48 89 cf             	mov    %rcx,%rdi
  800420f50a:	ff d0                	callq  *%rax
  800420f50c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f510:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800420f514:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f518:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f51c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420f520:	48 89 d6             	mov    %rdx,%rsi
  800420f523:	48 89 c7             	mov    %rax,%rdi
  800420f526:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420f52d:	00 00 00 
  800420f530:	ff d0                	callq  *%rax
  800420f532:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f536:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800420f53a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f53e:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f542:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420f546:	48 89 d6             	mov    %rdx,%rsi
  800420f549:	48 89 c7             	mov    %rax,%rdi
  800420f54c:	48 b8 22 bf 20 04 80 	movabs $0x800420bf22,%rax
  800420f553:	00 00 00 
  800420f556:	ff d0                	callq  *%rax
  800420f558:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f55c:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  800420f560:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f564:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  800420f568:	66 83 f8 01          	cmp    $0x1,%ax
  800420f56c:	75 2b                	jne    800420f599 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  800420f56e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f572:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f576:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f57a:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f57e:	48 89 d1             	mov    %rdx,%rcx
  800420f581:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800420f585:	ba 01 00 00 00       	mov    $0x1,%edx
  800420f58a:	48 89 cf             	mov    %rcx,%rdi
  800420f58d:	ff d0                	callq  *%rax
  800420f58f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f593:	48 89 42 48          	mov    %rax,0x48(%rdx)
  800420f597:	eb 26                	jmp    800420f5bf <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800420f599:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f59d:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f5a1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420f5a5:	48 89 d6             	mov    %rdx,%rsi
  800420f5a8:	48 89 c7             	mov    %rax,%rdi
  800420f5ab:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420f5b2:	00 00 00 
  800420f5b5:	ff d0                	callq  *%rax
  800420f5b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f5bb:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  800420f5bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5c3:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f5c7:	0f b6 00             	movzbl (%rax),%eax
  800420f5ca:	3c 7a                	cmp    $0x7a,%al
  800420f5cc:	0f 85 93 00 00 00    	jne    800420f665 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800420f5d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f5d6:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f5da:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420f5de:	48 89 d6             	mov    %rdx,%rsi
  800420f5e1:	48 89 c7             	mov    %rax,%rdi
  800420f5e4:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420f5eb:	00 00 00 
  800420f5ee:	ff d0                	callq  *%rax
  800420f5f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f5f4:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  800420f5f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f5fc:	48 8b 10             	mov    (%rax),%rdx
  800420f5ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f603:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f607:	48 01 d0             	add    %rdx,%rax
  800420f60a:	48 89 c2             	mov    %rax,%rdx
  800420f60d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f611:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  800420f615:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f619:	48 8b 10             	mov    (%rax),%rdx
  800420f61c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f620:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420f624:	48 01 c2             	add    %rax,%rdx
  800420f627:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f62b:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  800420f62e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f632:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  800420f636:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420f63a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f63e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f642:	48 89 ce             	mov    %rcx,%rsi
  800420f645:	48 89 c7             	mov    %rax,%rdi
  800420f648:	48 b8 4c f1 20 04 80 	movabs $0x800420f14c,%rax
  800420f64f:	00 00 00 
  800420f652:	ff d0                	callq  *%rax
  800420f654:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  800420f657:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f65b:	74 08                	je     800420f665 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  800420f65d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420f660:	e9 93 00 00 00       	jmpq   800420f6f8 <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  800420f665:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f669:	48 8b 10             	mov    (%rax),%rdx
  800420f66c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f670:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f674:	48 01 d0             	add    %rdx,%rax
  800420f677:	48 89 c2             	mov    %rax,%rdx
  800420f67a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f67e:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  800420f682:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800420f686:	75 2a                	jne    800420f6b2 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  800420f688:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f68c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f690:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f694:	48 01 c2             	add    %rax,%rdx
  800420f697:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f69b:	48 8b 00             	mov    (%rax),%rax
  800420f69e:	48 29 c2             	sub    %rax,%rdx
  800420f6a1:	48 89 d0             	mov    %rdx,%rax
  800420f6a4:	48 8d 50 04          	lea    0x4(%rax),%rdx
  800420f6a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6ac:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420f6b0:	eb 28                	jmp    800420f6da <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  800420f6b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6b6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f6ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f6be:	48 01 c2             	add    %rax,%rdx
  800420f6c1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f6c5:	48 8b 00             	mov    (%rax),%rax
  800420f6c8:	48 29 c2             	sub    %rax,%rdx
  800420f6cb:	48 89 d0             	mov    %rdx,%rax
  800420f6ce:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  800420f6d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6d6:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  800420f6da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f6de:	48 8b 10             	mov    (%rax),%rdx
  800420f6e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6e5:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420f6e9:	48 01 c2             	add    %rax,%rdx
  800420f6ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f6f0:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  800420f6f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420f6f8:	c9                   	leaveq 
  800420f6f9:	c3                   	retq   

000000800420f6fa <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  800420f6fa:	55                   	push   %rbp
  800420f6fb:	48 89 e5             	mov    %rsp,%rbp
  800420f6fe:	48 83 ec 70          	sub    $0x70,%rsp
  800420f702:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420f706:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800420f70a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420f70e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800420f712:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  800420f716:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  800420f71a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f71e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  800420f722:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f726:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f72a:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  800420f72d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f731:	48 8b 10             	mov    (%rax),%rdx
  800420f734:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f738:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f73c:	48 01 d0             	add    %rdx,%rax
  800420f73f:	48 89 c2             	mov    %rax,%rdx
  800420f742:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f746:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  800420f74a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f74e:	48 8b 10             	mov    (%rax),%rdx
  800420f751:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f755:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  800420f759:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f75d:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f761:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f765:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f769:	48 89 d1             	mov    %rdx,%rcx
  800420f76c:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420f770:	ba 04 00 00 00       	mov    $0x4,%edx
  800420f775:	48 89 cf             	mov    %rcx,%rdi
  800420f778:	ff d0                	callq  *%rax
  800420f77a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  800420f77e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f783:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800420f787:	75 2e                	jne    800420f7b7 <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  800420f789:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  800420f790:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f794:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f798:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f79c:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f7a0:	48 89 d1             	mov    %rdx,%rcx
  800420f7a3:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420f7a7:	ba 08 00 00 00       	mov    $0x8,%edx
  800420f7ac:	48 89 cf             	mov    %rcx,%rdi
  800420f7af:	ff d0                	callq  *%rax
  800420f7b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f7b5:	eb 07                	jmp    800420f7be <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  800420f7b7:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  800420f7be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f7c2:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800420f7c6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f7ca:	48 8b 00             	mov    (%rax),%rax
  800420f7cd:	48 29 c2             	sub    %rax,%rdx
  800420f7d0:	48 89 d0             	mov    %rdx,%rax
  800420f7d3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420f7d7:	73 0a                	jae    800420f7e3 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  800420f7d9:	b8 12 00 00 00       	mov    $0x12,%eax
  800420f7de:	e9 ca 02 00 00       	jmpq   800420faad <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  800420f7e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f7e7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420f7eb:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  800420f7ef:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800420f7f3:	74 5e                	je     800420f853 <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  800420f7f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f7f9:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f7fd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f801:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f805:	48 89 d1             	mov    %rdx,%rcx
  800420f808:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420f80c:	ba 04 00 00 00       	mov    $0x4,%edx
  800420f811:	48 89 cf             	mov    %rcx,%rdi
  800420f814:	ff d0                	callq  *%rax
  800420f816:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f81a:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  800420f81e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f822:	48 8b 10             	mov    (%rax),%rdx
  800420f825:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f829:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f82d:	48 29 c2             	sub    %rax,%rdx
  800420f830:	48 89 d0             	mov    %rdx,%rax
  800420f833:	48 83 e8 04          	sub    $0x4,%rax
  800420f837:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  800420f83b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f83f:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f843:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800420f847:	75 3d                	jne    800420f886 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  800420f849:	b8 13 00 00 00       	mov    $0x13,%eax
  800420f84e:	e9 5a 02 00 00       	jmpq   800420faad <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  800420f853:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f857:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f85b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f85f:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420f863:	48 89 d1             	mov    %rdx,%rcx
  800420f866:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420f869:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420f86d:	48 89 cf             	mov    %rcx,%rdi
  800420f870:	ff d0                	callq  *%rax
  800420f872:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f876:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  800420f87a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f87e:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f882:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  800420f886:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800420f88a:	0f 84 c9 00 00 00    	je     800420f959 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  800420f890:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420f894:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f898:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f89c:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800420f89f:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  800420f8a3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420f8a7:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800420f8ab:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  800420f8af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f8b3:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800420f8b7:	48 89 c2             	mov    %rax,%rdx
  800420f8ba:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420f8be:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  800420f8c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f8c6:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800420f8ca:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f8ce:	48 89 c7             	mov    %rax,%rdi
  800420f8d1:	48 b8 32 ef 20 04 80 	movabs $0x800420ef32,%rax
  800420f8d8:	00 00 00 
  800420f8db:	ff d0                	callq  *%rax
  800420f8dd:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  800420f8e0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f8e4:	74 08                	je     800420f8ee <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  800420f8e6:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420f8e9:	e9 bf 01 00 00       	jmpq   800420faad <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  800420f8ee:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f8f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f8f6:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  800420f8fa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420f8fe:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800420f902:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  800420f906:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f90a:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800420f90e:	48 89 c2             	mov    %rax,%rdx
  800420f911:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420f915:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  800420f919:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f91d:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  800420f921:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f925:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420f92b:	48 89 c7             	mov    %rax,%rdi
  800420f92e:	48 b8 32 ef 20 04 80 	movabs $0x800420ef32,%rax
  800420f935:	00 00 00 
  800420f938:	ff d0                	callq  *%rax
  800420f93a:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  800420f93d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f941:	74 08                	je     800420f94b <_dwarf_frame_set_fde+0x251>
			return (ret);
  800420f943:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420f946:	e9 62 01 00 00       	jmpq   800420faad <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  800420f94b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f94f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f953:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800420f957:	eb 50                	jmp    800420f9a9 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800420f959:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f95d:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f961:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f965:	8b 52 28             	mov    0x28(%rdx),%edx
  800420f968:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800420f96c:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800420f970:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420f974:	48 89 cf             	mov    %rcx,%rdi
  800420f977:	ff d0                	callq  *%rax
  800420f979:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f97d:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800420f981:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f985:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f989:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420f98d:	8b 52 28             	mov    0x28(%rdx),%edx
  800420f990:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800420f994:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800420f998:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420f99c:	48 89 cf             	mov    %rcx,%rdi
  800420f99f:	ff d0                	callq  *%rax
  800420f9a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f9a5:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  800420f9a9:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800420f9ad:	74 6b                	je     800420fa1a <_dwarf_frame_set_fde+0x320>
  800420f9af:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420f9b3:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f9b7:	0f b6 00             	movzbl (%rax),%eax
  800420f9ba:	3c 7a                	cmp    $0x7a,%al
  800420f9bc:	75 5c                	jne    800420fa1a <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800420f9be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f9c2:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f9c6:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420f9ca:	48 89 d6             	mov    %rdx,%rsi
  800420f9cd:	48 89 c7             	mov    %rax,%rdi
  800420f9d0:	48 b8 c6 bf 20 04 80 	movabs $0x800420bfc6,%rax
  800420f9d7:	00 00 00 
  800420f9da:	ff d0                	callq  *%rax
  800420f9dc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f9e0:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  800420f9e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f9e8:	48 8b 10             	mov    (%rax),%rdx
  800420f9eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f9ef:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f9f3:	48 01 d0             	add    %rdx,%rax
  800420f9f6:	48 89 c2             	mov    %rax,%rdx
  800420f9f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f9fd:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  800420fa01:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fa05:	48 8b 10             	mov    (%rax),%rdx
  800420fa08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa0c:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420fa10:	48 01 c2             	add    %rax,%rdx
  800420fa13:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fa17:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  800420fa1a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fa1e:	48 8b 10             	mov    (%rax),%rdx
  800420fa21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fa25:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420fa29:	48 01 d0             	add    %rdx,%rax
  800420fa2c:	48 89 c2             	mov    %rax,%rdx
  800420fa2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa33:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  800420fa37:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800420fa3b:	75 2a                	jne    800420fa67 <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  800420fa3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa41:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800420fa45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fa49:	48 01 c2             	add    %rax,%rdx
  800420fa4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fa50:	48 8b 00             	mov    (%rax),%rax
  800420fa53:	48 29 c2             	sub    %rax,%rdx
  800420fa56:	48 89 d0             	mov    %rdx,%rax
  800420fa59:	48 8d 50 04          	lea    0x4(%rax),%rdx
  800420fa5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa61:	48 89 50 58          	mov    %rdx,0x58(%rax)
  800420fa65:	eb 28                	jmp    800420fa8f <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  800420fa67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa6b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800420fa6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fa73:	48 01 c2             	add    %rax,%rdx
  800420fa76:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fa7a:	48 8b 00             	mov    (%rax),%rax
  800420fa7d:	48 29 c2             	sub    %rax,%rdx
  800420fa80:	48 89 d0             	mov    %rdx,%rax
  800420fa83:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  800420fa87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa8b:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  800420fa8f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fa93:	48 8b 10             	mov    (%rax),%rdx
  800420fa96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fa9a:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420fa9e:	48 01 c2             	add    %rax,%rdx
  800420faa1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420faa5:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  800420faa8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420faad:	c9                   	leaveq 
  800420faae:	c3                   	retq   

000000800420faaf <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800420faaf:	55                   	push   %rbp
  800420fab0:	48 89 e5             	mov    %rsp,%rbp
  800420fab3:	48 83 ec 20          	sub    $0x20,%rsp
  800420fab7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fabb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  800420fabf:	48 b8 e0 d5 2b 04 80 	movabs $0x80042bd5e0,%rax
  800420fac6:	00 00 00 
  800420fac9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  800420facd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fad1:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420fad5:	48 85 c0             	test   %rax,%rax
  800420fad8:	74 07                	je     800420fae1 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  800420fada:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fadf:	eb 33                	jmp    800420fb14 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  800420fae1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fae5:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  800420fae9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420faed:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  800420faf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420faf5:	48 b9 a0 de 2b 04 80 	movabs $0x80042bdea0,%rcx
  800420fafc:	00 00 00 
  800420faff:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  800420fb03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb07:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420fb0b:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  800420fb0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420fb14:	c9                   	leaveq 
  800420fb15:	c3                   	retq   

000000800420fb16 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  800420fb16:	55                   	push   %rbp
  800420fb17:	48 89 e5             	mov    %rsp,%rbp
  800420fb1a:	48 83 ec 60          	sub    $0x60,%rsp
  800420fb1e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420fb22:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800420fb25:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420fb29:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  800420fb2d:	48 b8 20 66 22 04 80 	movabs $0x8004226620,%rax
  800420fb34:	00 00 00 
  800420fb37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  800420fb3b:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  800420fb42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fb46:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420fb4a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  800420fb4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fb52:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800420fb56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fb5a:	48 39 c2             	cmp    %rax,%rdx
  800420fb5d:	0f 86 fe 01 00 00    	jbe    800420fd61 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  800420fb63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fb67:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  800420fb6b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fb6f:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420fb73:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420fb77:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420fb7b:	48 89 d1             	mov    %rdx,%rcx
  800420fb7e:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800420fb82:	ba 04 00 00 00       	mov    $0x4,%edx
  800420fb87:	48 89 cf             	mov    %rcx,%rdi
  800420fb8a:	ff d0                	callq  *%rax
  800420fb8c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  800420fb90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fb95:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800420fb99:	75 2e                	jne    800420fbc9 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  800420fb9b:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  800420fba2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fba6:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420fbaa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420fbae:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420fbb2:	48 89 d1             	mov    %rdx,%rcx
  800420fbb5:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800420fbb9:	ba 08 00 00 00       	mov    $0x8,%edx
  800420fbbe:	48 89 cf             	mov    %rcx,%rdi
  800420fbc1:	ff d0                	callq  *%rax
  800420fbc3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fbc7:	eb 07                	jmp    800420fbd0 <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  800420fbc9:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  800420fbd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fbd4:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800420fbd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fbdc:	48 29 c2             	sub    %rax,%rdx
  800420fbdf:	48 89 d0             	mov    %rdx,%rax
  800420fbe2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420fbe6:	72 0d                	jb     800420fbf5 <_dwarf_get_next_fde+0xdf>
  800420fbe8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420fbed:	75 10                	jne    800420fbff <_dwarf_get_next_fde+0xe9>
  800420fbef:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420fbf3:	75 0a                	jne    800420fbff <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  800420fbf5:	b8 12 00 00 00       	mov    $0x12,%eax
  800420fbfa:	e9 67 01 00 00       	jmpq   800420fd66 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  800420fbff:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420fc03:	74 11                	je     800420fc16 <_dwarf_get_next_fde+0x100>
  800420fc05:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420fc0a:	75 0a                	jne    800420fc16 <_dwarf_get_next_fde+0x100>
			return(-1);
  800420fc0c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fc11:	e9 50 01 00 00       	jmpq   800420fd66 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  800420fc16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fc1a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420fc1e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420fc22:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800420fc26:	48 89 d1             	mov    %rdx,%rcx
  800420fc29:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420fc2c:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  800420fc30:	48 89 cf             	mov    %rcx,%rdi
  800420fc33:	ff d0                	callq  *%rax
  800420fc35:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  800420fc39:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420fc3d:	74 79                	je     800420fcb8 <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  800420fc3f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420fc44:	75 32                	jne    800420fc78 <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  800420fc46:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fc4a:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800420fc4e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800420fc52:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420fc56:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420fc5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fc5e:	49 89 f8             	mov    %rdi,%r8
  800420fc61:	48 89 c7             	mov    %rax,%rdi
  800420fc64:	48 b8 97 f2 20 04 80 	movabs $0x800420f297,%rax
  800420fc6b:	00 00 00 
  800420fc6e:	ff d0                	callq  *%rax
  800420fc70:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800420fc73:	e9 c8 00 00 00       	jmpq   800420fd40 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  800420fc78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fc7c:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800420fc80:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420fc84:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc88:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420fc8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fc90:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800420fc94:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420fc98:	4d 89 c1             	mov    %r8,%r9
  800420fc9b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800420fca1:	48 89 c7             	mov    %rax,%rdi
  800420fca4:	48 b8 fa f6 20 04 80 	movabs $0x800420f6fa,%rax
  800420fcab:	00 00 00 
  800420fcae:	ff d0                	callq  *%rax
  800420fcb0:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800420fcb3:	e9 88 00 00 00       	jmpq   800420fd40 <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  800420fcb8:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800420fcbc:	75 0b                	jne    800420fcc9 <_dwarf_get_next_fde+0x1b3>
  800420fcbe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fcc3:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420fcc7:	74 0d                	je     800420fcd6 <_dwarf_get_next_fde+0x1c0>
  800420fcc9:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  800420fccd:	75 36                	jne    800420fd05 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  800420fccf:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  800420fcd4:	75 2f                	jne    800420fd05 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  800420fcd6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fcda:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800420fcde:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800420fce2:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420fce6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420fcea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fcee:	49 89 f8             	mov    %rdi,%r8
  800420fcf1:	48 89 c7             	mov    %rax,%rdi
  800420fcf4:	48 b8 97 f2 20 04 80 	movabs $0x800420f297,%rax
  800420fcfb:	00 00 00 
  800420fcfe:	ff d0                	callq  *%rax
  800420fd00:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800420fd03:	eb 3b                	jmp    800420fd40 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  800420fd05:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420fd09:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800420fd0d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420fd11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd15:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800420fd19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fd1d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800420fd21:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420fd25:	4d 89 c1             	mov    %r8,%r9
  800420fd28:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fd2e:	48 89 c7             	mov    %rax,%rdi
  800420fd31:	48 b8 fa f6 20 04 80 	movabs $0x800420f6fa,%rax
  800420fd38:	00 00 00 
  800420fd3b:	ff d0                	callq  *%rax
  800420fd3d:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  800420fd40:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  800420fd44:	74 07                	je     800420fd4d <_dwarf_get_next_fde+0x237>
			return(-1);
  800420fd46:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fd4b:	eb 19                	jmp    800420fd66 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  800420fd4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420fd51:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  800420fd55:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420fd59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fd5d:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  800420fd61:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420fd66:	c9                   	leaveq 
  800420fd67:	c3                   	retq   

000000800420fd68 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  800420fd68:	55                   	push   %rbp
  800420fd69:	48 89 e5             	mov    %rsp,%rbp
  800420fd6c:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420fd70:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd74:	89 f0                	mov    %esi,%eax
  800420fd76:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  800420fd7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd7e:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800420fd82:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  800420fd86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd8a:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  800420fd8e:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  800420fd92:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  800420fd96:	c9                   	leaveq 
  800420fd97:	c3                   	retq   

000000800420fd98 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800420fd98:	55                   	push   %rbp
  800420fd99:	48 89 e5             	mov    %rsp,%rbp
  800420fd9c:	48 83 ec 10          	sub    $0x10,%rsp
  800420fda0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420fda4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  800420fda8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420fdad:	75 0a                	jne    800420fdb9 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800420fdaf:	b8 01 00 00 00       	mov    $0x1,%eax
  800420fdb4:	e9 85 00 00 00       	jmpq   800420fe3e <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  800420fdb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fdbd:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420fdc1:	48 85 c0             	test   %rax,%rax
  800420fdc4:	75 25                	jne    800420fdeb <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  800420fdc6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420fdca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fdce:	48 89 d6             	mov    %rdx,%rsi
  800420fdd1:	48 89 c7             	mov    %rax,%rdi
  800420fdd4:	48 b8 af fa 20 04 80 	movabs $0x800420faaf,%rax
  800420fddb:	00 00 00 
  800420fdde:	ff d0                	callq  *%rax
  800420fde0:	85 c0                	test   %eax,%eax
  800420fde2:	74 07                	je     800420fdeb <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  800420fde4:	b8 01 00 00 00       	mov    $0x1,%eax
  800420fde9:	eb 53                	jmp    800420fe3e <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  800420fdeb:	48 bf 20 66 22 04 80 	movabs $0x8004226620,%rdi
  800420fdf2:	00 00 00 
  800420fdf5:	48 b8 64 d8 20 04 80 	movabs $0x800420d864,%rax
  800420fdfc:	00 00 00 
  800420fdff:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  800420fe01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe05:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  800420fe0c:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  800420fe0d:	48 b8 20 66 22 04 80 	movabs $0x8004226620,%rax
  800420fe14:	00 00 00 
  800420fe17:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fe1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe1f:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  800420fe23:	48 b8 20 66 22 04 80 	movabs $0x8004226620,%rax
  800420fe2a:	00 00 00 
  800420fe2d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800420fe31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe35:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  800420fe39:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420fe3e:	c9                   	leaveq 
  800420fe3f:	c3                   	retq   

000000800420fe40 <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  800420fe40:	55                   	push   %rbp
  800420fe41:	48 89 e5             	mov    %rsp,%rbp
  800420fe44:	53                   	push   %rbx
  800420fe45:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  800420fe4c:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  800420fe50:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  800420fe54:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  800420fe5b:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  800420fe62:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  800420fe69:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  800420fe70:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420fe74:	48 83 c0 48          	add    $0x48,%rax
  800420fe78:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  800420fe7c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420fe83:	00 
  800420fe84:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  800420fe8b:	00 
  800420fe8c:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  800420fe93:	00 
  800420fe94:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800420fe9b:	00 
  800420fe9c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420fea0:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  800420fea4:	0f b6 c0             	movzbl %al,%eax
  800420fea7:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800420feaa:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  800420feb1:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  800420feb8:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  800420febf:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  800420fec6:	e9 0a 05 00 00       	jmpq   80042103d5 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  800420fecb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420fed2:	0f b6 00             	movzbl (%rax),%eax
  800420fed5:	84 c0                	test   %al,%al
  800420fed7:	0f 85 78 01 00 00    	jne    8004210055 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  800420fedd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420fee4:	48 83 c0 01          	add    $0x1,%rax
  800420fee8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  800420feef:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  800420fef6:	48 89 c7             	mov    %rax,%rdi
  800420fef9:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800420ff00:	00 00 00 
  800420ff03:	ff d0                	callq  *%rax
  800420ff05:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  800420ff09:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420ff10:	0f b6 00             	movzbl (%rax),%eax
  800420ff13:	0f b6 c0             	movzbl %al,%eax
  800420ff16:	83 f8 02             	cmp    $0x2,%eax
  800420ff19:	74 7a                	je     800420ff95 <_dwarf_lineno_run_program+0x155>
  800420ff1b:	83 f8 03             	cmp    $0x3,%eax
  800420ff1e:	0f 84 b3 00 00 00    	je     800420ffd7 <_dwarf_lineno_run_program+0x197>
  800420ff24:	83 f8 01             	cmp    $0x1,%eax
  800420ff27:	0f 85 09 01 00 00    	jne    8004210036 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  800420ff2d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420ff34:	48 83 c0 01          	add    $0x1,%rax
  800420ff38:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  800420ff3f:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  800420ff46:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420ff4d:	00 
  800420ff4e:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  800420ff55:	00 
  800420ff56:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  800420ff5d:	00 
  800420ff5e:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800420ff65:	00 
  800420ff66:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420ff6a:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  800420ff6e:	0f b6 c0             	movzbl %al,%eax
  800420ff71:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800420ff74:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  800420ff7b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  800420ff82:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  800420ff89:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  800420ff90:	e9 bb 00 00 00       	jmpq   8004210050 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  800420ff95:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420ff9c:	48 83 c0 01          	add    $0x1,%rax
  800420ffa0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  800420ffa7:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420ffae:	00 00 00 
  800420ffb1:	48 8b 00             	mov    (%rax),%rax
  800420ffb4:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420ffb8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800420ffbc:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  800420ffc0:	0f b6 ca             	movzbl %dl,%ecx
  800420ffc3:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  800420ffca:	89 ce                	mov    %ecx,%esi
  800420ffcc:	48 89 d7             	mov    %rdx,%rdi
  800420ffcf:	ff d0                	callq  *%rax
  800420ffd1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  800420ffd5:	eb 79                	jmp    8004210050 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  800420ffd7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420ffde:	48 83 c0 01          	add    $0x1,%rax
  800420ffe2:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  800420ffe9:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800420fff0:	00 00 00 
  800420fff3:	48 8b 08             	mov    (%rax),%rcx
  800420fff6:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800420fffd:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004210004:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210008:	49 89 c8             	mov    %rcx,%r8
  800421000b:	48 89 d1             	mov    %rdx,%rcx
  800421000e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004210013:	48 89 c7             	mov    %rax,%rdi
  8004210016:	48 b8 f8 03 21 04 80 	movabs $0x80042103f8,%rax
  800421001d:	00 00 00 
  8004210020:	ff d0                	callq  *%rax
  8004210022:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004210025:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004210029:	74 09                	je     8004210034 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  800421002b:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  800421002c:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421002f:	e9 ba 03 00 00       	jmpq   80042103ee <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  8004210034:	eb 1a                	jmp    8004210050 <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  8004210036:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800421003d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210041:	48 01 d0             	add    %rdx,%rax
  8004210044:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800421004b:	e9 85 03 00 00       	jmpq   80042103d5 <_dwarf_lineno_run_program+0x595>
  8004210050:	e9 80 03 00 00       	jmpq   80042103d5 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  8004210055:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421005c:	0f b6 00             	movzbl (%rax),%eax
  800421005f:	84 c0                	test   %al,%al
  8004210061:	0f 84 3c 02 00 00    	je     80042102a3 <_dwarf_lineno_run_program+0x463>
  8004210067:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421006e:	0f b6 10             	movzbl (%rax),%edx
  8004210071:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210075:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004210079:	38 c2                	cmp    %al,%dl
  800421007b:	0f 83 22 02 00 00    	jae    80042102a3 <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004210081:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004210088:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421008c:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004210093:	0f b6 00             	movzbl (%rax),%eax
  8004210096:	0f b6 c0             	movzbl %al,%eax
  8004210099:	83 f8 0c             	cmp    $0xc,%eax
  800421009c:	0f 87 fb 01 00 00    	ja     800421029d <_dwarf_lineno_run_program+0x45d>
  80042100a2:	89 c0                	mov    %eax,%eax
  80042100a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042100ab:	00 
  80042100ac:	48 b8 c8 39 21 04 80 	movabs $0x80042139c8,%rax
  80042100b3:	00 00 00 
  80042100b6:	48 01 d0             	add    %rdx,%rax
  80042100b9:	48 8b 00             	mov    (%rax),%rax
  80042100bc:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  80042100be:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042100c5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042100c9:	73 0a                	jae    80042100d5 <_dwarf_lineno_run_program+0x295>
  80042100cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042100d0:	e9 19 03 00 00       	jmpq   80042103ee <_dwarf_lineno_run_program+0x5ae>
  80042100d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042100d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042100dd:	48 89 10             	mov    %rdx,(%rax)
  80042100e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042100e4:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  80042100eb:	00 
  80042100ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042100f0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042100f4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042100f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042100fc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004210100:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004210104:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210108:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421010c:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004210110:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004210114:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004210117:	89 50 28             	mov    %edx,0x28(%rax)
  800421011a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421011e:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004210121:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004210124:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004210128:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421012b:	89 50 30             	mov    %edx,0x30(%rax)
  800421012e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210132:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004210139:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421013d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210141:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004210148:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  800421014f:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004210156:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  800421015d:	e9 3c 01 00 00       	jmpq   800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004210162:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004210169:	48 89 c7             	mov    %rax,%rdi
  800421016c:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  8004210173:	00 00 00 
  8004210176:	ff d0                	callq  *%rax
					li->li_minlen;
  8004210178:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421017c:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004210180:	0f b6 d2             	movzbl %dl,%edx
  8004210183:	48 0f af c2          	imul   %rdx,%rax
  8004210187:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  800421018b:	e9 0e 01 00 00       	jmpq   800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004210190:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004210197:	48 89 c7             	mov    %rax,%rdi
  800421019a:	48 b8 45 c0 20 04 80 	movabs $0x800420c045,%rax
  80042101a1:	00 00 00 
  80042101a4:	ff d0                	callq  *%rax
  80042101a6:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  80042101aa:	e9 ef 00 00 00       	jmpq   800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  80042101af:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042101b6:	48 89 c7             	mov    %rax,%rdi
  80042101b9:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  80042101c0:	00 00 00 
  80042101c3:	ff d0                	callq  *%rax
  80042101c5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  80042101c9:	e9 d0 00 00 00       	jmpq   800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  80042101ce:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042101d5:	48 89 c7             	mov    %rax,%rdi
  80042101d8:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  80042101df:	00 00 00 
  80042101e2:	ff d0                	callq  *%rax
  80042101e4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  80042101e8:	e9 b1 00 00 00       	jmpq   800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  80042101ed:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042101f1:	0f 94 c0             	sete   %al
  80042101f4:	0f b6 c0             	movzbl %al,%eax
  80042101f7:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  80042101fa:	e9 9f 00 00 00       	jmpq   800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  80042101ff:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004210206:	e9 93 00 00 00       	jmpq   800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  800421020b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421020f:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004210213:	0f b6 c0             	movzbl %al,%eax
  8004210216:	ba ff 00 00 00       	mov    $0xff,%edx
  800421021b:	89 d1                	mov    %edx,%ecx
  800421021d:	29 c1                	sub    %eax,%ecx
  800421021f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210223:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004210227:	0f b6 d8             	movzbl %al,%ebx
  800421022a:	89 c8                	mov    %ecx,%eax
  800421022c:	99                   	cltd   
  800421022d:	f7 fb                	idiv   %ebx
  800421022f:	89 c2                	mov    %eax,%edx
  8004210231:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210235:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004210239:	0f b6 c0             	movzbl %al,%eax
  800421023c:	0f af c2             	imul   %edx,%eax
  800421023f:	48 98                	cltq   
  8004210241:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004210245:	eb 57                	jmp    800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004210247:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800421024e:	00 00 00 
  8004210251:	48 8b 00             	mov    (%rax),%rax
  8004210254:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004210258:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  800421025f:	be 02 00 00 00       	mov    $0x2,%esi
  8004210264:	48 89 d7             	mov    %rdx,%rdi
  8004210267:	ff d0                	callq  *%rax
  8004210269:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  800421026d:	eb 2f                	jmp    800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  800421026f:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004210276:	eb 26                	jmp    800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004210278:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  800421027f:	eb 1d                	jmp    800421029e <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004210281:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004210288:	48 89 c7             	mov    %rax,%rdi
  800421028b:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  8004210292:	00 00 00 
  8004210295:	ff d0                	callq  *%rax
  8004210297:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  800421029b:	eb 01                	jmp    800421029e <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  800421029d:	90                   	nop
			}

		} else {
  800421029e:	e9 32 01 00 00       	jmpq   80042103d5 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  80042102a3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042102a7:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  80042102ab:	0f be c8             	movsbl %al,%ecx
  80042102ae:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042102b5:	0f b6 00             	movzbl (%rax),%eax
  80042102b8:	0f b6 d0             	movzbl %al,%edx
  80042102bb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042102bf:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042102c3:	0f b6 c0             	movzbl %al,%eax
  80042102c6:	29 c2                	sub    %eax,%edx
  80042102c8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042102cc:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042102d0:	0f b6 f0             	movzbl %al,%esi
  80042102d3:	89 d0                	mov    %edx,%eax
  80042102d5:	99                   	cltd   
  80042102d6:	f7 fe                	idiv   %esi
  80042102d8:	89 d0                	mov    %edx,%eax
  80042102da:	01 c8                	add    %ecx,%eax
  80042102dc:	48 98                	cltq   
  80042102de:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  80042102e2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042102e9:	0f b6 00             	movzbl (%rax),%eax
  80042102ec:	0f b6 d0             	movzbl %al,%edx
  80042102ef:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042102f3:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042102f7:	0f b6 c0             	movzbl %al,%eax
  80042102fa:	89 d1                	mov    %edx,%ecx
  80042102fc:	29 c1                	sub    %eax,%ecx
  80042102fe:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210302:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004210306:	0f b6 d8             	movzbl %al,%ebx
  8004210309:	89 c8                	mov    %ecx,%eax
  800421030b:	99                   	cltd   
  800421030c:	f7 fb                	idiv   %ebx
  800421030e:	89 c2                	mov    %eax,%edx
  8004210310:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210314:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004210318:	0f b6 c0             	movzbl %al,%eax
  800421031b:	0f af c2             	imul   %edx,%eax
  800421031e:	48 98                	cltq   
  8004210320:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004210324:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421032b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421032f:	73 0a                	jae    800421033b <_dwarf_lineno_run_program+0x4fb>
  8004210331:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210336:	e9 b3 00 00 00       	jmpq   80042103ee <_dwarf_lineno_run_program+0x5ae>
  800421033b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421033f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210343:	48 89 10             	mov    %rdx,(%rax)
  8004210346:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421034a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004210351:	00 
  8004210352:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004210356:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421035a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421035e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004210362:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004210366:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421036a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421036e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004210372:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004210376:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421037a:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421037d:	89 50 28             	mov    %edx,0x28(%rax)
  8004210380:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004210384:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004210387:	89 50 2c             	mov    %edx,0x2c(%rax)
  800421038a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421038e:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004210391:	89 50 30             	mov    %edx,0x30(%rax)
  8004210394:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004210398:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  800421039f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042103a3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042103a7:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  80042103ae:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  80042103b5:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  80042103bc:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  80042103c3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042103ca:	48 83 c0 01          	add    $0x1,%rax
  80042103ce:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  80042103d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042103dc:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  80042103e3:	0f 82 e2 fa ff ff    	jb     800420fecb <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  80042103e9:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  80042103ee:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  80042103f5:	5b                   	pop    %rbx
  80042103f6:	5d                   	pop    %rbp
  80042103f7:	c3                   	retq   

00000080042103f8 <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  80042103f8:	55                   	push   %rbp
  80042103f9:	48 89 e5             	mov    %rsp,%rbp
  80042103fc:	53                   	push   %rbx
  80042103fd:	48 83 ec 48          	sub    $0x48,%rsp
  8004210401:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210405:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210409:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421040d:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004210411:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004210415:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210419:	48 8b 00             	mov    (%rax),%rax
  800421041c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004210420:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210424:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004210428:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800421042c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210430:	48 89 c7             	mov    %rax,%rdi
  8004210433:	48 b8 af b1 20 04 80 	movabs $0x800420b1af,%rax
  800421043a:	00 00 00 
  800421043d:	ff d0                	callq  *%rax
  800421043f:	48 98                	cltq   
  8004210441:	48 83 c0 01          	add    $0x1,%rax
  8004210445:	48 01 d8             	add    %rbx,%rax
  8004210448:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  800421044c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004210450:	48 89 c7             	mov    %rax,%rdi
  8004210453:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800421045a:	00 00 00 
  800421045d:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  800421045f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004210463:	48 89 c7             	mov    %rax,%rdi
  8004210466:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  800421046d:	00 00 00 
  8004210470:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004210472:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004210476:	48 89 c7             	mov    %rax,%rdi
  8004210479:	48 b8 d7 c0 20 04 80 	movabs $0x800420c0d7,%rax
  8004210480:	00 00 00 
  8004210483:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004210485:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210489:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421048d:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004210490:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004210495:	48 83 c4 48          	add    $0x48,%rsp
  8004210499:	5b                   	pop    %rbx
  800421049a:	5d                   	pop    %rbp
  800421049b:	c3                   	retq   

000000800421049c <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  800421049c:	55                   	push   %rbp
  800421049d:	48 89 e5             	mov    %rsp,%rbp
  80042104a0:	53                   	push   %rbx
  80042104a1:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  80042104a8:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  80042104af:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  80042104b6:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  80042104bd:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  80042104c4:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  80042104cb:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  80042104d2:	00 
  80042104d3:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  80042104da:	00 
  80042104db:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  80042104e2:	00 
  80042104e3:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042104ea:	00 
  80042104eb:	48 b8 30 3a 21 04 80 	movabs $0x8004213a30,%rax
  80042104f2:	00 00 00 
  80042104f5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  80042104f9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  80042104fd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004210501:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004210508:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800421050f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004210513:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004210518:	75 35                	jne    800421054f <_dwarf_lineno_init+0xb3>
  800421051a:	48 b9 3c 3a 21 04 80 	movabs $0x8004213a3c,%rcx
  8004210521:	00 00 00 
  8004210524:	48 ba 47 3a 21 04 80 	movabs $0x8004213a47,%rdx
  800421052b:	00 00 00 
  800421052e:	be 13 01 00 00       	mov    $0x113,%esi
  8004210533:	48 bf 5c 3a 21 04 80 	movabs $0x8004213a5c,%rdi
  800421053a:	00 00 00 
  800421053d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210542:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004210549:	00 00 00 
  800421054c:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  800421054f:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004210556:	00 00 00 
  8004210559:	48 8b 00             	mov    (%rax),%rax
  800421055c:	48 85 c0             	test   %rax,%rax
  800421055f:	75 35                	jne    8004210596 <_dwarf_lineno_init+0xfa>
  8004210561:	48 b9 73 3a 21 04 80 	movabs $0x8004213a73,%rcx
  8004210568:	00 00 00 
  800421056b:	48 ba 47 3a 21 04 80 	movabs $0x8004213a47,%rdx
  8004210572:	00 00 00 
  8004210575:	be 14 01 00 00       	mov    $0x114,%esi
  800421057a:	48 bf 5c 3a 21 04 80 	movabs $0x8004213a5c,%rdi
  8004210581:	00 00 00 
  8004210584:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210589:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004210590:	00 00 00 
  8004210593:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004210596:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421059a:	48 89 c7             	mov    %rax,%rdi
  800421059d:	48 b8 64 d8 20 04 80 	movabs $0x800420d864,%rax
  80042105a4:	00 00 00 
  80042105a7:	ff d0                	callq  *%rax
  80042105a9:	85 c0                	test   %eax,%eax
  80042105ab:	74 0a                	je     80042105b7 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  80042105ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042105b2:	e9 4f 04 00 00       	jmpq   8004210a06 <_dwarf_lineno_init+0x56a>

	li = linfo;
  80042105b7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042105be:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  80042105c2:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  80042105c9:	00 00 00 
  80042105cc:	48 8b 00             	mov    (%rax),%rax
  80042105cf:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042105d3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042105d7:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042105db:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042105e2:	ba 04 00 00 00       	mov    $0x4,%edx
  80042105e7:	48 89 cf             	mov    %rcx,%rdi
  80042105ea:	ff d0                	callq  *%rax
  80042105ec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  80042105f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042105f5:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042105f9:	75 37                	jne    8004210632 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  80042105fb:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  8004210602:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004210609:	00 00 00 
  800421060c:	48 8b 00             	mov    (%rax),%rax
  800421060f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210613:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210617:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421061b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004210622:	ba 08 00 00 00       	mov    $0x8,%edx
  8004210627:	48 89 cf             	mov    %rcx,%rdi
  800421062a:	ff d0                	callq  *%rax
  800421062c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210630:	eb 07                	jmp    8004210639 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004210632:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004210639:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421063d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004210641:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004210648:	48 29 c2             	sub    %rax,%rdx
  800421064b:	48 89 d0             	mov    %rdx,%rax
  800421064e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004210652:	73 0a                	jae    800421065e <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004210654:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004210659:	e9 a8 03 00 00       	jmpq   8004210a06 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  800421065e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004210662:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210666:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004210669:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  8004210670:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210674:	48 01 d0             	add    %rdx,%rax
  8004210677:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  800421067b:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004210682:	00 00 00 
  8004210685:	48 8b 00             	mov    (%rax),%rax
  8004210688:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421068c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210690:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210694:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421069b:	ba 02 00 00 00       	mov    $0x2,%edx
  80042106a0:	48 89 cf             	mov    %rcx,%rdi
  80042106a3:	ff d0                	callq  *%rax
  80042106a5:	89 c2                	mov    %eax,%edx
  80042106a7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042106ab:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  80042106af:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  80042106b6:	00 00 00 
  80042106b9:	48 8b 00             	mov    (%rax),%rax
  80042106bc:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042106c0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042106c4:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042106c8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042106cb:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042106d2:	48 89 cf             	mov    %rcx,%rdi
  80042106d5:	ff d0                	callq  *%rax
  80042106d7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042106db:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  80042106df:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042106e6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  80042106ea:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  80042106f1:	00 00 00 
  80042106f4:	48 8b 00             	mov    (%rax),%rax
  80042106f7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042106fb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042106ff:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210703:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421070a:	ba 01 00 00 00       	mov    $0x1,%edx
  800421070f:	48 89 cf             	mov    %rcx,%rdi
  8004210712:	ff d0                	callq  *%rax
  8004210714:	89 c2                	mov    %eax,%edx
  8004210716:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421071a:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  800421071d:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004210724:	00 00 00 
  8004210727:	48 8b 00             	mov    (%rax),%rax
  800421072a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421072e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210732:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210736:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421073d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004210742:	48 89 cf             	mov    %rcx,%rdi
  8004210745:	ff d0                	callq  *%rax
  8004210747:	89 c2                	mov    %eax,%edx
  8004210749:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421074d:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  8004210750:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004210757:	00 00 00 
  800421075a:	48 8b 00             	mov    (%rax),%rax
  800421075d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210761:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210765:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210769:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004210770:	ba 01 00 00 00       	mov    $0x1,%edx
  8004210775:	48 89 cf             	mov    %rcx,%rdi
  8004210778:	ff d0                	callq  *%rax
  800421077a:	89 c2                	mov    %eax,%edx
  800421077c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004210780:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004210783:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  800421078a:	00 00 00 
  800421078d:	48 8b 00             	mov    (%rax),%rax
  8004210790:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004210794:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210798:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421079c:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042107a3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042107a8:	48 89 cf             	mov    %rcx,%rdi
  80042107ab:	ff d0                	callq  *%rax
  80042107ad:	89 c2                	mov    %eax,%edx
  80042107af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042107b3:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  80042107b6:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  80042107bd:	00 00 00 
  80042107c0:	48 8b 00             	mov    (%rax),%rax
  80042107c3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042107c7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042107cb:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042107cf:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042107d6:	ba 01 00 00 00       	mov    $0x1,%edx
  80042107db:	48 89 cf             	mov    %rcx,%rdi
  80042107de:	ff d0                	callq  *%rax
  80042107e0:	89 c2                	mov    %eax,%edx
  80042107e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042107e6:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  80042107e9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042107ed:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042107f1:	8d 50 fb             	lea    -0x5(%rax),%edx
  80042107f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042107f8:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042107fc:	0f b6 c0             	movzbl %al,%eax
  80042107ff:	83 e8 01             	sub    $0x1,%eax
  8004210802:	39 c2                	cmp    %eax,%edx
  8004210804:	7d 0c                	jge    8004210812 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004210806:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  800421080d:	e9 f1 01 00 00       	jmpq   8004210a03 <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  8004210812:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004210816:	48 bb e0 e4 2b 04 80 	movabs $0x80042be4e0,%rbx
  800421081d:	00 00 00 
  8004210820:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004210824:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  800421082b:	eb 41                	jmp    800421086e <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  800421082d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004210831:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004210835:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004210838:	48 98                	cltq   
  800421083a:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800421083e:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004210845:	00 00 00 
  8004210848:	48 8b 00             	mov    (%rax),%rax
  800421084b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421084f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210853:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210857:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421085e:	ba 01 00 00 00       	mov    $0x1,%edx
  8004210863:	48 89 cf             	mov    %rcx,%rdi
  8004210866:	ff d0                	callq  *%rax
  8004210868:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  800421086a:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800421086e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004210872:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004210876:	0f b6 c0             	movzbl %al,%eax
  8004210879:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  800421087c:	7f af                	jg     800421082d <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  800421087e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004210885:	00 
	p = ds->ds_data + offset;
  8004210886:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421088a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421088e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004210895:	48 01 d0             	add    %rdx,%rax
  8004210898:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  800421089f:	eb 1f                	jmp    80042108c0 <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  80042108a1:	90                   	nop
  80042108a2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042108a9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042108ad:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  80042108b4:	0f b6 00             	movzbl (%rax),%eax
  80042108b7:	84 c0                	test   %al,%al
  80042108b9:	75 e7                	jne    80042108a2 <_dwarf_lineno_init+0x406>
			;
		length++;
  80042108bb:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  80042108c0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042108c7:	0f b6 00             	movzbl (%rax),%eax
  80042108ca:	84 c0                	test   %al,%al
  80042108cc:	75 d3                	jne    80042108a1 <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  80042108ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042108d2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042108d6:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  80042108da:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042108e1:	48 89 c2             	mov    %rax,%rdx
  80042108e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042108e8:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042108ec:	48 29 c2             	sub    %rax,%rdx
  80042108ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042108f3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042108f7:	48 98                	cltq   
  80042108f9:	48 39 c2             	cmp    %rax,%rdx
  80042108fc:	7e 0c                	jle    800421090a <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042108fe:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004210905:	e9 f9 00 00 00       	jmpq   8004210a03 <_dwarf_lineno_init+0x567>
	}
	p++;
  800421090a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004210911:	48 83 c0 01          	add    $0x1,%rax
  8004210915:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  800421091c:	eb 3c                	jmp    800421095a <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  800421091e:	48 b8 18 66 22 04 80 	movabs $0x8004226618,%rax
  8004210925:	00 00 00 
  8004210928:	48 8b 08             	mov    (%rax),%rcx
  800421092b:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004210932:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  8004210939:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421093d:	49 89 c8             	mov    %rcx,%r8
  8004210940:	48 89 d1             	mov    %rdx,%rcx
  8004210943:	ba 00 00 00 00       	mov    $0x0,%edx
  8004210948:	48 89 c7             	mov    %rax,%rdi
  800421094b:	48 b8 f8 03 21 04 80 	movabs $0x80042103f8,%rax
  8004210952:	00 00 00 
  8004210955:	ff d0                	callq  *%rax
  8004210957:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  800421095a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004210961:	0f b6 00             	movzbl (%rax),%eax
  8004210964:	84 c0                	test   %al,%al
  8004210966:	75 b6                	jne    800421091e <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  8004210968:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421096f:	48 83 c0 01          	add    $0x1,%rax
  8004210973:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  800421097a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004210981:	48 89 c2             	mov    %rax,%rdx
  8004210984:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210988:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421098c:	48 29 c2             	sub    %rax,%rdx
  800421098f:	48 89 d0             	mov    %rdx,%rax
  8004210992:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004210996:	48 89 c2             	mov    %rax,%rdx
  8004210999:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421099d:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042109a1:	48 39 c2             	cmp    %rax,%rdx
  80042109a4:	74 09                	je     80042109af <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042109a6:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042109ad:	eb 54                	jmp    8004210a03 <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  80042109af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042109b3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042109b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042109bb:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042109bf:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042109c6:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  80042109cd:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  80042109d4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042109d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042109dc:	4d 89 c1             	mov    %r8,%r9
  80042109df:	49 89 f8             	mov    %rdi,%r8
  80042109e2:	48 89 c7             	mov    %rax,%rdi
  80042109e5:	48 b8 40 fe 20 04 80 	movabs $0x800420fe40,%rax
  80042109ec:	00 00 00 
  80042109ef:	ff d0                	callq  *%rax
  80042109f1:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  80042109f4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042109f8:	74 02                	je     80042109fc <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  80042109fa:	eb 07                	jmp    8004210a03 <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  80042109fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210a01:	eb 03                	jmp    8004210a06 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  8004210a03:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  8004210a06:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004210a0d:	5b                   	pop    %rbx
  8004210a0e:	5d                   	pop    %rbp
  8004210a0f:	c3                   	retq   

0000008004210a10 <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004210a10:	55                   	push   %rbp
  8004210a11:	48 89 e5             	mov    %rsp,%rbp
  8004210a14:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004210a1b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004210a22:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004210a29:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004210a30:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  8004210a37:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  8004210a3e:	00 
  8004210a3f:	75 35                	jne    8004210a76 <dwarf_srclines+0x66>
  8004210a41:	48 b9 7f 3a 21 04 80 	movabs $0x8004213a7f,%rcx
  8004210a48:	00 00 00 
  8004210a4b:	48 ba 47 3a 21 04 80 	movabs $0x8004213a47,%rdx
  8004210a52:	00 00 00 
  8004210a55:	be 9a 01 00 00       	mov    $0x19a,%esi
  8004210a5a:	48 bf 5c 3a 21 04 80 	movabs $0x8004213a5c,%rdi
  8004210a61:	00 00 00 
  8004210a64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210a69:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004210a70:	00 00 00 
  8004210a73:	41 ff d0             	callq  *%r8
	assert(linebuf);
  8004210a76:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004210a7d:	00 
  8004210a7e:	75 35                	jne    8004210ab5 <dwarf_srclines+0xa5>
  8004210a80:	48 b9 83 3a 21 04 80 	movabs $0x8004213a83,%rcx
  8004210a87:	00 00 00 
  8004210a8a:	48 ba 47 3a 21 04 80 	movabs $0x8004213a47,%rdx
  8004210a91:	00 00 00 
  8004210a94:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004210a99:	48 bf 5c 3a 21 04 80 	movabs $0x8004213a5c,%rdi
  8004210aa0:	00 00 00 
  8004210aa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210aa8:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  8004210aaf:	00 00 00 
  8004210ab2:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004210ab5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004210abc:	ba 88 00 00 00       	mov    $0x88,%edx
  8004210ac1:	be 00 00 00 00       	mov    $0x0,%esi
  8004210ac6:	48 89 c7             	mov    %rax,%rdi
  8004210ac9:	48 b8 b4 b4 20 04 80 	movabs $0x800420b4b4,%rax
  8004210ad0:	00 00 00 
  8004210ad3:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  8004210ad5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004210adc:	be 10 00 00 00       	mov    $0x10,%esi
  8004210ae1:	48 89 c7             	mov    %rax,%rdi
  8004210ae4:	48 b8 e9 d3 20 04 80 	movabs $0x800420d3e9,%rax
  8004210aeb:	00 00 00 
  8004210aee:	ff d0                	callq  *%rax
  8004210af0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210af4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210af9:	75 0a                	jne    8004210b05 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004210afb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004210b00:	e9 84 00 00 00       	jmpq   8004210b89 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  8004210b05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b09:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004210b0d:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  8004210b14:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  8004210b1b:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8004210b22:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004210b29:	49 89 f8             	mov    %rdi,%r8
  8004210b2c:	48 89 c7             	mov    %rax,%rdi
  8004210b2f:	48 b8 9c 04 21 04 80 	movabs $0x800421049c,%rax
  8004210b36:	00 00 00 
  8004210b39:	ff d0                	callq  *%rax
  8004210b3b:	85 c0                	test   %eax,%eax
  8004210b3d:	74 07                	je     8004210b46 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  8004210b3f:	b8 01 00 00 00       	mov    $0x1,%eax
  8004210b44:	eb 43                	jmp    8004210b89 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  8004210b46:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004210b4d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004210b51:	48 89 10             	mov    %rdx,(%rax)
  8004210b54:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210b58:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004210b5c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210b60:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210b64:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004210b68:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004210b6c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004210b70:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004210b74:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210b78:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004210b7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210b80:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004210b84:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004210b89:	c9                   	leaveq 
  8004210b8a:	c3                   	retq   

0000008004210b8b <_dwarf_find_section>:
uintptr_t
read_section_headers(uintptr_t, uintptr_t);

Dwarf_Section *
_dwarf_find_section(const char *name)
{
  8004210b8b:	55                   	push   %rbp
  8004210b8c:	48 89 e5             	mov    %rsp,%rbp
  8004210b8f:	48 83 ec 20          	sub    $0x20,%rsp
  8004210b93:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *ret=NULL;
  8004210b97:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210b9e:	00 
	int i;

	for(i=0; i < NDEBUG_SECT; i++) {
  8004210b9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004210ba6:	eb 57                	jmp    8004210bff <_dwarf_find_section+0x74>
		if(!strcmp(section_info[i].ds_name, name)) {
  8004210ba8:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210baf:	00 00 00 
  8004210bb2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004210bb5:	48 63 d2             	movslq %edx,%rdx
  8004210bb8:	48 c1 e2 05          	shl    $0x5,%rdx
  8004210bbc:	48 01 d0             	add    %rdx,%rax
  8004210bbf:	48 8b 00             	mov    (%rax),%rax
  8004210bc2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210bc6:	48 89 d6             	mov    %rdx,%rsi
  8004210bc9:	48 89 c7             	mov    %rax,%rdi
  8004210bcc:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004210bd3:	00 00 00 
  8004210bd6:	ff d0                	callq  *%rax
  8004210bd8:	85 c0                	test   %eax,%eax
  8004210bda:	75 1f                	jne    8004210bfb <_dwarf_find_section+0x70>
			ret = (section_info + i);
  8004210bdc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bdf:	48 98                	cltq   
  8004210be1:	48 c1 e0 05          	shl    $0x5,%rax
  8004210be5:	48 89 c2             	mov    %rax,%rdx
  8004210be8:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210bef:	00 00 00 
  8004210bf2:	48 01 d0             	add    %rdx,%rax
  8004210bf5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004210bf9:	eb 0a                	jmp    8004210c05 <_dwarf_find_section+0x7a>
_dwarf_find_section(const char *name)
{
	Dwarf_Section *ret=NULL;
	int i;

	for(i=0; i < NDEBUG_SECT; i++) {
  8004210bfb:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004210bff:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004210c03:	7e a3                	jle    8004210ba8 <_dwarf_find_section+0x1d>
			ret = (section_info + i);
			break;
		}
	}

	return ret;
  8004210c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210c09:	c9                   	leaveq 
  8004210c0a:	c3                   	retq   

0000008004210c0b <find_debug_sections>:

void find_debug_sections(uintptr_t elf) 
{
  8004210c0b:	55                   	push   %rbp
  8004210c0c:	48 89 e5             	mov    %rsp,%rbp
  8004210c0f:	48 83 ec 40          	sub    $0x40,%rsp
  8004210c13:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	Elf *ehdr = (Elf *)elf;
  8004210c17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210c1b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uintptr_t debug_address = USTABDATA;
  8004210c1f:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  8004210c26:	00 
	Secthdr *sh = (Secthdr *)(((uint8_t *)ehdr + ehdr->e_shoff));
  8004210c27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c2b:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004210c2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c33:	48 01 d0             	add    %rdx,%rax
  8004210c36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	Secthdr *shstr_tab = sh + ehdr->e_shstrndx;
  8004210c3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c3e:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004210c42:	0f b7 c0             	movzwl %ax,%eax
  8004210c45:	48 c1 e0 06          	shl    $0x6,%rax
  8004210c49:	48 89 c2             	mov    %rax,%rdx
  8004210c4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c50:	48 01 d0             	add    %rdx,%rax
  8004210c53:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	Secthdr* esh = sh + ehdr->e_shnum;
  8004210c57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c5b:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004210c5f:	0f b7 c0             	movzwl %ax,%eax
  8004210c62:	48 c1 e0 06          	shl    $0x6,%rax
  8004210c66:	48 89 c2             	mov    %rax,%rdx
  8004210c69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c6d:	48 01 d0             	add    %rdx,%rax
  8004210c70:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	for(;sh < esh; sh++) {
  8004210c74:	e9 4b 02 00 00       	jmpq   8004210ec4 <find_debug_sections+0x2b9>
		char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  8004210c79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c7d:	8b 00                	mov    (%rax),%eax
  8004210c7f:	89 c2                	mov    %eax,%edx
  8004210c81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c85:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004210c89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210c8d:	48 01 c8             	add    %rcx,%rax
  8004210c90:	48 01 d0             	add    %rdx,%rax
  8004210c93:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if(!strcmp(name, ".debug_info")) {
  8004210c97:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210c9b:	48 be 8b 3a 21 04 80 	movabs $0x8004213a8b,%rsi
  8004210ca2:	00 00 00 
  8004210ca5:	48 89 c7             	mov    %rax,%rdi
  8004210ca8:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004210caf:	00 00 00 
  8004210cb2:	ff d0                	callq  *%rax
  8004210cb4:	85 c0                	test   %eax,%eax
  8004210cb6:	75 4b                	jne    8004210d03 <find_debug_sections+0xf8>
			section_info[DEBUG_INFO].ds_data = (uint8_t*)debug_address;
  8004210cb8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210cbc:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210cc3:	00 00 00 
  8004210cc6:	48 89 50 08          	mov    %rdx,0x8(%rax)
			section_info[DEBUG_INFO].ds_addr = debug_address;
  8004210cca:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210cd1:	00 00 00 
  8004210cd4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210cd8:	48 89 50 10          	mov    %rdx,0x10(%rax)
			section_info[DEBUG_INFO].ds_size = sh->sh_size;
  8004210cdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ce0:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004210ce4:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210ceb:	00 00 00 
  8004210cee:	48 89 50 18          	mov    %rdx,0x18(%rax)
			debug_address += sh->sh_size;
  8004210cf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cf6:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004210cfa:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210cfe:	e9 bc 01 00 00       	jmpq   8004210ebf <find_debug_sections+0x2b4>
		} else if(!strcmp(name, ".debug_abbrev")) {
  8004210d03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210d07:	48 be 97 3a 21 04 80 	movabs $0x8004213a97,%rsi
  8004210d0e:	00 00 00 
  8004210d11:	48 89 c7             	mov    %rax,%rdi
  8004210d14:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004210d1b:	00 00 00 
  8004210d1e:	ff d0                	callq  *%rax
  8004210d20:	85 c0                	test   %eax,%eax
  8004210d22:	75 4b                	jne    8004210d6f <find_debug_sections+0x164>
			section_info[DEBUG_ABBREV].ds_data = (uint8_t*)debug_address;
  8004210d24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210d28:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210d2f:	00 00 00 
  8004210d32:	48 89 50 28          	mov    %rdx,0x28(%rax)
			section_info[DEBUG_ABBREV].ds_addr = debug_address;
  8004210d36:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210d3d:	00 00 00 
  8004210d40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210d44:	48 89 50 30          	mov    %rdx,0x30(%rax)
			section_info[DEBUG_ABBREV].ds_size = sh->sh_size;
  8004210d48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d4c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004210d50:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210d57:	00 00 00 
  8004210d5a:	48 89 50 38          	mov    %rdx,0x38(%rax)
			debug_address += sh->sh_size;
  8004210d5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d62:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004210d66:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210d6a:	e9 50 01 00 00       	jmpq   8004210ebf <find_debug_sections+0x2b4>
		} else if(!strcmp(name, ".debug_line")){
  8004210d6f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210d73:	48 be af 3a 21 04 80 	movabs $0x8004213aaf,%rsi
  8004210d7a:	00 00 00 
  8004210d7d:	48 89 c7             	mov    %rax,%rdi
  8004210d80:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004210d87:	00 00 00 
  8004210d8a:	ff d0                	callq  *%rax
  8004210d8c:	85 c0                	test   %eax,%eax
  8004210d8e:	75 4b                	jne    8004210ddb <find_debug_sections+0x1d0>
			section_info[DEBUG_LINE].ds_data = (uint8_t*)debug_address;
  8004210d90:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210d94:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210d9b:	00 00 00 
  8004210d9e:	48 89 50 68          	mov    %rdx,0x68(%rax)
			section_info[DEBUG_LINE].ds_addr = debug_address;
  8004210da2:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210da9:	00 00 00 
  8004210dac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210db0:	48 89 50 70          	mov    %rdx,0x70(%rax)
			section_info[DEBUG_LINE].ds_size = sh->sh_size;
  8004210db4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210db8:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004210dbc:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210dc3:	00 00 00 
  8004210dc6:	48 89 50 78          	mov    %rdx,0x78(%rax)
			debug_address += sh->sh_size;
  8004210dca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210dce:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004210dd2:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210dd6:	e9 e4 00 00 00       	jmpq   8004210ebf <find_debug_sections+0x2b4>
		} else if(!strcmp(name, ".eh_frame")){
  8004210ddb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210ddf:	48 be a5 3a 21 04 80 	movabs $0x8004213aa5,%rsi
  8004210de6:	00 00 00 
  8004210de9:	48 89 c7             	mov    %rax,%rdi
  8004210dec:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004210df3:	00 00 00 
  8004210df6:	ff d0                	callq  *%rax
  8004210df8:	85 c0                	test   %eax,%eax
  8004210dfa:	75 53                	jne    8004210e4f <find_debug_sections+0x244>
			section_info[DEBUG_FRAME].ds_data = (uint8_t*)sh->sh_addr;
  8004210dfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e00:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004210e04:	48 89 c2             	mov    %rax,%rdx
  8004210e07:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210e0e:	00 00 00 
  8004210e11:	48 89 50 48          	mov    %rdx,0x48(%rax)
			section_info[DEBUG_FRAME].ds_addr = sh->sh_addr;
  8004210e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e19:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210e1d:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210e24:	00 00 00 
  8004210e27:	48 89 50 50          	mov    %rdx,0x50(%rax)
			section_info[DEBUG_FRAME].ds_size = sh->sh_size;
  8004210e2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e2f:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004210e33:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210e3a:	00 00 00 
  8004210e3d:	48 89 50 58          	mov    %rdx,0x58(%rax)
			debug_address += sh->sh_size;
  8004210e41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e45:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004210e49:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210e4d:	eb 70                	jmp    8004210ebf <find_debug_sections+0x2b4>
		} else if(!strcmp(name, ".debug_str")) {
  8004210e4f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210e53:	48 be bb 3a 21 04 80 	movabs $0x8004213abb,%rsi
  8004210e5a:	00 00 00 
  8004210e5d:	48 89 c7             	mov    %rax,%rdi
  8004210e60:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004210e67:	00 00 00 
  8004210e6a:	ff d0                	callq  *%rax
  8004210e6c:	85 c0                	test   %eax,%eax
  8004210e6e:	75 4f                	jne    8004210ebf <find_debug_sections+0x2b4>
			section_info[DEBUG_STR].ds_data = (uint8_t*)debug_address;
  8004210e70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210e74:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210e7b:	00 00 00 
  8004210e7e:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
			section_info[DEBUG_STR].ds_addr = debug_address;
  8004210e85:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210e8c:	00 00 00 
  8004210e8f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210e93:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
			section_info[DEBUG_STR].ds_size = sh->sh_size;
  8004210e9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e9e:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004210ea2:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004210ea9:	00 00 00 
  8004210eac:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
			debug_address += sh->sh_size;
  8004210eb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210eb7:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004210ebb:	48 01 45 f8          	add    %rax,-0x8(%rbp)
	Elf *ehdr = (Elf *)elf;
	uintptr_t debug_address = USTABDATA;
	Secthdr *sh = (Secthdr *)(((uint8_t *)ehdr + ehdr->e_shoff));
	Secthdr *shstr_tab = sh + ehdr->e_shstrndx;
	Secthdr* esh = sh + ehdr->e_shnum;
	for(;sh < esh; sh++) {
  8004210ebf:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  8004210ec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ec8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004210ecc:	0f 82 a7 fd ff ff    	jb     8004210c79 <find_debug_sections+0x6e>
			section_info[DEBUG_STR].ds_size = sh->sh_size;
			debug_address += sh->sh_size;
		}
	}

}
  8004210ed2:	c9                   	leaveq 
  8004210ed3:	c3                   	retq   

0000008004210ed4 <read_section_headers>:

uint64_t
read_section_headers(uintptr_t elfhdr, uintptr_t to_va)
{
  8004210ed4:	55                   	push   %rbp
  8004210ed5:	48 89 e5             	mov    %rsp,%rbp
  8004210ed8:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  8004210edf:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  8004210ee6:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
	Secthdr* secthdr_ptr[20] = {0};
  8004210eed:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  8004210ef4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210ef9:	ba 14 00 00 00       	mov    $0x14,%edx
  8004210efe:	48 89 f7             	mov    %rsi,%rdi
  8004210f01:	48 89 d1             	mov    %rdx,%rcx
  8004210f04:	f3 48 ab             	rep stos %rax,%es:(%rdi)
	char* kvbase = ROUNDUP((char*)to_va, SECTSIZE);
  8004210f07:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004210f0e:	00 
  8004210f0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f13:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  8004210f1a:	48 01 d0             	add    %rdx,%rax
  8004210f1d:	48 83 e8 01          	sub    $0x1,%rax
  8004210f21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004210f25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f29:	ba 00 00 00 00       	mov    $0x0,%edx
  8004210f2e:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004210f32:	48 89 d0             	mov    %rdx,%rax
  8004210f35:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210f39:	48 29 c2             	sub    %rax,%rdx
  8004210f3c:	48 89 d0             	mov    %rdx,%rax
  8004210f3f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	uint64_t kvoffset = 0;
  8004210f43:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004210f4a:	00 00 00 00 
	char *orig_secthdr = (char*)kvbase;
  8004210f4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f52:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	char * secthdr = NULL;
  8004210f56:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004210f5d:	00 
	uint64_t offset;
	if(elfhdr == KELFHDR)
  8004210f5e:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004210f65:	00 00 00 
  8004210f68:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004210f6f:	75 11                	jne    8004210f82 <read_section_headers+0xae>
		offset = ((Elf*)elfhdr)->e_shoff;
  8004210f71:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004210f78:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004210f7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210f80:	eb 26                	jmp    8004210fa8 <read_section_headers+0xd4>
	else
		offset = ((Elf*)elfhdr)->e_shoff + (elfhdr - KERNBASE);
  8004210f82:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004210f89:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004210f8d:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004210f94:	48 01 c2             	add    %rax,%rdx
  8004210f97:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004210f9e:	ff ff ff 
  8004210fa1:	48 01 d0             	add    %rdx,%rax
  8004210fa4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	int numSectionHeaders = ((Elf*)elfhdr)->e_shnum;
  8004210fa8:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004210faf:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004210fb3:	0f b7 c0             	movzwl %ax,%eax
  8004210fb6:	89 45 c4             	mov    %eax,-0x3c(%rbp)
	int sizeSections = ((Elf*)elfhdr)->e_shentsize;
  8004210fb9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004210fc0:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004210fc4:	0f b7 c0             	movzwl %ax,%eax
  8004210fc7:	89 45 c0             	mov    %eax,-0x40(%rbp)
	char *nametab;
	int i;
	uint64_t temp;
	char *name;

	Elf *ehdr = (Elf *)elfhdr;
  8004210fca:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004210fd1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	Secthdr *sec_name;  

	readseg((uint64_t)orig_secthdr , numSectionHeaders * sizeSections,
  8004210fd5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004210fd8:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004210fdc:	48 63 f0             	movslq %eax,%rsi
  8004210fdf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210fe3:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004210fea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210fee:	48 89 c7             	mov    %rax,%rdi
  8004210ff1:	48 b8 13 16 21 04 80 	movabs $0x8004211613,%rax
  8004210ff8:	00 00 00 
  8004210ffb:	ff d0                	callq  *%rax
		offset, &kvoffset);
	secthdr = (char*)orig_secthdr + (offset - ROUNDDOWN(offset, SECTSIZE));
  8004210ffd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211001:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004211005:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211009:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  800421100f:	48 89 c2             	mov    %rax,%rdx
  8004211012:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211016:	48 29 d0             	sub    %rdx,%rax
  8004211019:	48 89 c2             	mov    %rax,%rdx
  800421101c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211020:	48 01 d0             	add    %rdx,%rax
  8004211023:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	for (i = 0; i < numSectionHeaders; i++)
  8004211027:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421102e:	eb 24                	jmp    8004211054 <read_section_headers+0x180>
	{
		secthdr_ptr[i] = (Secthdr*)(secthdr) + i;
  8004211030:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211033:	48 98                	cltq   
  8004211035:	48 c1 e0 06          	shl    $0x6,%rax
  8004211039:	48 89 c2             	mov    %rax,%rdx
  800421103c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211040:	48 01 c2             	add    %rax,%rdx
  8004211043:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211046:	48 98                	cltq   
  8004211048:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  800421104f:	ff 
	Secthdr *sec_name;  

	readseg((uint64_t)orig_secthdr , numSectionHeaders * sizeSections,
		offset, &kvoffset);
	secthdr = (char*)orig_secthdr + (offset - ROUNDDOWN(offset, SECTSIZE));
	for (i = 0; i < numSectionHeaders; i++)
  8004211050:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004211054:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211057:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  800421105a:	7c d4                	jl     8004211030 <read_section_headers+0x15c>
	{
		secthdr_ptr[i] = (Secthdr*)(secthdr) + i;
	}
	
	sec_name = secthdr_ptr[ehdr->e_shstrndx]; 
  800421105c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211060:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004211064:	0f b7 c0             	movzwl %ax,%eax
  8004211067:	48 98                	cltq   
  8004211069:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004211070:	ff 
  8004211071:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	temp = kvoffset;
  8004211075:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421107c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	readseg((uint64_t)((char *)kvbase + kvoffset), sec_name->sh_size,
  8004211080:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211084:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211088:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421108c:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004211090:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004211097:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421109b:	48 01 c8             	add    %rcx,%rax
  800421109e:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042110a5:	48 89 c7             	mov    %rax,%rdi
  80042110a8:	48 b8 13 16 21 04 80 	movabs $0x8004211613,%rax
  80042110af:	00 00 00 
  80042110b2:	ff d0                	callq  *%rax
		sec_name->sh_offset, &kvoffset);
	nametab = (char *)((char *)kvbase + temp) + OFFSET_CORRECT(sec_name->sh_offset);	
  80042110b4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042110b8:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042110bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042110c0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042110c4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042110c8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042110cc:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042110d2:	48 29 c2             	sub    %rax,%rdx
  80042110d5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042110d9:	48 01 c2             	add    %rax,%rdx
  80042110dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110e0:	48 01 d0             	add    %rdx,%rax
  80042110e3:	48 89 45 90          	mov    %rax,-0x70(%rbp)

	for (i = 0; i < numSectionHeaders; i++)
  80042110e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042110ee:	e9 04 05 00 00       	jmpq   80042115f7 <read_section_headers+0x723>
	{
		name = (char *)(nametab + secthdr_ptr[i]->sh_name);
  80042110f3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042110f6:	48 98                	cltq   
  80042110f8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042110ff:	ff 
  8004211100:	8b 00                	mov    (%rax),%eax
  8004211102:	89 c2                	mov    %eax,%edx
  8004211104:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004211108:	48 01 d0             	add    %rdx,%rax
  800421110b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
		assert(kvoffset % SECTSIZE == 0);
  800421110f:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004211116:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421111b:	48 85 c0             	test   %rax,%rax
  800421111e:	74 35                	je     8004211155 <read_section_headers+0x281>
  8004211120:	48 b9 c6 3a 21 04 80 	movabs $0x8004213ac6,%rcx
  8004211127:	00 00 00 
  800421112a:	48 ba df 3a 21 04 80 	movabs $0x8004213adf,%rdx
  8004211131:	00 00 00 
  8004211134:	be 86 00 00 00       	mov    $0x86,%esi
  8004211139:	48 bf f4 3a 21 04 80 	movabs $0x8004213af4,%rdi
  8004211140:	00 00 00 
  8004211143:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211148:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800421114f:	00 00 00 
  8004211152:	41 ff d0             	callq  *%r8
		temp = kvoffset;
  8004211155:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421115c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
#ifdef DWARF_DEBUG
		cprintf("SectName: %s\n", name);
#endif
		if(!strcmp(name, ".debug_info"))
  8004211160:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004211164:	48 be 8b 3a 21 04 80 	movabs $0x8004213a8b,%rsi
  800421116b:	00 00 00 
  800421116e:	48 89 c7             	mov    %rax,%rdi
  8004211171:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004211178:	00 00 00 
  800421117b:	ff d0                	callq  *%rax
  800421117d:	85 c0                	test   %eax,%eax
  800421117f:	0f 85 d8 00 00 00    	jne    800421125d <read_section_headers+0x389>
		{
			readseg((uint64_t)((char *)kvbase + kvoffset), secthdr_ptr[i]->sh_size, 
				secthdr_ptr[i]->sh_offset, &kvoffset);	
  8004211185:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211188:	48 98                	cltq   
  800421118a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004211191:	ff 
#ifdef DWARF_DEBUG
		cprintf("SectName: %s\n", name);
#endif
		if(!strcmp(name, ".debug_info"))
		{
			readseg((uint64_t)((char *)kvbase + kvoffset), secthdr_ptr[i]->sh_size, 
  8004211192:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211196:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211199:	48 98                	cltq   
  800421119b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042111a2:	ff 
  80042111a3:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042111a7:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  80042111ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042111b2:	48 01 c8             	add    %rcx,%rax
  80042111b5:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042111bc:	48 89 c7             	mov    %rax,%rdi
  80042111bf:	48 b8 13 16 21 04 80 	movabs $0x8004211613,%rax
  80042111c6:	00 00 00 
  80042111c9:	ff d0                	callq  *%rax
				secthdr_ptr[i]->sh_offset, &kvoffset);	
			section_info[DEBUG_INFO].ds_data = (uint8_t *)((char *)kvbase + temp) + OFFSET_CORRECT(secthdr_ptr[i]->sh_offset);
  80042111cb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042111ce:	48 98                	cltq   
  80042111d0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042111d7:	ff 
  80042111d8:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042111dc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042111df:	48 98                	cltq   
  80042111e1:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042111e8:	ff 
  80042111e9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042111ed:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042111f1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042111f5:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042111fb:	48 29 c2             	sub    %rax,%rdx
  80042111fe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211202:	48 01 c2             	add    %rax,%rdx
  8004211205:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211209:	48 01 c2             	add    %rax,%rdx
  800421120c:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211213:	00 00 00 
  8004211216:	48 89 50 08          	mov    %rdx,0x8(%rax)
			section_info[DEBUG_INFO].ds_addr = (uintptr_t)section_info[DEBUG_INFO].ds_data;
  800421121a:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211221:	00 00 00 
  8004211224:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211228:	48 89 c2             	mov    %rax,%rdx
  800421122b:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211232:	00 00 00 
  8004211235:	48 89 50 10          	mov    %rdx,0x10(%rax)
			section_info[DEBUG_INFO].ds_size = secthdr_ptr[i]->sh_size;
  8004211239:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421123c:	48 98                	cltq   
  800421123e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004211245:	ff 
  8004211246:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421124a:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211251:	00 00 00 
  8004211254:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004211258:	e9 96 03 00 00       	jmpq   80042115f3 <read_section_headers+0x71f>
		}
		else if(!strcmp(name, ".debug_abbrev"))
  800421125d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004211261:	48 be 97 3a 21 04 80 	movabs $0x8004213a97,%rsi
  8004211268:	00 00 00 
  800421126b:	48 89 c7             	mov    %rax,%rdi
  800421126e:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004211275:	00 00 00 
  8004211278:	ff d0                	callq  *%rax
  800421127a:	85 c0                	test   %eax,%eax
  800421127c:	0f 85 de 00 00 00    	jne    8004211360 <read_section_headers+0x48c>
		{
			readseg((uint64_t)((char *)kvbase + kvoffset), secthdr_ptr[i]->sh_size, 
				secthdr_ptr[i]->sh_offset, &kvoffset);	
  8004211282:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211285:	48 98                	cltq   
  8004211287:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421128e:	ff 
			section_info[DEBUG_INFO].ds_addr = (uintptr_t)section_info[DEBUG_INFO].ds_data;
			section_info[DEBUG_INFO].ds_size = secthdr_ptr[i]->sh_size;
		}
		else if(!strcmp(name, ".debug_abbrev"))
		{
			readseg((uint64_t)((char *)kvbase + kvoffset), secthdr_ptr[i]->sh_size, 
  800421128f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211293:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211296:	48 98                	cltq   
  8004211298:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421129f:	ff 
  80042112a0:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042112a4:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  80042112ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042112af:	48 01 c8             	add    %rcx,%rax
  80042112b2:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042112b9:	48 89 c7             	mov    %rax,%rdi
  80042112bc:	48 b8 13 16 21 04 80 	movabs $0x8004211613,%rax
  80042112c3:	00 00 00 
  80042112c6:	ff d0                	callq  *%rax
				secthdr_ptr[i]->sh_offset, &kvoffset);	
			section_info[DEBUG_ABBREV].ds_data = (uint8_t *)((char *)kvbase + temp) + OFFSET_CORRECT(secthdr_ptr[i]->sh_offset);
  80042112c8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042112cb:	48 98                	cltq   
  80042112cd:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042112d4:	ff 
  80042112d5:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042112d9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042112dc:	48 98                	cltq   
  80042112de:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042112e5:	ff 
  80042112e6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042112ea:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042112f1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042112f8:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042112fe:	48 29 c2             	sub    %rax,%rdx
  8004211301:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211305:	48 01 c2             	add    %rax,%rdx
  8004211308:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421130c:	48 01 c2             	add    %rax,%rdx
  800421130f:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211316:	00 00 00 
  8004211319:	48 89 50 28          	mov    %rdx,0x28(%rax)
			section_info[DEBUG_ABBREV].ds_addr = (uintptr_t)section_info[DEBUG_ABBREV].ds_data;
  800421131d:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211324:	00 00 00 
  8004211327:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421132b:	48 89 c2             	mov    %rax,%rdx
  800421132e:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211335:	00 00 00 
  8004211338:	48 89 50 30          	mov    %rdx,0x30(%rax)
			section_info[DEBUG_ABBREV].ds_size = secthdr_ptr[i]->sh_size;
  800421133c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421133f:	48 98                	cltq   
  8004211341:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004211348:	ff 
  8004211349:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421134d:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211354:	00 00 00 
  8004211357:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421135b:	e9 93 02 00 00       	jmpq   80042115f3 <read_section_headers+0x71f>
		}
		else if(!strcmp(name, ".debug_line"))
  8004211360:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004211364:	48 be af 3a 21 04 80 	movabs $0x8004213aaf,%rsi
  800421136b:	00 00 00 
  800421136e:	48 89 c7             	mov    %rax,%rdi
  8004211371:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004211378:	00 00 00 
  800421137b:	ff d0                	callq  *%rax
  800421137d:	85 c0                	test   %eax,%eax
  800421137f:	0f 85 de 00 00 00    	jne    8004211463 <read_section_headers+0x58f>
		{
			readseg((uint64_t)((char *)kvbase + kvoffset), secthdr_ptr[i]->sh_size, 
				secthdr_ptr[i]->sh_offset, &kvoffset);	
  8004211385:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211388:	48 98                	cltq   
  800421138a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004211391:	ff 
			section_info[DEBUG_ABBREV].ds_addr = (uintptr_t)section_info[DEBUG_ABBREV].ds_data;
			section_info[DEBUG_ABBREV].ds_size = secthdr_ptr[i]->sh_size;
		}
		else if(!strcmp(name, ".debug_line"))
		{
			readseg((uint64_t)((char *)kvbase + kvoffset), secthdr_ptr[i]->sh_size, 
  8004211392:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211396:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211399:	48 98                	cltq   
  800421139b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042113a2:	ff 
  80042113a3:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042113a7:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  80042113ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042113b2:	48 01 c8             	add    %rcx,%rax
  80042113b5:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042113bc:	48 89 c7             	mov    %rax,%rdi
  80042113bf:	48 b8 13 16 21 04 80 	movabs $0x8004211613,%rax
  80042113c6:	00 00 00 
  80042113c9:	ff d0                	callq  *%rax
				secthdr_ptr[i]->sh_offset, &kvoffset);	
			section_info[DEBUG_LINE].ds_data = (uint8_t *)((char *)kvbase + temp) + OFFSET_CORRECT(secthdr_ptr[i]->sh_offset);
  80042113cb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042113ce:	48 98                	cltq   
  80042113d0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042113d7:	ff 
  80042113d8:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042113dc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042113df:	48 98                	cltq   
  80042113e1:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042113e8:	ff 
  80042113e9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042113ed:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  80042113f4:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042113fb:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004211401:	48 29 c2             	sub    %rax,%rdx
  8004211404:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211408:	48 01 c2             	add    %rax,%rdx
  800421140b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421140f:	48 01 c2             	add    %rax,%rdx
  8004211412:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211419:	00 00 00 
  800421141c:	48 89 50 68          	mov    %rdx,0x68(%rax)
			section_info[DEBUG_LINE].ds_addr = (uintptr_t)section_info[DEBUG_LINE].ds_data;
  8004211420:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211427:	00 00 00 
  800421142a:	48 8b 40 68          	mov    0x68(%rax),%rax
  800421142e:	48 89 c2             	mov    %rax,%rdx
  8004211431:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211438:	00 00 00 
  800421143b:	48 89 50 70          	mov    %rdx,0x70(%rax)
			section_info[DEBUG_LINE].ds_size = secthdr_ptr[i]->sh_size;
  800421143f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211442:	48 98                	cltq   
  8004211444:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421144b:	ff 
  800421144c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004211450:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  8004211457:	00 00 00 
  800421145a:	48 89 50 78          	mov    %rdx,0x78(%rax)
  800421145e:	e9 90 01 00 00       	jmpq   80042115f3 <read_section_headers+0x71f>
		}
		else if(!strcmp(name, ".eh_frame"))
  8004211463:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004211467:	48 be a5 3a 21 04 80 	movabs $0x8004213aa5,%rsi
  800421146e:	00 00 00 
  8004211471:	48 89 c7             	mov    %rax,%rdi
  8004211474:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  800421147b:	00 00 00 
  800421147e:	ff d0                	callq  *%rax
  8004211480:	85 c0                	test   %eax,%eax
  8004211482:	75 65                	jne    80042114e9 <read_section_headers+0x615>
		{
			section_info[DEBUG_FRAME].ds_data = (uint8_t *)secthdr_ptr[i]->sh_addr;
  8004211484:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211487:	48 98                	cltq   
  8004211489:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004211490:	ff 
  8004211491:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004211495:	48 89 c2             	mov    %rax,%rdx
  8004211498:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  800421149f:	00 00 00 
  80042114a2:	48 89 50 48          	mov    %rdx,0x48(%rax)
			section_info[DEBUG_FRAME].ds_addr = (uintptr_t)section_info[DEBUG_FRAME].ds_data;
  80042114a6:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  80042114ad:	00 00 00 
  80042114b0:	48 8b 40 48          	mov    0x48(%rax),%rax
  80042114b4:	48 89 c2             	mov    %rax,%rdx
  80042114b7:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  80042114be:	00 00 00 
  80042114c1:	48 89 50 50          	mov    %rdx,0x50(%rax)
			section_info[DEBUG_FRAME].ds_size = secthdr_ptr[i]->sh_size;
  80042114c5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042114c8:	48 98                	cltq   
  80042114ca:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042114d1:	ff 
  80042114d2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042114d6:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  80042114dd:	00 00 00 
  80042114e0:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042114e4:	e9 0a 01 00 00       	jmpq   80042115f3 <read_section_headers+0x71f>
		}
		else if(!strcmp(name, ".debug_str"))
  80042114e9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042114ed:	48 be bb 3a 21 04 80 	movabs $0x8004213abb,%rsi
  80042114f4:	00 00 00 
  80042114f7:	48 89 c7             	mov    %rax,%rdi
  80042114fa:	48 b8 7d b3 20 04 80 	movabs $0x800420b37d,%rax
  8004211501:	00 00 00 
  8004211504:	ff d0                	callq  *%rax
  8004211506:	85 c0                	test   %eax,%eax
  8004211508:	0f 85 e5 00 00 00    	jne    80042115f3 <read_section_headers+0x71f>
		{
			readseg((uint64_t)((char *)kvbase + kvoffset), secthdr_ptr[i]->sh_size, 
				secthdr_ptr[i]->sh_offset, &kvoffset);	
  800421150e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211511:	48 98                	cltq   
  8004211513:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421151a:	ff 
			section_info[DEBUG_FRAME].ds_addr = (uintptr_t)section_info[DEBUG_FRAME].ds_data;
			section_info[DEBUG_FRAME].ds_size = secthdr_ptr[i]->sh_size;
		}
		else if(!strcmp(name, ".debug_str"))
		{
			readseg((uint64_t)((char *)kvbase + kvoffset), secthdr_ptr[i]->sh_size, 
  800421151b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421151f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211522:	48 98                	cltq   
  8004211524:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421152b:	ff 
  800421152c:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004211530:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004211537:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421153b:	48 01 c8             	add    %rcx,%rax
  800421153e:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004211545:	48 89 c7             	mov    %rax,%rdi
  8004211548:	48 b8 13 16 21 04 80 	movabs $0x8004211613,%rax
  800421154f:	00 00 00 
  8004211552:	ff d0                	callq  *%rax
				secthdr_ptr[i]->sh_offset, &kvoffset);	
			section_info[DEBUG_STR].ds_data = (uint8_t *)((char *)kvbase + temp) + OFFSET_CORRECT(secthdr_ptr[i]->sh_offset);
  8004211554:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211557:	48 98                	cltq   
  8004211559:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004211560:	ff 
  8004211561:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211565:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211568:	48 98                	cltq   
  800421156a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004211571:	ff 
  8004211572:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211576:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421157d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211584:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  800421158a:	48 29 c2             	sub    %rax,%rdx
  800421158d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211591:	48 01 c2             	add    %rax,%rdx
  8004211594:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211598:	48 01 c2             	add    %rax,%rdx
  800421159b:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  80042115a2:	00 00 00 
  80042115a5:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
			section_info[DEBUG_STR].ds_addr = (uintptr_t)section_info[DEBUG_STR].ds_data;
  80042115ac:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  80042115b3:	00 00 00 
  80042115b6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  80042115bd:	48 89 c2             	mov    %rax,%rdx
  80042115c0:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  80042115c7:	00 00 00 
  80042115ca:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
			section_info[DEBUG_STR].ds_size = secthdr_ptr[i]->sh_size;
  80042115d1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042115d4:	48 98                	cltq   
  80042115d6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042115dd:	ff 
  80042115de:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042115e2:	48 b8 40 66 22 04 80 	movabs $0x8004226640,%rax
  80042115e9:	00 00 00 
  80042115ec:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	temp = kvoffset;
	readseg((uint64_t)((char *)kvbase + kvoffset), sec_name->sh_size,
		sec_name->sh_offset, &kvoffset);
	nametab = (char *)((char *)kvbase + temp) + OFFSET_CORRECT(sec_name->sh_offset);	

	for (i = 0; i < numSectionHeaders; i++)
  80042115f3:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042115f7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042115fa:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  80042115fd:	0f 8c f0 fa ff ff    	jl     80042110f3 <read_section_headers+0x21f>
			section_info[DEBUG_STR].ds_addr = (uintptr_t)section_info[DEBUG_STR].ds_data;
			section_info[DEBUG_STR].ds_size = secthdr_ptr[i]->sh_size;
		}
	}
	
	return ((uintptr_t)kvbase + kvoffset);
  8004211603:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004211607:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421160e:	48 01 d0             	add    %rdx,%rax
}
  8004211611:	c9                   	leaveq 
  8004211612:	c3                   	retq   

0000008004211613 <readseg>:

// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
// Might copy more than asked
void
readseg(uint64_t pa, uint64_t count, uint64_t offset, uint64_t* kvoffset)
{
  8004211613:	55                   	push   %rbp
  8004211614:	48 89 e5             	mov    %rsp,%rbp
  8004211617:	48 83 ec 30          	sub    $0x30,%rsp
  800421161b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421161f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211623:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211627:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	uint64_t end_pa;
	uint64_t orgoff = offset;
  800421162b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421162f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	end_pa = pa + count;
  8004211633:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211637:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421163b:	48 01 d0             	add    %rdx,%rax
  800421163e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	assert(pa % SECTSIZE == 0);	
  8004211642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211646:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421164b:	48 85 c0             	test   %rax,%rax
  800421164e:	74 35                	je     8004211685 <readseg+0x72>
  8004211650:	48 b9 02 3b 21 04 80 	movabs $0x8004213b02,%rcx
  8004211657:	00 00 00 
  800421165a:	48 ba df 3a 21 04 80 	movabs $0x8004213adf,%rdx
  8004211661:	00 00 00 
  8004211664:	be c0 00 00 00       	mov    $0xc0,%esi
  8004211669:	48 bf f4 3a 21 04 80 	movabs $0x8004213af4,%rdi
  8004211670:	00 00 00 
  8004211673:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211678:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800421167f:	00 00 00 
  8004211682:	41 ff d0             	callq  *%r8
	// round down to sector boundary
	pa &= ~(SECTSIZE - 1);
  8004211685:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  800421168c:	ff 

	// translate from bytes to sectors, and kernel starts at sector 1
	offset = (offset / SECTSIZE) + 1;
  800421168d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211691:	48 c1 e8 09          	shr    $0x9,%rax
  8004211695:	48 83 c0 01          	add    $0x1,%rax
  8004211699:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

	// If this is too slow, we could read lots of sectors at a time.
	// We'd write more to memory than asked, but it doesn't matter --
	// we load in increasing order.
	while (pa < end_pa) {
  800421169d:	eb 3c                	jmp    80042116db <readseg+0xc8>
		readsect((uint8_t*) pa, offset);
  800421169f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116a3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042116a7:	48 89 d6             	mov    %rdx,%rsi
  80042116aa:	48 89 c7             	mov    %rax,%rdi
  80042116ad:	48 b8 a3 17 21 04 80 	movabs $0x80042117a3,%rax
  80042116b4:	00 00 00 
  80042116b7:	ff d0                	callq  *%rax
		pa += SECTSIZE;
  80042116b9:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  80042116c0:	00 
		*kvoffset += SECTSIZE;
  80042116c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042116c5:	48 8b 00             	mov    (%rax),%rax
  80042116c8:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  80042116cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042116d3:	48 89 10             	mov    %rdx,(%rax)
		offset++;
  80042116d6:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
	offset = (offset / SECTSIZE) + 1;

	// If this is too slow, we could read lots of sectors at a time.
	// We'd write more to memory than asked, but it doesn't matter --
	// we load in increasing order.
	while (pa < end_pa) {
  80042116db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116df:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042116e3:	72 ba                	jb     800421169f <readseg+0x8c>
		pa += SECTSIZE;
		*kvoffset += SECTSIZE;
		offset++;
	}

	if(((orgoff % SECTSIZE) + count) > SECTSIZE)
  80042116e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042116e9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042116ee:	48 89 c2             	mov    %rax,%rdx
  80042116f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042116f5:	48 01 d0             	add    %rdx,%rax
  80042116f8:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  80042116fe:	76 2f                	jbe    800421172f <readseg+0x11c>
	{
		readsect((uint8_t*) pa, offset);
  8004211700:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211704:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004211708:	48 89 d6             	mov    %rdx,%rsi
  800421170b:	48 89 c7             	mov    %rax,%rdi
  800421170e:	48 b8 a3 17 21 04 80 	movabs $0x80042117a3,%rax
  8004211715:	00 00 00 
  8004211718:	ff d0                	callq  *%rax
		*kvoffset += SECTSIZE;
  800421171a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421171e:	48 8b 00             	mov    (%rax),%rax
  8004211721:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004211728:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421172c:	48 89 10             	mov    %rdx,(%rax)
	}
	assert(*kvoffset % SECTSIZE == 0);
  800421172f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211733:	48 8b 00             	mov    (%rax),%rax
  8004211736:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421173b:	48 85 c0             	test   %rax,%rax
  800421173e:	74 35                	je     8004211775 <readseg+0x162>
  8004211740:	48 b9 15 3b 21 04 80 	movabs $0x8004213b15,%rcx
  8004211747:	00 00 00 
  800421174a:	48 ba df 3a 21 04 80 	movabs $0x8004213adf,%rdx
  8004211751:	00 00 00 
  8004211754:	be d6 00 00 00       	mov    $0xd6,%esi
  8004211759:	48 bf f4 3a 21 04 80 	movabs $0x8004213af4,%rdi
  8004211760:	00 00 00 
  8004211763:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211768:	49 b8 50 01 20 04 80 	movabs $0x8004200150,%r8
  800421176f:	00 00 00 
  8004211772:	41 ff d0             	callq  *%r8
}
  8004211775:	c9                   	leaveq 
  8004211776:	c3                   	retq   

0000008004211777 <waitdisk>:

void
waitdisk(void)
{
  8004211777:	55                   	push   %rbp
  8004211778:	48 89 e5             	mov    %rsp,%rbp
  800421177b:	48 83 ec 10          	sub    $0x10,%rsp
	// wait for disk reaady
	while ((inb(0x1F7) & 0xC0) != 0x40)
  800421177f:	90                   	nop
  8004211780:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004211787:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421178a:	89 c2                	mov    %eax,%edx
  800421178c:	ec                   	in     (%dx),%al
  800421178d:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  8004211790:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004211794:	0f b6 c0             	movzbl %al,%eax
  8004211797:	25 c0 00 00 00       	and    $0xc0,%eax
  800421179c:	83 f8 40             	cmp    $0x40,%eax
  800421179f:	75 df                	jne    8004211780 <waitdisk+0x9>
		/* do nothing */;
}
  80042117a1:	c9                   	leaveq 
  80042117a2:	c3                   	retq   

00000080042117a3 <readsect>:

void
readsect(void *dst, uint64_t offset)
{
  80042117a3:	55                   	push   %rbp
  80042117a4:	48 89 e5             	mov    %rsp,%rbp
  80042117a7:	48 83 ec 60          	sub    $0x60,%rsp
  80042117ab:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042117af:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	// wait for disk to be ready
	waitdisk();
  80042117b3:	48 b8 77 17 21 04 80 	movabs $0x8004211777,%rax
  80042117ba:	00 00 00 
  80042117bd:	ff d0                	callq  *%rax
  80042117bf:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  80042117c6:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042117ca:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042117ce:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042117d1:	ee                   	out    %al,(%dx)

	outb(0x1F2, 1);		// count = 1
	outb(0x1F3, offset);
  80042117d2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042117d6:	0f b6 c0             	movzbl %al,%eax
  80042117d9:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  80042117e0:	88 45 f3             	mov    %al,-0xd(%rbp)
  80042117e3:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042117e7:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042117ea:	ee                   	out    %al,(%dx)
	outb(0x1F4, offset >> 8);
  80042117eb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042117ef:	48 c1 e8 08          	shr    $0x8,%rax
  80042117f3:	0f b6 c0             	movzbl %al,%eax
  80042117f6:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  80042117fd:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004211800:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004211804:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004211807:	ee                   	out    %al,(%dx)
	outb(0x1F5, offset >> 16);
  8004211808:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421180c:	48 c1 e8 10          	shr    $0x10,%rax
  8004211810:	0f b6 c0             	movzbl %al,%eax
  8004211813:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  800421181a:	88 45 e3             	mov    %al,-0x1d(%rbp)
  800421181d:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004211821:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004211824:	ee                   	out    %al,(%dx)
	outb(0x1F6, (offset >> 24) | 0xE0);
  8004211825:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211829:	48 c1 e8 18          	shr    $0x18,%rax
  800421182d:	83 c8 e0             	or     $0xffffffe0,%eax
  8004211830:	0f b6 c0             	movzbl %al,%eax
  8004211833:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  800421183a:	88 45 db             	mov    %al,-0x25(%rbp)
  800421183d:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004211841:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004211844:	ee                   	out    %al,(%dx)
  8004211845:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  800421184c:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004211850:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004211854:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004211857:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// cmd 0x20 - read sectors

	// wait for disk to be ready
	waitdisk();
  8004211858:	48 b8 77 17 21 04 80 	movabs $0x8004211777,%rax
  800421185f:	00 00 00 
  8004211862:	ff d0                	callq  *%rax
  8004211864:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  800421186b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421186f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004211873:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  800421187a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421187d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004211881:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004211884:	48 89 ce             	mov    %rcx,%rsi
  8004211887:	48 89 f7             	mov    %rsi,%rdi
  800421188a:	89 c1                	mov    %eax,%ecx
  800421188c:	fc                   	cld    
  800421188d:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  800421188f:	89 c8                	mov    %ecx,%eax
  8004211891:	48 89 fe             	mov    %rdi,%rsi
  8004211894:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004211898:	89 45 bc             	mov    %eax,-0x44(%rbp)

	// read a sector
	insl(0x1F0, dst, SECTSIZE/4);
}
  800421189b:	c9                   	leaveq 
  800421189c:	c3                   	retq   
